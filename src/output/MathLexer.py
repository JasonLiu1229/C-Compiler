# Generated from Math.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,26,158,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,
        0,1,0,1,1,1,1,1,2,1,2,1,3,4,3,61,8,3,11,3,12,3,62,1,4,4,4,66,8,4,
        11,4,12,4,67,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,
        11,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,
        15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,4,20,107,
        8,20,11,20,12,20,108,1,20,1,20,1,21,4,21,114,8,21,11,21,12,21,115,
        1,21,1,21,1,22,4,22,121,8,22,11,22,12,22,122,1,22,1,22,1,23,4,23,
        128,8,23,11,23,12,23,129,1,23,1,23,1,24,1,24,1,24,1,24,5,24,138,
        8,24,10,24,12,24,141,9,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,
        1,25,5,25,152,8,25,10,25,12,25,155,9,25,1,25,1,25,1,139,0,26,1,1,
        3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
        51,26,1,0,6,2,0,65,90,97,122,1,0,48,57,1,0,32,32,2,0,10,10,13,13,
        3,0,9,10,13,13,32,32,2,0,9,10,32,32,165,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,1,53,1,0,0,0,3,
        55,1,0,0,0,5,57,1,0,0,0,7,60,1,0,0,0,9,65,1,0,0,0,11,69,1,0,0,0,
        13,71,1,0,0,0,15,73,1,0,0,0,17,75,1,0,0,0,19,77,1,0,0,0,21,79,1,
        0,0,0,23,81,1,0,0,0,25,84,1,0,0,0,27,86,1,0,0,0,29,89,1,0,0,0,31,
        92,1,0,0,0,33,95,1,0,0,0,35,98,1,0,0,0,37,101,1,0,0,0,39,103,1,0,
        0,0,41,106,1,0,0,0,43,113,1,0,0,0,45,120,1,0,0,0,47,127,1,0,0,0,
        49,133,1,0,0,0,51,147,1,0,0,0,53,54,5,59,0,0,54,2,1,0,0,0,55,56,
        5,40,0,0,56,4,1,0,0,0,57,58,5,41,0,0,58,6,1,0,0,0,59,61,7,0,0,0,
        60,59,1,0,0,0,61,62,1,0,0,0,62,60,1,0,0,0,62,63,1,0,0,0,63,8,1,0,
        0,0,64,66,7,1,0,0,65,64,1,0,0,0,66,67,1,0,0,0,67,65,1,0,0,0,67,68,
        1,0,0,0,68,10,1,0,0,0,69,70,5,42,0,0,70,12,1,0,0,0,71,72,5,47,0,
        0,72,14,1,0,0,0,73,74,5,37,0,0,74,16,1,0,0,0,75,76,5,43,0,0,76,18,
        1,0,0,0,77,78,5,45,0,0,78,20,1,0,0,0,79,80,5,60,0,0,80,22,1,0,0,
        0,81,82,5,60,0,0,82,83,5,61,0,0,83,24,1,0,0,0,84,85,5,62,0,0,85,
        26,1,0,0,0,86,87,5,62,0,0,87,88,5,61,0,0,88,28,1,0,0,0,89,90,5,61,
        0,0,90,91,5,61,0,0,91,30,1,0,0,0,92,93,5,33,0,0,93,94,5,61,0,0,94,
        32,1,0,0,0,95,96,5,124,0,0,96,97,5,124,0,0,97,34,1,0,0,0,98,99,5,
        38,0,0,99,100,5,38,0,0,100,36,1,0,0,0,101,102,5,33,0,0,102,38,1,
        0,0,0,103,104,5,61,0,0,104,40,1,0,0,0,105,107,7,2,0,0,106,105,1,
        0,0,0,107,108,1,0,0,0,108,106,1,0,0,0,108,109,1,0,0,0,109,110,1,
        0,0,0,110,111,6,20,0,0,111,42,1,0,0,0,112,114,7,3,0,0,113,112,1,
        0,0,0,114,115,1,0,0,0,115,113,1,0,0,0,115,116,1,0,0,0,116,117,1,
        0,0,0,117,118,6,21,0,0,118,44,1,0,0,0,119,121,7,4,0,0,120,119,1,
        0,0,0,121,122,1,0,0,0,122,120,1,0,0,0,122,123,1,0,0,0,123,124,1,
        0,0,0,124,125,6,22,0,0,125,46,1,0,0,0,126,128,7,5,0,0,127,126,1,
        0,0,0,128,129,1,0,0,0,129,127,1,0,0,0,129,130,1,0,0,0,130,131,1,
        0,0,0,131,132,6,23,0,0,132,48,1,0,0,0,133,134,5,47,0,0,134,135,5,
        42,0,0,135,139,1,0,0,0,136,138,9,0,0,0,137,136,1,0,0,0,138,141,1,
        0,0,0,139,140,1,0,0,0,139,137,1,0,0,0,140,142,1,0,0,0,141,139,1,
        0,0,0,142,143,5,42,0,0,143,144,5,47,0,0,144,145,1,0,0,0,145,146,
        6,24,1,0,146,50,1,0,0,0,147,148,5,47,0,0,148,149,5,47,0,0,149,153,
        1,0,0,0,150,152,8,3,0,0,151,150,1,0,0,0,152,155,1,0,0,0,153,151,
        1,0,0,0,153,154,1,0,0,0,154,156,1,0,0,0,155,153,1,0,0,0,156,157,
        6,25,1,0,157,52,1,0,0,0,10,0,60,62,67,108,115,122,129,139,153,2,
        6,0,0,0,1,0
    ]

class MathLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    ID = 4
    INT = 5
    MUL = 6
    DIV = 7
    MOD = 8
    SUM = 9
    DIF = 10
    LT = 11
    LEQ = 12
    GT = 13
    GEQ = 14
    EQ = 15
    NEQ = 16
    OR_OP = 17
    AND_OP = 18
    NOT_OP = 19
    ASSIGN = 20
    SP = 21
    NEWLINE = 22
    WS = 23
    LN = 24
    COMMENT = 25
    LCOMMENT = 26

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'('", "')'", "'*'", "'/'", "'%'", "'+'", "'-'", "'<'", 
            "'<='", "'>'", "'>='", "'=='", "'!='", "'||'", "'&&'", "'!'", 
            "'='" ]

    symbolicNames = [ "<INVALID>",
            "ID", "INT", "MUL", "DIV", "MOD", "SUM", "DIF", "LT", "LEQ", 
            "GT", "GEQ", "EQ", "NEQ", "OR_OP", "AND_OP", "NOT_OP", "ASSIGN", 
            "SP", "NEWLINE", "WS", "LN", "COMMENT", "LCOMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "ID", "INT", "MUL", "DIV", "MOD", 
                  "SUM", "DIF", "LT", "LEQ", "GT", "GEQ", "EQ", "NEQ", "OR_OP", 
                  "AND_OP", "NOT_OP", "ASSIGN", "SP", "NEWLINE", "WS", "LN", 
                  "COMMENT", "LCOMMENT" ]

    grammarFileName = "Math.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


