# Generated from Math.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,46,313,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,
        5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,
        9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
        15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,
        16,1,16,1,16,1,16,1,16,1,16,3,16,184,8,16,1,17,3,17,187,8,17,1,17,
        5,17,190,8,17,10,17,12,17,193,9,17,1,18,4,18,196,8,18,11,18,12,18,
        197,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,5,21,210,8,
        21,10,21,12,21,213,9,21,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,
        1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,30,1,30,
        1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,
        1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,
        4,40,262,8,40,11,40,12,40,263,1,40,1,40,1,41,4,41,269,8,41,11,41,
        12,41,270,1,41,1,41,1,42,4,42,276,8,42,11,42,12,42,277,1,42,1,42,
        1,43,4,43,283,8,43,11,43,12,43,284,1,43,1,43,1,44,1,44,1,44,1,44,
        5,44,293,8,44,10,44,12,44,296,9,44,1,44,1,44,1,44,1,44,1,44,1,45,
        1,45,1,45,1,45,5,45,307,8,45,10,45,12,45,310,9,45,1,45,1,45,2,211,
        294,0,46,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
        23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
        34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,
        45,91,46,1,0,7,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
        1,0,48,57,1,0,32,32,2,0,10,10,13,13,3,0,9,10,13,13,32,32,2,0,9,10,
        32,32,323,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
        0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
        0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
        0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
        0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,
        0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,
        0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,
        0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,
        0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,
        0,0,0,0,91,1,0,0,0,1,93,1,0,0,0,3,95,1,0,0,0,5,97,1,0,0,0,7,99,1,
        0,0,0,9,101,1,0,0,0,11,105,1,0,0,0,13,111,1,0,0,0,15,114,1,0,0,0,
        17,119,1,0,0,0,19,123,1,0,0,0,21,129,1,0,0,0,23,135,1,0,0,0,25,144,
        1,0,0,0,27,151,1,0,0,0,29,156,1,0,0,0,31,164,1,0,0,0,33,183,1,0,
        0,0,35,186,1,0,0,0,37,195,1,0,0,0,39,199,1,0,0,0,41,203,1,0,0,0,
        43,207,1,0,0,0,45,216,1,0,0,0,47,218,1,0,0,0,49,220,1,0,0,0,51,222,
        1,0,0,0,53,224,1,0,0,0,55,226,1,0,0,0,57,228,1,0,0,0,59,231,1,0,
        0,0,61,233,1,0,0,0,63,236,1,0,0,0,65,239,1,0,0,0,67,242,1,0,0,0,
        69,245,1,0,0,0,71,248,1,0,0,0,73,250,1,0,0,0,75,252,1,0,0,0,77,254,
        1,0,0,0,79,257,1,0,0,0,81,261,1,0,0,0,83,268,1,0,0,0,85,275,1,0,
        0,0,87,282,1,0,0,0,89,288,1,0,0,0,91,302,1,0,0,0,93,94,5,59,0,0,
        94,2,1,0,0,0,95,96,5,44,0,0,96,4,1,0,0,0,97,98,5,40,0,0,98,6,1,0,
        0,0,99,100,5,41,0,0,100,8,1,0,0,0,101,102,5,40,0,0,102,103,3,33,
        16,0,103,104,5,41,0,0,104,10,1,0,0,0,105,106,5,99,0,0,106,107,5,
        111,0,0,107,108,5,110,0,0,108,109,5,115,0,0,109,110,5,116,0,0,110,
        12,1,0,0,0,111,112,5,105,0,0,112,113,5,102,0,0,113,14,1,0,0,0,114,
        115,5,101,0,0,115,116,5,108,0,0,116,117,5,115,0,0,117,118,5,101,
        0,0,118,16,1,0,0,0,119,120,5,102,0,0,120,121,5,111,0,0,121,122,5,
        114,0,0,122,18,1,0,0,0,123,124,5,119,0,0,124,125,5,104,0,0,125,126,
        5,105,0,0,126,127,5,108,0,0,127,128,5,101,0,0,128,20,1,0,0,0,129,
        130,5,98,0,0,130,131,5,114,0,0,131,132,5,101,0,0,132,133,5,97,0,
        0,133,134,5,107,0,0,134,22,1,0,0,0,135,136,5,99,0,0,136,137,5,111,
        0,0,137,138,5,110,0,0,138,139,5,116,0,0,139,140,5,105,0,0,140,141,
        5,110,0,0,141,142,5,117,0,0,142,143,5,101,0,0,143,24,1,0,0,0,144,
        145,5,115,0,0,145,146,5,119,0,0,146,147,5,105,0,0,147,148,5,116,
        0,0,148,149,5,99,0,0,149,150,5,104,0,0,150,26,1,0,0,0,151,152,5,
        99,0,0,152,153,5,97,0,0,153,154,5,115,0,0,154,155,5,101,0,0,155,
        28,1,0,0,0,156,157,5,100,0,0,157,158,5,101,0,0,158,159,5,102,0,0,
        159,160,5,97,0,0,160,161,5,117,0,0,161,162,5,108,0,0,162,163,5,116,
        0,0,163,30,1,0,0,0,164,165,5,112,0,0,165,166,5,114,0,0,166,167,5,
        105,0,0,167,168,5,110,0,0,168,169,5,116,0,0,169,170,5,102,0,0,170,
        32,1,0,0,0,171,172,5,99,0,0,172,173,5,104,0,0,173,174,5,97,0,0,174,
        184,5,114,0,0,175,176,5,102,0,0,176,177,5,108,0,0,177,178,5,111,
        0,0,178,179,5,97,0,0,179,184,5,116,0,0,180,181,5,105,0,0,181,182,
        5,110,0,0,182,184,5,116,0,0,183,171,1,0,0,0,183,175,1,0,0,0,183,
        180,1,0,0,0,184,34,1,0,0,0,185,187,7,0,0,0,186,185,1,0,0,0,187,191,
        1,0,0,0,188,190,7,1,0,0,189,188,1,0,0,0,190,193,1,0,0,0,191,189,
        1,0,0,0,191,192,1,0,0,0,192,36,1,0,0,0,193,191,1,0,0,0,194,196,7,
        2,0,0,195,194,1,0,0,0,196,197,1,0,0,0,197,195,1,0,0,0,197,198,1,
        0,0,0,198,38,1,0,0,0,199,200,3,37,18,0,200,201,5,46,0,0,201,202,
        3,37,18,0,202,40,1,0,0,0,203,204,5,39,0,0,204,205,9,0,0,0,205,206,
        5,39,0,0,206,42,1,0,0,0,207,211,5,34,0,0,208,210,9,0,0,0,209,208,
        1,0,0,0,210,213,1,0,0,0,211,212,1,0,0,0,211,209,1,0,0,0,212,214,
        1,0,0,0,213,211,1,0,0,0,214,215,5,34,0,0,215,44,1,0,0,0,216,217,
        5,42,0,0,217,46,1,0,0,0,218,219,5,47,0,0,219,48,1,0,0,0,220,221,
        5,37,0,0,221,50,1,0,0,0,222,223,5,43,0,0,223,52,1,0,0,0,224,225,
        5,45,0,0,225,54,1,0,0,0,226,227,5,60,0,0,227,56,1,0,0,0,228,229,
        5,60,0,0,229,230,5,61,0,0,230,58,1,0,0,0,231,232,5,62,0,0,232,60,
        1,0,0,0,233,234,5,62,0,0,234,235,5,61,0,0,235,62,1,0,0,0,236,237,
        5,61,0,0,237,238,5,61,0,0,238,64,1,0,0,0,239,240,5,33,0,0,240,241,
        5,61,0,0,241,66,1,0,0,0,242,243,5,124,0,0,243,244,5,124,0,0,244,
        68,1,0,0,0,245,246,5,38,0,0,246,247,5,38,0,0,247,70,1,0,0,0,248,
        249,5,33,0,0,249,72,1,0,0,0,250,251,5,61,0,0,251,74,1,0,0,0,252,
        253,5,38,0,0,253,76,1,0,0,0,254,255,5,43,0,0,255,256,5,43,0,0,256,
        78,1,0,0,0,257,258,5,45,0,0,258,259,5,45,0,0,259,80,1,0,0,0,260,
        262,7,3,0,0,261,260,1,0,0,0,262,263,1,0,0,0,263,261,1,0,0,0,263,
        264,1,0,0,0,264,265,1,0,0,0,265,266,6,40,0,0,266,82,1,0,0,0,267,
        269,7,4,0,0,268,267,1,0,0,0,269,270,1,0,0,0,270,268,1,0,0,0,270,
        271,1,0,0,0,271,272,1,0,0,0,272,273,6,41,0,0,273,84,1,0,0,0,274,
        276,7,5,0,0,275,274,1,0,0,0,276,277,1,0,0,0,277,275,1,0,0,0,277,
        278,1,0,0,0,278,279,1,0,0,0,279,280,6,42,0,0,280,86,1,0,0,0,281,
        283,7,6,0,0,282,281,1,0,0,0,283,284,1,0,0,0,284,282,1,0,0,0,284,
        285,1,0,0,0,285,286,1,0,0,0,286,287,6,43,0,0,287,88,1,0,0,0,288,
        289,5,47,0,0,289,290,5,42,0,0,290,294,1,0,0,0,291,293,9,0,0,0,292,
        291,1,0,0,0,293,296,1,0,0,0,294,295,1,0,0,0,294,292,1,0,0,0,295,
        297,1,0,0,0,296,294,1,0,0,0,297,298,5,42,0,0,298,299,5,47,0,0,299,
        300,1,0,0,0,300,301,6,44,1,0,301,90,1,0,0,0,302,303,5,47,0,0,303,
        304,5,47,0,0,304,308,1,0,0,0,305,307,8,4,0,0,306,305,1,0,0,0,307,
        310,1,0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,311,1,0,0,0,310,
        308,1,0,0,0,311,312,6,45,1,0,312,92,1,0,0,0,13,0,183,186,189,191,
        197,211,263,270,277,284,294,308,2,6,0,0,0,1,0
    ]

class MathLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    CAST = 5
    CONST = 6
    IF = 7
    ELSE = 8
    FOR = 9
    WHILE = 10
    BREAK = 11
    CONTINUE = 12
    SWITCH = 13
    CASE = 14
    DEFAULT = 15
    PRINTF = 16
    TYPE = 17
    VAR_NAME = 18
    INT = 19
    FLOAT = 20
    CHAR = 21
    STRING = 22
    STR = 23
    DIV = 24
    MOD = 25
    SUM = 26
    DIF = 27
    LT = 28
    LEQ = 29
    GT = 30
    GEQ = 31
    EQ = 32
    NEQ = 33
    OR_OP = 34
    AND_OP = 35
    NOT_OP = 36
    ASSIGN = 37
    ADDR = 38
    INCR = 39
    DECR = 40
    SP = 41
    NEWLINE = 42
    WS = 43
    LN = 44
    COMMENT = 45
    LCOMMENT = 46

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "','", "'('", "')'", "'const'", "'if'", "'else'", "'for'", 
            "'while'", "'break'", "'continue'", "'switch'", "'case'", "'default'", 
            "'printf'", "'*'", "'/'", "'%'", "'+'", "'-'", "'<'", "'<='", 
            "'>'", "'>='", "'=='", "'!='", "'||'", "'&&'", "'!'", "'='", 
            "'&'", "'++'", "'--'" ]

    symbolicNames = [ "<INVALID>",
            "CAST", "CONST", "IF", "ELSE", "FOR", "WHILE", "BREAK", "CONTINUE", 
            "SWITCH", "CASE", "DEFAULT", "PRINTF", "TYPE", "VAR_NAME", "INT", 
            "FLOAT", "CHAR", "STRING", "STR", "DIV", "MOD", "SUM", "DIF", 
            "LT", "LEQ", "GT", "GEQ", "EQ", "NEQ", "OR_OP", "AND_OP", "NOT_OP", 
            "ASSIGN", "ADDR", "INCR", "DECR", "SP", "NEWLINE", "WS", "LN", 
            "COMMENT", "LCOMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "CAST", "CONST", "IF", 
                  "ELSE", "FOR", "WHILE", "BREAK", "CONTINUE", "SWITCH", 
                  "CASE", "DEFAULT", "PRINTF", "TYPE", "VAR_NAME", "INT", 
                  "FLOAT", "CHAR", "STRING", "STR", "DIV", "MOD", "SUM", 
                  "DIF", "LT", "LEQ", "GT", "GEQ", "EQ", "NEQ", "OR_OP", 
                  "AND_OP", "NOT_OP", "ASSIGN", "ADDR", "INCR", "DECR", 
                  "SP", "NEWLINE", "WS", "LN", "COMMENT", "LCOMMENT" ]

    grammarFileName = "Math.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


