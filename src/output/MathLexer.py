# Generated from Math.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,25,134,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,1,1,
        1,1,1,2,1,2,1,3,4,3,59,8,3,11,3,12,3,60,1,4,4,4,64,8,4,11,4,12,4,
        65,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,
        11,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,
        16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,21,4,
        21,108,8,21,11,21,12,21,109,1,21,1,21,1,22,4,22,115,8,22,11,22,12,
        22,116,1,22,1,22,1,23,4,23,122,8,23,11,23,12,23,123,1,23,1,23,1,
        24,4,24,129,8,24,11,24,12,24,130,1,24,1,24,0,0,25,1,1,3,2,5,3,7,
        4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
        16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,1,0,6,2,
        0,65,90,97,122,1,0,48,57,1,0,32,32,2,0,10,10,13,13,3,0,9,10,13,13,
        32,32,2,0,9,10,32,32,139,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,1,51,1,0,0,0,3,53,1,0,0,0,5,55,1,0,0,0,7,58,
        1,0,0,0,9,63,1,0,0,0,11,67,1,0,0,0,13,70,1,0,0,0,15,72,1,0,0,0,17,
        74,1,0,0,0,19,76,1,0,0,0,21,78,1,0,0,0,23,80,1,0,0,0,25,82,1,0,0,
        0,27,85,1,0,0,0,29,87,1,0,0,0,31,90,1,0,0,0,33,93,1,0,0,0,35,96,
        1,0,0,0,37,99,1,0,0,0,39,102,1,0,0,0,41,104,1,0,0,0,43,107,1,0,0,
        0,45,114,1,0,0,0,47,121,1,0,0,0,49,128,1,0,0,0,51,52,5,59,0,0,52,
        2,1,0,0,0,53,54,5,40,0,0,54,4,1,0,0,0,55,56,5,41,0,0,56,6,1,0,0,
        0,57,59,7,0,0,0,58,57,1,0,0,0,59,60,1,0,0,0,60,58,1,0,0,0,60,61,
        1,0,0,0,61,8,1,0,0,0,62,64,7,1,0,0,63,62,1,0,0,0,64,65,1,0,0,0,65,
        63,1,0,0,0,65,66,1,0,0,0,66,10,1,0,0,0,67,68,5,45,0,0,68,69,3,9,
        4,0,69,12,1,0,0,0,70,71,5,42,0,0,71,14,1,0,0,0,72,73,5,47,0,0,73,
        16,1,0,0,0,74,75,5,37,0,0,75,18,1,0,0,0,76,77,5,43,0,0,77,20,1,0,
        0,0,78,79,5,45,0,0,79,22,1,0,0,0,80,81,5,60,0,0,81,24,1,0,0,0,82,
        83,5,60,0,0,83,84,5,61,0,0,84,26,1,0,0,0,85,86,5,62,0,0,86,28,1,
        0,0,0,87,88,5,62,0,0,88,89,5,61,0,0,89,30,1,0,0,0,90,91,5,61,0,0,
        91,92,5,61,0,0,92,32,1,0,0,0,93,94,5,33,0,0,94,95,5,61,0,0,95,34,
        1,0,0,0,96,97,5,124,0,0,97,98,5,124,0,0,98,36,1,0,0,0,99,100,5,38,
        0,0,100,101,5,38,0,0,101,38,1,0,0,0,102,103,5,33,0,0,103,40,1,0,
        0,0,104,105,5,61,0,0,105,42,1,0,0,0,106,108,7,2,0,0,107,106,1,0,
        0,0,108,109,1,0,0,0,109,107,1,0,0,0,109,110,1,0,0,0,110,111,1,0,
        0,0,111,112,6,21,0,0,112,44,1,0,0,0,113,115,7,3,0,0,114,113,1,0,
        0,0,115,116,1,0,0,0,116,114,1,0,0,0,116,117,1,0,0,0,117,118,1,0,
        0,0,118,119,6,22,0,0,119,46,1,0,0,0,120,122,7,4,0,0,121,120,1,0,
        0,0,122,123,1,0,0,0,123,121,1,0,0,0,123,124,1,0,0,0,124,125,1,0,
        0,0,125,126,6,23,0,0,126,48,1,0,0,0,127,129,7,5,0,0,128,127,1,0,
        0,0,129,130,1,0,0,0,130,128,1,0,0,0,130,131,1,0,0,0,131,132,1,0,
        0,0,132,133,6,24,0,0,133,50,1,0,0,0,8,0,58,60,65,109,116,123,130,
        1,6,0,0
    ]

class MathLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    ID = 4
    INT = 5
    NEGINT = 6
    MUL = 7
    DIV = 8
    MOD = 9
    SUM = 10
    DIF = 11
    LT = 12
    LEQ = 13
    GT = 14
    GEQ = 15
    EQ = 16
    NEQ = 17
    OR_OP = 18
    AND_OP = 19
    NOT_OP = 20
    ASSIGN = 21
    SP = 22
    NEWLINE = 23
    WS = 24
    LN = 25

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'('", "')'", "'*'", "'/'", "'%'", "'+'", "'-'", "'<'", 
            "'<='", "'>'", "'>='", "'=='", "'!='", "'||'", "'&&'", "'!'", 
            "'='" ]

    symbolicNames = [ "<INVALID>",
            "ID", "INT", "NEGINT", "MUL", "DIV", "MOD", "SUM", "DIF", "LT", 
            "LEQ", "GT", "GEQ", "EQ", "NEQ", "OR_OP", "AND_OP", "NOT_OP", 
            "ASSIGN", "SP", "NEWLINE", "WS", "LN" ]

    ruleNames = [ "T__0", "T__1", "T__2", "ID", "INT", "NEGINT", "MUL", 
                  "DIV", "MOD", "SUM", "DIF", "LT", "LEQ", "GT", "GEQ", 
                  "EQ", "NEQ", "OR_OP", "AND_OP", "NOT_OP", "ASSIGN", "SP", 
                  "NEWLINE", "WS", "LN" ]

    grammarFileName = "Math.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


