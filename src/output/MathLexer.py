# Generated from Math.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,50,352,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,1,0,1,0,1,1,1,1,1,2,1,
        2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,
        7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,
        1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,3,18,196,8,18,1,19,3,19,199,8,19,1,
        19,5,19,202,8,19,10,19,12,19,205,9,19,1,20,1,20,5,20,209,8,20,10,
        20,12,20,212,9,20,1,20,3,20,215,8,20,1,21,4,21,218,8,21,11,21,12,
        21,219,1,21,1,21,4,21,224,8,21,11,21,12,21,225,1,22,1,22,1,22,1,
        22,1,22,1,22,1,22,1,22,3,22,236,8,22,1,23,1,23,5,23,240,8,23,10,
        23,12,23,243,9,23,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,
        27,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,
        33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,
        37,1,38,1,38,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,4,42,292,
        8,42,11,42,12,42,293,1,42,1,42,1,43,4,43,299,8,43,11,43,12,43,300,
        1,43,1,43,1,44,4,44,306,8,44,11,44,12,44,307,1,44,1,44,1,45,1,45,
        1,45,1,45,1,46,4,46,317,8,46,11,46,12,46,318,1,46,1,46,1,47,4,47,
        324,8,47,11,47,12,47,325,1,48,1,48,1,48,1,48,5,48,332,8,48,10,48,
        12,48,335,9,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,5,49,
        346,8,49,10,49,12,49,349,9,49,1,49,1,49,2,241,333,0,50,1,1,3,2,5,
        3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
        53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,
        75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,
        97,49,99,50,1,0,11,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,
        97,122,1,0,49,57,1,0,48,57,1,0,48,48,1,0,32,32,2,0,10,10,13,13,3,
        0,9,10,13,13,32,32,10,0,9,13,32,32,133,133,160,160,5760,5760,8192,
        8202,8232,8233,8239,8239,8287,8287,12288,12288,2,0,9,10,32,32,1,
        0,59,59,367,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
        1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
        1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
        1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
        1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,
        1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,
        1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,
        1,0,0,0,1,101,1,0,0,0,3,103,1,0,0,0,5,105,1,0,0,0,7,107,1,0,0,0,
        9,109,1,0,0,0,11,111,1,0,0,0,13,113,1,0,0,0,15,117,1,0,0,0,17,123,
        1,0,0,0,19,126,1,0,0,0,21,131,1,0,0,0,23,135,1,0,0,0,25,141,1,0,
        0,0,27,147,1,0,0,0,29,156,1,0,0,0,31,163,1,0,0,0,33,168,1,0,0,0,
        35,176,1,0,0,0,37,195,1,0,0,0,39,198,1,0,0,0,41,214,1,0,0,0,43,217,
        1,0,0,0,45,235,1,0,0,0,47,237,1,0,0,0,49,246,1,0,0,0,51,248,1,0,
        0,0,53,250,1,0,0,0,55,252,1,0,0,0,57,254,1,0,0,0,59,256,1,0,0,0,
        61,258,1,0,0,0,63,261,1,0,0,0,65,263,1,0,0,0,67,266,1,0,0,0,69,269,
        1,0,0,0,71,272,1,0,0,0,73,275,1,0,0,0,75,278,1,0,0,0,77,280,1,0,
        0,0,79,282,1,0,0,0,81,284,1,0,0,0,83,287,1,0,0,0,85,291,1,0,0,0,
        87,298,1,0,0,0,89,305,1,0,0,0,91,311,1,0,0,0,93,316,1,0,0,0,95,323,
        1,0,0,0,97,327,1,0,0,0,99,341,1,0,0,0,101,102,5,59,0,0,102,2,1,0,
        0,0,103,104,5,44,0,0,104,4,1,0,0,0,105,106,5,40,0,0,106,6,1,0,0,
        0,107,108,5,41,0,0,108,8,1,0,0,0,109,110,5,123,0,0,110,10,1,0,0,
        0,111,112,5,125,0,0,112,12,1,0,0,0,113,114,5,40,0,0,114,115,3,37,
        18,0,115,116,5,41,0,0,116,14,1,0,0,0,117,118,5,99,0,0,118,119,5,
        111,0,0,119,120,5,110,0,0,120,121,5,115,0,0,121,122,5,116,0,0,122,
        16,1,0,0,0,123,124,5,105,0,0,124,125,5,102,0,0,125,18,1,0,0,0,126,
        127,5,101,0,0,127,128,5,108,0,0,128,129,5,115,0,0,129,130,5,101,
        0,0,130,20,1,0,0,0,131,132,5,102,0,0,132,133,5,111,0,0,133,134,5,
        114,0,0,134,22,1,0,0,0,135,136,5,119,0,0,136,137,5,104,0,0,137,138,
        5,105,0,0,138,139,5,108,0,0,139,140,5,101,0,0,140,24,1,0,0,0,141,
        142,5,98,0,0,142,143,5,114,0,0,143,144,5,101,0,0,144,145,5,97,0,
        0,145,146,5,107,0,0,146,26,1,0,0,0,147,148,5,99,0,0,148,149,5,111,
        0,0,149,150,5,110,0,0,150,151,5,116,0,0,151,152,5,105,0,0,152,153,
        5,110,0,0,153,154,5,117,0,0,154,155,5,101,0,0,155,28,1,0,0,0,156,
        157,5,115,0,0,157,158,5,119,0,0,158,159,5,105,0,0,159,160,5,116,
        0,0,160,161,5,99,0,0,161,162,5,104,0,0,162,30,1,0,0,0,163,164,5,
        99,0,0,164,165,5,97,0,0,165,166,5,115,0,0,166,167,5,101,0,0,167,
        32,1,0,0,0,168,169,5,100,0,0,169,170,5,101,0,0,170,171,5,102,0,0,
        171,172,5,97,0,0,172,173,5,117,0,0,173,174,5,108,0,0,174,175,5,116,
        0,0,175,34,1,0,0,0,176,177,5,112,0,0,177,178,5,114,0,0,178,179,5,
        105,0,0,179,180,5,110,0,0,180,181,5,116,0,0,181,182,5,102,0,0,182,
        36,1,0,0,0,183,184,5,99,0,0,184,185,5,104,0,0,185,186,5,97,0,0,186,
        196,5,114,0,0,187,188,5,102,0,0,188,189,5,108,0,0,189,190,5,111,
        0,0,190,191,5,97,0,0,191,196,5,116,0,0,192,193,5,105,0,0,193,194,
        5,110,0,0,194,196,5,116,0,0,195,183,1,0,0,0,195,187,1,0,0,0,195,
        192,1,0,0,0,196,38,1,0,0,0,197,199,7,0,0,0,198,197,1,0,0,0,199,203,
        1,0,0,0,200,202,7,1,0,0,201,200,1,0,0,0,202,205,1,0,0,0,203,201,
        1,0,0,0,203,204,1,0,0,0,204,40,1,0,0,0,205,203,1,0,0,0,206,210,7,
        2,0,0,207,209,7,3,0,0,208,207,1,0,0,0,209,212,1,0,0,0,210,208,1,
        0,0,0,210,211,1,0,0,0,211,215,1,0,0,0,212,210,1,0,0,0,213,215,7,
        4,0,0,214,206,1,0,0,0,214,213,1,0,0,0,215,42,1,0,0,0,216,218,7,3,
        0,0,217,216,1,0,0,0,218,219,1,0,0,0,219,217,1,0,0,0,219,220,1,0,
        0,0,220,221,1,0,0,0,221,223,5,46,0,0,222,224,7,3,0,0,223,222,1,0,
        0,0,224,225,1,0,0,0,225,223,1,0,0,0,225,226,1,0,0,0,226,44,1,0,0,
        0,227,228,5,39,0,0,228,229,9,0,0,0,229,236,5,39,0,0,230,231,5,39,
        0,0,231,232,5,92,0,0,232,233,1,0,0,0,233,234,9,0,0,0,234,236,5,39,
        0,0,235,227,1,0,0,0,235,230,1,0,0,0,236,46,1,0,0,0,237,241,5,34,
        0,0,238,240,9,0,0,0,239,238,1,0,0,0,240,243,1,0,0,0,241,242,1,0,
        0,0,241,239,1,0,0,0,242,244,1,0,0,0,243,241,1,0,0,0,244,245,5,34,
        0,0,245,48,1,0,0,0,246,247,5,42,0,0,247,50,1,0,0,0,248,249,5,47,
        0,0,249,52,1,0,0,0,250,251,5,37,0,0,251,54,1,0,0,0,252,253,5,43,
        0,0,253,56,1,0,0,0,254,255,5,45,0,0,255,58,1,0,0,0,256,257,5,60,
        0,0,257,60,1,0,0,0,258,259,5,60,0,0,259,260,5,61,0,0,260,62,1,0,
        0,0,261,262,5,62,0,0,262,64,1,0,0,0,263,264,5,62,0,0,264,265,5,61,
        0,0,265,66,1,0,0,0,266,267,5,61,0,0,267,268,5,61,0,0,268,68,1,0,
        0,0,269,270,5,33,0,0,270,271,5,61,0,0,271,70,1,0,0,0,272,273,5,124,
        0,0,273,274,5,124,0,0,274,72,1,0,0,0,275,276,5,38,0,0,276,277,5,
        38,0,0,277,74,1,0,0,0,278,279,5,33,0,0,279,76,1,0,0,0,280,281,5,
        61,0,0,281,78,1,0,0,0,282,283,5,38,0,0,283,80,1,0,0,0,284,285,5,
        43,0,0,285,286,5,43,0,0,286,82,1,0,0,0,287,288,5,45,0,0,288,289,
        5,45,0,0,289,84,1,0,0,0,290,292,7,5,0,0,291,290,1,0,0,0,292,293,
        1,0,0,0,293,291,1,0,0,0,293,294,1,0,0,0,294,295,1,0,0,0,295,296,
        6,42,0,0,296,86,1,0,0,0,297,299,7,6,0,0,298,297,1,0,0,0,299,300,
        1,0,0,0,300,298,1,0,0,0,300,301,1,0,0,0,301,302,1,0,0,0,302,303,
        6,43,0,0,303,88,1,0,0,0,304,306,7,7,0,0,305,304,1,0,0,0,306,307,
        1,0,0,0,307,305,1,0,0,0,307,308,1,0,0,0,308,309,1,0,0,0,309,310,
        6,44,0,0,310,90,1,0,0,0,311,312,7,8,0,0,312,313,1,0,0,0,313,314,
        6,45,0,0,314,92,1,0,0,0,315,317,7,9,0,0,316,315,1,0,0,0,317,318,
        1,0,0,0,318,316,1,0,0,0,318,319,1,0,0,0,319,320,1,0,0,0,320,321,
        6,46,0,0,321,94,1,0,0,0,322,324,7,10,0,0,323,322,1,0,0,0,324,325,
        1,0,0,0,325,323,1,0,0,0,325,326,1,0,0,0,326,96,1,0,0,0,327,328,5,
        47,0,0,328,329,5,42,0,0,329,333,1,0,0,0,330,332,9,0,0,0,331,330,
        1,0,0,0,332,335,1,0,0,0,333,334,1,0,0,0,333,331,1,0,0,0,334,336,
        1,0,0,0,335,333,1,0,0,0,336,337,5,42,0,0,337,338,5,47,0,0,338,339,
        1,0,0,0,339,340,6,48,1,0,340,98,1,0,0,0,341,342,5,47,0,0,342,343,
        5,47,0,0,343,347,1,0,0,0,344,346,8,6,0,0,345,344,1,0,0,0,346,349,
        1,0,0,0,347,345,1,0,0,0,347,348,1,0,0,0,348,350,1,0,0,0,349,347,
        1,0,0,0,350,351,6,49,1,0,351,100,1,0,0,0,18,0,195,198,201,203,210,
        214,219,225,235,241,293,300,307,318,325,333,347,2,6,0,0,0,1,0
    ]

class MathLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    CAST = 7
    CONST = 8
    IF = 9
    ELSE = 10
    FOR = 11
    WHILE = 12
    BREAK = 13
    CONTINUE = 14
    SWITCH = 15
    CASE = 16
    DEFAULT = 17
    PRINTF = 18
    TYPE = 19
    VAR_NAME = 20
    INT = 21
    FLOAT = 22
    CHAR = 23
    STRING = 24
    STR = 25
    DIV = 26
    MOD = 27
    SUM = 28
    DIF = 29
    LT = 30
    LEQ = 31
    GT = 32
    GEQ = 33
    EQ = 34
    NEQ = 35
    OR_OP = 36
    AND_OP = 37
    NOT_OP = 38
    ASSIGN = 39
    ADDR = 40
    INCR = 41
    DECR = 42
    SP = 43
    NEWLINE = 44
    WS = 45
    UNICODE_WS = 46
    LN = 47
    DELIM = 48
    COMMENT = 49
    LCOMMENT = 50

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "','", "'('", "')'", "'{'", "'}'", "'const'", "'if'", 
            "'else'", "'for'", "'while'", "'break'", "'continue'", "'switch'", 
            "'case'", "'default'", "'printf'", "'*'", "'/'", "'%'", "'+'", 
            "'-'", "'<'", "'<='", "'>'", "'>='", "'=='", "'!='", "'||'", 
            "'&&'", "'!'", "'='", "'&'", "'++'", "'--'" ]

    symbolicNames = [ "<INVALID>",
            "CAST", "CONST", "IF", "ELSE", "FOR", "WHILE", "BREAK", "CONTINUE", 
            "SWITCH", "CASE", "DEFAULT", "PRINTF", "TYPE", "VAR_NAME", "INT", 
            "FLOAT", "CHAR", "STRING", "STR", "DIV", "MOD", "SUM", "DIF", 
            "LT", "LEQ", "GT", "GEQ", "EQ", "NEQ", "OR_OP", "AND_OP", "NOT_OP", 
            "ASSIGN", "ADDR", "INCR", "DECR", "SP", "NEWLINE", "WS", "UNICODE_WS", 
            "LN", "DELIM", "COMMENT", "LCOMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "CAST", 
                  "CONST", "IF", "ELSE", "FOR", "WHILE", "BREAK", "CONTINUE", 
                  "SWITCH", "CASE", "DEFAULT", "PRINTF", "TYPE", "VAR_NAME", 
                  "INT", "FLOAT", "CHAR", "STRING", "STR", "DIV", "MOD", 
                  "SUM", "DIF", "LT", "LEQ", "GT", "GEQ", "EQ", "NEQ", "OR_OP", 
                  "AND_OP", "NOT_OP", "ASSIGN", "ADDR", "INCR", "DECR", 
                  "SP", "NEWLINE", "WS", "UNICODE_WS", "LN", "DELIM", "COMMENT", 
                  "LCOMMENT" ]

    grammarFileName = "Math.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


