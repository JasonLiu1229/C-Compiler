# Generated from Math.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,49,346,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,
        1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,
        1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
        1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,
        1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,3,18,194,8,18,1,19,3,19,197,8,19,1,19,5,19,200,
        8,19,10,19,12,19,203,9,19,1,20,1,20,5,20,207,8,20,10,20,12,20,210,
        9,20,1,20,3,20,213,8,20,1,21,4,21,216,8,21,11,21,12,21,217,1,21,
        1,21,4,21,222,8,21,11,21,12,21,223,1,22,1,22,1,22,1,22,1,22,1,22,
        1,22,1,22,3,22,234,8,22,1,23,1,23,5,23,238,8,23,10,23,12,23,241,
        9,23,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,
        1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,
        1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,38,1,38,
        1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,4,42,290,8,42,11,42,
        12,42,291,1,42,1,42,1,43,4,43,297,8,43,11,43,12,43,298,1,43,1,43,
        1,44,4,44,304,8,44,11,44,12,44,305,1,44,1,44,1,45,4,45,311,8,45,
        11,45,12,45,312,1,45,1,45,1,46,4,46,318,8,46,11,46,12,46,319,1,47,
        1,47,1,47,1,47,5,47,326,8,47,10,47,12,47,329,9,47,1,47,1,47,1,47,
        1,47,1,47,1,48,1,48,1,48,1,48,5,48,340,8,48,10,48,12,48,343,9,48,
        1,48,1,48,2,239,327,0,49,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
        19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
        41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
        63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,
        85,43,87,44,89,45,91,46,93,47,95,48,97,49,1,0,9,3,0,65,90,95,95,
        97,122,4,0,48,57,65,90,95,95,97,122,1,0,49,57,1,0,48,57,1,0,48,48,
        1,0,32,32,2,0,10,10,13,13,3,0,9,10,13,13,32,32,2,0,9,10,32,32,361,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
        1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
        1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,
        1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,
        1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,1,99,1,0,0,0,3,101,
        1,0,0,0,5,103,1,0,0,0,7,105,1,0,0,0,9,107,1,0,0,0,11,109,1,0,0,0,
        13,111,1,0,0,0,15,115,1,0,0,0,17,121,1,0,0,0,19,124,1,0,0,0,21,129,
        1,0,0,0,23,133,1,0,0,0,25,139,1,0,0,0,27,145,1,0,0,0,29,154,1,0,
        0,0,31,161,1,0,0,0,33,166,1,0,0,0,35,174,1,0,0,0,37,193,1,0,0,0,
        39,196,1,0,0,0,41,212,1,0,0,0,43,215,1,0,0,0,45,233,1,0,0,0,47,235,
        1,0,0,0,49,244,1,0,0,0,51,246,1,0,0,0,53,248,1,0,0,0,55,250,1,0,
        0,0,57,252,1,0,0,0,59,254,1,0,0,0,61,256,1,0,0,0,63,259,1,0,0,0,
        65,261,1,0,0,0,67,264,1,0,0,0,69,267,1,0,0,0,71,270,1,0,0,0,73,273,
        1,0,0,0,75,276,1,0,0,0,77,278,1,0,0,0,79,280,1,0,0,0,81,282,1,0,
        0,0,83,285,1,0,0,0,85,289,1,0,0,0,87,296,1,0,0,0,89,303,1,0,0,0,
        91,310,1,0,0,0,93,317,1,0,0,0,95,321,1,0,0,0,97,335,1,0,0,0,99,100,
        5,59,0,0,100,2,1,0,0,0,101,102,5,44,0,0,102,4,1,0,0,0,103,104,5,
        40,0,0,104,6,1,0,0,0,105,106,5,41,0,0,106,8,1,0,0,0,107,108,5,123,
        0,0,108,10,1,0,0,0,109,110,5,125,0,0,110,12,1,0,0,0,111,112,5,40,
        0,0,112,113,3,37,18,0,113,114,5,41,0,0,114,14,1,0,0,0,115,116,5,
        99,0,0,116,117,5,111,0,0,117,118,5,110,0,0,118,119,5,115,0,0,119,
        120,5,116,0,0,120,16,1,0,0,0,121,122,5,105,0,0,122,123,5,102,0,0,
        123,18,1,0,0,0,124,125,5,101,0,0,125,126,5,108,0,0,126,127,5,115,
        0,0,127,128,5,101,0,0,128,20,1,0,0,0,129,130,5,102,0,0,130,131,5,
        111,0,0,131,132,5,114,0,0,132,22,1,0,0,0,133,134,5,119,0,0,134,135,
        5,104,0,0,135,136,5,105,0,0,136,137,5,108,0,0,137,138,5,101,0,0,
        138,24,1,0,0,0,139,140,5,98,0,0,140,141,5,114,0,0,141,142,5,101,
        0,0,142,143,5,97,0,0,143,144,5,107,0,0,144,26,1,0,0,0,145,146,5,
        99,0,0,146,147,5,111,0,0,147,148,5,110,0,0,148,149,5,116,0,0,149,
        150,5,105,0,0,150,151,5,110,0,0,151,152,5,117,0,0,152,153,5,101,
        0,0,153,28,1,0,0,0,154,155,5,115,0,0,155,156,5,119,0,0,156,157,5,
        105,0,0,157,158,5,116,0,0,158,159,5,99,0,0,159,160,5,104,0,0,160,
        30,1,0,0,0,161,162,5,99,0,0,162,163,5,97,0,0,163,164,5,115,0,0,164,
        165,5,101,0,0,165,32,1,0,0,0,166,167,5,100,0,0,167,168,5,101,0,0,
        168,169,5,102,0,0,169,170,5,97,0,0,170,171,5,117,0,0,171,172,5,108,
        0,0,172,173,5,116,0,0,173,34,1,0,0,0,174,175,5,112,0,0,175,176,5,
        114,0,0,176,177,5,105,0,0,177,178,5,110,0,0,178,179,5,116,0,0,179,
        180,5,102,0,0,180,36,1,0,0,0,181,182,5,99,0,0,182,183,5,104,0,0,
        183,184,5,97,0,0,184,194,5,114,0,0,185,186,5,102,0,0,186,187,5,108,
        0,0,187,188,5,111,0,0,188,189,5,97,0,0,189,194,5,116,0,0,190,191,
        5,105,0,0,191,192,5,110,0,0,192,194,5,116,0,0,193,181,1,0,0,0,193,
        185,1,0,0,0,193,190,1,0,0,0,194,38,1,0,0,0,195,197,7,0,0,0,196,195,
        1,0,0,0,197,201,1,0,0,0,198,200,7,1,0,0,199,198,1,0,0,0,200,203,
        1,0,0,0,201,199,1,0,0,0,201,202,1,0,0,0,202,40,1,0,0,0,203,201,1,
        0,0,0,204,208,7,2,0,0,205,207,7,3,0,0,206,205,1,0,0,0,207,210,1,
        0,0,0,208,206,1,0,0,0,208,209,1,0,0,0,209,213,1,0,0,0,210,208,1,
        0,0,0,211,213,7,4,0,0,212,204,1,0,0,0,212,211,1,0,0,0,213,42,1,0,
        0,0,214,216,7,3,0,0,215,214,1,0,0,0,216,217,1,0,0,0,217,215,1,0,
        0,0,217,218,1,0,0,0,218,219,1,0,0,0,219,221,5,46,0,0,220,222,7,3,
        0,0,221,220,1,0,0,0,222,223,1,0,0,0,223,221,1,0,0,0,223,224,1,0,
        0,0,224,44,1,0,0,0,225,226,5,39,0,0,226,227,9,0,0,0,227,234,5,39,
        0,0,228,229,5,39,0,0,229,230,5,92,0,0,230,231,1,0,0,0,231,232,9,
        0,0,0,232,234,5,39,0,0,233,225,1,0,0,0,233,228,1,0,0,0,234,46,1,
        0,0,0,235,239,5,34,0,0,236,238,9,0,0,0,237,236,1,0,0,0,238,241,1,
        0,0,0,239,240,1,0,0,0,239,237,1,0,0,0,240,242,1,0,0,0,241,239,1,
        0,0,0,242,243,5,34,0,0,243,48,1,0,0,0,244,245,5,42,0,0,245,50,1,
        0,0,0,246,247,5,47,0,0,247,52,1,0,0,0,248,249,5,37,0,0,249,54,1,
        0,0,0,250,251,5,43,0,0,251,56,1,0,0,0,252,253,5,45,0,0,253,58,1,
        0,0,0,254,255,5,60,0,0,255,60,1,0,0,0,256,257,5,60,0,0,257,258,5,
        61,0,0,258,62,1,0,0,0,259,260,5,62,0,0,260,64,1,0,0,0,261,262,5,
        62,0,0,262,263,5,61,0,0,263,66,1,0,0,0,264,265,5,61,0,0,265,266,
        5,61,0,0,266,68,1,0,0,0,267,268,5,33,0,0,268,269,5,61,0,0,269,70,
        1,0,0,0,270,271,5,124,0,0,271,272,5,124,0,0,272,72,1,0,0,0,273,274,
        5,38,0,0,274,275,5,38,0,0,275,74,1,0,0,0,276,277,5,33,0,0,277,76,
        1,0,0,0,278,279,5,61,0,0,279,78,1,0,0,0,280,281,5,38,0,0,281,80,
        1,0,0,0,282,283,5,43,0,0,283,284,5,43,0,0,284,82,1,0,0,0,285,286,
        5,45,0,0,286,287,5,45,0,0,287,84,1,0,0,0,288,290,7,5,0,0,289,288,
        1,0,0,0,290,291,1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,292,293,
        1,0,0,0,293,294,6,42,0,0,294,86,1,0,0,0,295,297,7,6,0,0,296,295,
        1,0,0,0,297,298,1,0,0,0,298,296,1,0,0,0,298,299,1,0,0,0,299,300,
        1,0,0,0,300,301,6,43,0,0,301,88,1,0,0,0,302,304,7,7,0,0,303,302,
        1,0,0,0,304,305,1,0,0,0,305,303,1,0,0,0,305,306,1,0,0,0,306,307,
        1,0,0,0,307,308,6,44,0,0,308,90,1,0,0,0,309,311,7,8,0,0,310,309,
        1,0,0,0,311,312,1,0,0,0,312,310,1,0,0,0,312,313,1,0,0,0,313,314,
        1,0,0,0,314,315,6,45,0,0,315,92,1,0,0,0,316,318,5,59,0,0,317,316,
        1,0,0,0,318,319,1,0,0,0,319,317,1,0,0,0,319,320,1,0,0,0,320,94,1,
        0,0,0,321,322,5,47,0,0,322,323,5,42,0,0,323,327,1,0,0,0,324,326,
        9,0,0,0,325,324,1,0,0,0,326,329,1,0,0,0,327,328,1,0,0,0,327,325,
        1,0,0,0,328,330,1,0,0,0,329,327,1,0,0,0,330,331,5,42,0,0,331,332,
        5,47,0,0,332,333,1,0,0,0,333,334,6,47,1,0,334,96,1,0,0,0,335,336,
        5,47,0,0,336,337,5,47,0,0,337,341,1,0,0,0,338,340,8,6,0,0,339,338,
        1,0,0,0,340,343,1,0,0,0,341,339,1,0,0,0,341,342,1,0,0,0,342,344,
        1,0,0,0,343,341,1,0,0,0,344,345,6,48,1,0,345,98,1,0,0,0,18,0,193,
        196,199,201,208,212,217,223,233,239,291,298,305,312,319,327,341,
        2,6,0,0,0,1,0
    ]

class MathLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    CAST = 7
    CONST = 8
    IF = 9
    ELSE = 10
    FOR = 11
    WHILE = 12
    BREAK = 13
    CONTINUE = 14
    SWITCH = 15
    CASE = 16
    DEFAULT = 17
    PRINTF = 18
    TYPE = 19
    VAR_NAME = 20
    INT = 21
    FLOAT = 22
    CHAR = 23
    STRING = 24
    STR = 25
    DIV = 26
    MOD = 27
    SUM = 28
    DIF = 29
    LT = 30
    LEQ = 31
    GT = 32
    GEQ = 33
    EQ = 34
    NEQ = 35
    OR_OP = 36
    AND_OP = 37
    NOT_OP = 38
    ASSIGN = 39
    ADDR = 40
    INCR = 41
    DECR = 42
    SP = 43
    NEWLINE = 44
    WS = 45
    LN = 46
    DELIM = 47
    COMMENT = 48
    LCOMMENT = 49

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "','", "'('", "')'", "'{'", "'}'", "'const'", "'if'", 
            "'else'", "'for'", "'while'", "'break'", "'continue'", "'switch'", 
            "'case'", "'default'", "'printf'", "'*'", "'/'", "'%'", "'+'", 
            "'-'", "'<'", "'<='", "'>'", "'>='", "'=='", "'!='", "'||'", 
            "'&&'", "'!'", "'='", "'&'", "'++'", "'--'" ]

    symbolicNames = [ "<INVALID>",
            "CAST", "CONST", "IF", "ELSE", "FOR", "WHILE", "BREAK", "CONTINUE", 
            "SWITCH", "CASE", "DEFAULT", "PRINTF", "TYPE", "VAR_NAME", "INT", 
            "FLOAT", "CHAR", "STRING", "STR", "DIV", "MOD", "SUM", "DIF", 
            "LT", "LEQ", "GT", "GEQ", "EQ", "NEQ", "OR_OP", "AND_OP", "NOT_OP", 
            "ASSIGN", "ADDR", "INCR", "DECR", "SP", "NEWLINE", "WS", "LN", 
            "DELIM", "COMMENT", "LCOMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "CAST", 
                  "CONST", "IF", "ELSE", "FOR", "WHILE", "BREAK", "CONTINUE", 
                  "SWITCH", "CASE", "DEFAULT", "PRINTF", "TYPE", "VAR_NAME", 
                  "INT", "FLOAT", "CHAR", "STRING", "STR", "DIV", "MOD", 
                  "SUM", "DIF", "LT", "LEQ", "GT", "GEQ", "EQ", "NEQ", "OR_OP", 
                  "AND_OP", "NOT_OP", "ASSIGN", "ADDR", "INCR", "DECR", 
                  "SP", "NEWLINE", "WS", "LN", "DELIM", "COMMENT", "LCOMMENT" ]

    grammarFileName = "Math.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


