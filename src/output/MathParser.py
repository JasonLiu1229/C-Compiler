# Generated from Math.g4 by ANTLR 4.11.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,59,904,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,1,0,5,0,90,8,0,10,0,12,0,
        93,9,0,1,0,1,0,1,0,5,0,98,8,0,10,0,12,0,101,9,0,1,0,3,0,104,8,0,
        1,0,1,0,4,0,108,8,0,11,0,12,0,109,1,0,3,0,113,8,0,5,0,115,8,0,10,
        0,12,0,118,9,0,1,0,1,0,1,1,1,1,4,1,124,8,1,11,1,12,1,125,1,1,3,1,
        129,8,1,1,1,1,1,4,1,133,8,1,11,1,12,1,134,1,1,3,1,138,8,1,1,1,1,
        1,4,1,142,8,1,11,1,12,1,143,1,1,3,1,147,8,1,1,1,1,1,4,1,151,8,1,
        11,1,12,1,152,1,1,3,1,156,8,1,1,1,3,1,159,8,1,1,2,3,2,162,8,2,1,
        2,1,2,1,2,1,2,5,2,168,8,2,10,2,12,2,171,9,2,1,2,1,2,1,3,1,3,1,3,
        1,3,1,3,3,3,180,8,3,1,3,1,3,1,3,1,3,1,3,3,3,187,8,3,1,3,1,3,1,3,
        1,3,5,3,193,8,3,10,3,12,3,196,9,3,1,3,3,3,199,8,3,1,3,3,3,202,8,
        3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,211,8,4,1,5,1,5,1,5,1,5,3,5,217,
        8,5,1,5,1,5,3,5,221,8,5,1,5,1,5,1,5,5,5,226,8,5,10,5,12,5,229,9,
        5,1,5,3,5,232,8,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,244,
        8,6,1,7,1,7,1,7,5,7,249,8,7,10,7,12,7,252,9,7,1,8,3,8,255,8,8,1,
        8,1,8,3,8,259,8,8,1,8,5,8,262,8,8,10,8,12,8,265,9,8,1,8,1,8,1,8,
        3,8,270,8,8,1,8,3,8,273,8,8,1,8,1,8,5,8,277,8,8,10,8,12,8,280,9,
        8,1,8,3,8,283,8,8,1,8,1,8,1,8,3,8,288,8,8,3,8,290,8,8,1,9,3,9,293,
        8,9,1,9,1,9,3,9,297,8,9,1,9,5,9,300,8,9,10,9,12,9,303,9,9,1,9,1,
        9,1,9,3,9,308,8,9,1,9,1,9,1,9,1,10,3,10,314,8,10,1,10,1,10,3,10,
        318,8,10,1,10,5,10,321,8,10,10,10,12,10,324,9,10,1,10,1,10,1,10,
        3,10,329,8,10,1,10,1,10,1,11,1,11,1,11,5,11,336,8,11,10,11,12,11,
        339,9,11,1,12,1,12,1,12,1,12,1,12,3,12,346,8,12,1,13,1,13,1,13,3,
        13,351,8,13,1,13,1,13,1,14,1,14,1,14,4,14,358,8,14,11,14,12,14,359,
        1,14,3,14,363,8,14,1,14,1,14,4,14,367,8,14,11,14,12,14,368,1,14,
        3,14,372,8,14,1,14,1,14,1,14,5,14,377,8,14,10,14,12,14,380,9,14,
        1,14,3,14,383,8,14,1,14,1,14,5,14,387,8,14,10,14,12,14,390,9,14,
        1,14,3,14,393,8,14,1,14,1,14,5,14,397,8,14,10,14,12,14,400,9,14,
        1,14,3,14,403,8,14,1,14,1,14,4,14,407,8,14,11,14,12,14,408,1,14,
        3,14,412,8,14,1,14,1,14,1,14,4,14,417,8,14,11,14,12,14,418,1,14,
        3,14,422,8,14,1,14,1,14,5,14,426,8,14,10,14,12,14,429,9,14,1,14,
        3,14,432,8,14,5,14,434,8,14,10,14,12,14,437,9,14,1,14,1,14,1,15,
        1,15,3,15,443,8,15,1,15,1,15,1,15,5,15,448,8,15,10,15,12,15,451,
        9,15,1,16,1,16,1,16,4,16,456,8,16,11,16,12,16,457,1,16,3,16,461,
        8,16,1,16,1,16,4,16,465,8,16,11,16,12,16,466,1,16,3,16,470,8,16,
        1,16,1,16,1,16,5,16,475,8,16,10,16,12,16,478,9,16,1,16,3,16,481,
        8,16,1,16,1,16,5,16,485,8,16,10,16,12,16,488,9,16,1,16,3,16,491,
        8,16,1,16,1,16,5,16,495,8,16,10,16,12,16,498,9,16,1,16,3,16,501,
        8,16,1,16,1,16,4,16,505,8,16,11,16,12,16,506,1,16,3,16,510,8,16,
        1,16,1,16,1,16,1,16,1,16,4,16,517,8,16,11,16,12,16,518,1,16,3,16,
        522,8,16,1,16,1,16,5,16,526,8,16,10,16,12,16,529,9,16,1,16,3,16,
        532,8,16,5,16,534,8,16,10,16,12,16,537,9,16,1,16,1,16,1,17,1,17,
        1,17,1,17,1,17,1,17,5,17,547,8,17,10,17,12,17,550,9,17,1,17,3,17,
        553,8,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,
        1,20,1,20,4,20,568,8,20,11,20,12,20,569,1,20,3,20,573,8,20,1,20,
        1,20,4,20,577,8,20,11,20,12,20,578,1,20,3,20,582,8,20,1,20,1,20,
        1,20,5,20,587,8,20,10,20,12,20,590,9,20,1,20,3,20,593,8,20,1,20,
        1,20,5,20,597,8,20,10,20,12,20,600,9,20,1,20,3,20,603,8,20,1,20,
        1,20,5,20,607,8,20,10,20,12,20,610,9,20,1,20,3,20,613,8,20,1,20,
        1,20,4,20,617,8,20,11,20,12,20,618,1,20,3,20,622,8,20,1,20,1,20,
        1,20,1,20,1,20,4,20,629,8,20,11,20,12,20,630,1,20,3,20,634,8,20,
        1,20,1,20,5,20,638,8,20,10,20,12,20,641,9,20,1,20,3,20,644,8,20,
        5,20,646,8,20,10,20,12,20,649,9,20,1,21,1,21,1,21,5,21,654,8,21,
        10,21,12,21,657,9,21,1,22,1,22,1,22,5,22,662,8,22,10,22,12,22,665,
        9,22,1,23,3,23,668,8,23,1,23,1,23,5,23,672,8,23,10,23,12,23,675,
        9,23,1,23,1,23,1,23,3,23,680,8,23,1,23,1,23,1,23,1,23,1,23,1,23,
        5,23,688,8,23,10,23,12,23,691,9,23,1,23,1,23,1,23,1,23,3,23,697,
        8,23,1,23,1,23,5,23,701,8,23,10,23,12,23,704,9,23,1,23,1,23,1,23,
        1,23,3,23,710,8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,
        1,25,1,25,1,25,3,25,724,8,25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,
        1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,
        1,29,1,29,1,29,1,29,1,29,3,29,751,8,29,1,30,1,30,3,30,755,8,30,1,
        31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,767,8,31,1,
        32,1,32,1,32,1,32,1,32,3,32,774,8,32,1,33,1,33,1,33,1,33,1,33,1,
        33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,788,8,33,1,34,1,34,1,34,1,
        34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
        34,1,34,1,34,1,34,3,34,810,8,34,1,35,1,35,1,35,1,35,3,35,816,8,35,
        1,36,5,36,819,8,36,10,36,12,36,822,9,36,1,36,1,36,1,37,1,37,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,840,
        8,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        5,39,854,8,39,10,39,12,39,857,9,39,1,40,1,40,1,40,1,40,3,40,863,
        8,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,5,40,873,8,40,10,40,
        12,40,876,9,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,885,8,41,
        1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
        3,42,900,8,42,1,43,1,43,1,43,1,337,2,78,80,44,0,2,4,6,8,10,12,14,
        16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,
        60,62,64,66,68,70,72,74,76,78,80,82,84,86,0,8,2,0,1,1,57,57,1,0,
        45,46,3,0,40,40,42,42,44,44,3,0,39,39,41,41,43,43,1,0,34,36,1,0,
        39,44,1,0,50,51,1,0,29,31,1054,0,91,1,0,0,0,2,158,1,0,0,0,4,161,
        1,0,0,0,6,201,1,0,0,0,8,210,1,0,0,0,10,212,1,0,0,0,12,243,1,0,0,
        0,14,245,1,0,0,0,16,289,1,0,0,0,18,292,1,0,0,0,20,313,1,0,0,0,22,
        332,1,0,0,0,24,345,1,0,0,0,26,347,1,0,0,0,28,354,1,0,0,0,30,440,
        1,0,0,0,32,452,1,0,0,0,34,540,1,0,0,0,36,556,1,0,0,0,38,561,1,0,
        0,0,40,647,1,0,0,0,42,650,1,0,0,0,44,658,1,0,0,0,46,709,1,0,0,0,
        48,711,1,0,0,0,50,717,1,0,0,0,52,725,1,0,0,0,54,728,1,0,0,0,56,734,
        1,0,0,0,58,750,1,0,0,0,60,754,1,0,0,0,62,766,1,0,0,0,64,773,1,0,
        0,0,66,787,1,0,0,0,68,809,1,0,0,0,70,815,1,0,0,0,72,820,1,0,0,0,
        74,825,1,0,0,0,76,839,1,0,0,0,78,841,1,0,0,0,80,862,1,0,0,0,82,884,
        1,0,0,0,84,899,1,0,0,0,86,901,1,0,0,0,88,90,3,48,24,0,89,88,1,0,
        0,0,90,93,1,0,0,0,91,89,1,0,0,0,91,92,1,0,0,0,92,116,1,0,0,0,93,
        91,1,0,0,0,94,115,3,2,1,0,95,103,3,18,9,0,96,98,5,1,0,0,97,96,1,
        0,0,0,98,101,1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,0,100,104,1,0,0,
        0,101,99,1,0,0,0,102,104,5,57,0,0,103,99,1,0,0,0,103,102,1,0,0,0,
        104,115,1,0,0,0,105,112,3,20,10,0,106,108,5,1,0,0,107,106,1,0,0,
        0,108,109,1,0,0,0,109,107,1,0,0,0,109,110,1,0,0,0,110,113,1,0,0,
        0,111,113,5,57,0,0,112,107,1,0,0,0,112,111,1,0,0,0,113,115,1,0,0,
        0,114,94,1,0,0,0,114,95,1,0,0,0,114,105,1,0,0,0,115,118,1,0,0,0,
        116,114,1,0,0,0,116,117,1,0,0,0,117,119,1,0,0,0,118,116,1,0,0,0,
        119,120,5,0,0,1,120,1,1,0,0,0,121,128,3,4,2,0,122,124,5,1,0,0,123,
        122,1,0,0,0,124,125,1,0,0,0,125,123,1,0,0,0,125,126,1,0,0,0,126,
        129,1,0,0,0,127,129,5,57,0,0,128,123,1,0,0,0,128,127,1,0,0,0,129,
        159,1,0,0,0,130,137,3,46,23,0,131,133,5,1,0,0,132,131,1,0,0,0,133,
        134,1,0,0,0,134,132,1,0,0,0,134,135,1,0,0,0,135,138,1,0,0,0,136,
        138,5,57,0,0,137,132,1,0,0,0,137,136,1,0,0,0,138,159,1,0,0,0,139,
        146,3,78,39,0,140,142,5,1,0,0,141,140,1,0,0,0,142,143,1,0,0,0,143,
        141,1,0,0,0,143,144,1,0,0,0,144,147,1,0,0,0,145,147,5,57,0,0,146,
        141,1,0,0,0,146,145,1,0,0,0,147,159,1,0,0,0,148,155,3,66,33,0,149,
        151,5,1,0,0,150,149,1,0,0,0,151,152,1,0,0,0,152,150,1,0,0,0,152,
        153,1,0,0,0,153,156,1,0,0,0,154,156,5,57,0,0,155,150,1,0,0,0,155,
        154,1,0,0,0,156,159,1,0,0,0,157,159,3,32,16,0,158,121,1,0,0,0,158,
        130,1,0,0,0,158,139,1,0,0,0,158,148,1,0,0,0,158,157,1,0,0,0,159,
        3,1,0,0,0,160,162,5,12,0,0,161,160,1,0,0,0,161,162,1,0,0,0,162,163,
        1,0,0,0,163,169,5,26,0,0,164,165,3,64,32,0,165,166,5,2,0,0,166,168,
        1,0,0,0,167,164,1,0,0,0,168,171,1,0,0,0,169,167,1,0,0,0,169,170,
        1,0,0,0,170,172,1,0,0,0,171,169,1,0,0,0,172,173,3,64,32,0,173,5,
        1,0,0,0,174,175,5,22,0,0,175,179,5,3,0,0,176,180,3,74,37,0,177,180,
        3,86,43,0,178,180,5,33,0,0,179,176,1,0,0,0,179,177,1,0,0,0,179,178,
        1,0,0,0,180,181,1,0,0,0,181,202,5,4,0,0,182,183,5,22,0,0,183,186,
        5,3,0,0,184,187,5,32,0,0,185,187,5,33,0,0,186,184,1,0,0,0,186,185,
        1,0,0,0,187,198,1,0,0,0,188,194,5,2,0,0,189,190,3,8,4,0,190,191,
        5,2,0,0,191,193,1,0,0,0,192,189,1,0,0,0,193,196,1,0,0,0,194,192,
        1,0,0,0,194,195,1,0,0,0,195,197,1,0,0,0,196,194,1,0,0,0,197,199,
        3,8,4,0,198,188,1,0,0,0,198,199,1,0,0,0,199,200,1,0,0,0,200,202,
        5,4,0,0,201,174,1,0,0,0,201,182,1,0,0,0,202,7,1,0,0,0,203,211,3,
        74,37,0,204,211,3,86,43,0,205,211,3,68,34,0,206,211,3,70,35,0,207,
        211,3,76,38,0,208,211,3,78,39,0,209,211,5,33,0,0,210,203,1,0,0,0,
        210,204,1,0,0,0,210,205,1,0,0,0,210,206,1,0,0,0,210,207,1,0,0,0,
        210,208,1,0,0,0,210,209,1,0,0,0,211,9,1,0,0,0,212,213,5,24,0,0,213,
        216,5,3,0,0,214,217,5,32,0,0,215,217,5,33,0,0,216,214,1,0,0,0,216,
        215,1,0,0,0,217,218,1,0,0,0,218,227,5,2,0,0,219,221,5,49,0,0,220,
        219,1,0,0,0,220,221,1,0,0,0,221,222,1,0,0,0,222,223,3,12,6,0,223,
        224,5,2,0,0,224,226,1,0,0,0,225,220,1,0,0,0,226,229,1,0,0,0,227,
        225,1,0,0,0,227,228,1,0,0,0,228,231,1,0,0,0,229,227,1,0,0,0,230,
        232,5,49,0,0,231,230,1,0,0,0,231,232,1,0,0,0,232,233,1,0,0,0,233,
        234,3,12,6,0,234,235,5,4,0,0,235,11,1,0,0,0,236,244,3,74,37,0,237,
        244,3,70,35,0,238,244,3,68,34,0,239,240,5,49,0,0,240,244,3,74,37,
        0,241,242,5,49,0,0,242,244,3,70,35,0,243,236,1,0,0,0,243,237,1,0,
        0,0,243,238,1,0,0,0,243,239,1,0,0,0,243,241,1,0,0,0,244,13,1,0,0,
        0,245,250,3,16,8,0,246,247,5,2,0,0,247,249,3,16,8,0,248,246,1,0,
        0,0,249,252,1,0,0,0,250,248,1,0,0,0,250,251,1,0,0,0,251,15,1,0,0,
        0,252,250,1,0,0,0,253,255,5,12,0,0,254,253,1,0,0,0,254,255,1,0,0,
        0,255,256,1,0,0,0,256,258,5,26,0,0,257,259,5,49,0,0,258,257,1,0,
        0,0,258,259,1,0,0,0,259,263,1,0,0,0,260,262,5,34,0,0,261,260,1,0,
        0,0,262,265,1,0,0,0,263,261,1,0,0,0,263,264,1,0,0,0,264,266,1,0,
        0,0,265,263,1,0,0,0,266,269,5,28,0,0,267,268,5,48,0,0,268,270,3,
        78,39,0,269,267,1,0,0,0,269,270,1,0,0,0,270,290,1,0,0,0,271,273,
        5,12,0,0,272,271,1,0,0,0,272,273,1,0,0,0,273,274,1,0,0,0,274,278,
        5,26,0,0,275,277,5,34,0,0,276,275,1,0,0,0,277,280,1,0,0,0,278,276,
        1,0,0,0,278,279,1,0,0,0,279,282,1,0,0,0,280,278,1,0,0,0,281,283,
        5,49,0,0,282,281,1,0,0,0,282,283,1,0,0,0,283,284,1,0,0,0,284,287,
        5,28,0,0,285,286,5,48,0,0,286,288,3,78,39,0,287,285,1,0,0,0,287,
        288,1,0,0,0,288,290,1,0,0,0,289,254,1,0,0,0,289,272,1,0,0,0,290,
        17,1,0,0,0,291,293,5,12,0,0,292,291,1,0,0,0,292,293,1,0,0,0,293,
        296,1,0,0,0,294,297,5,26,0,0,295,297,5,27,0,0,296,294,1,0,0,0,296,
        295,1,0,0,0,297,301,1,0,0,0,298,300,5,34,0,0,299,298,1,0,0,0,300,
        303,1,0,0,0,301,299,1,0,0,0,301,302,1,0,0,0,302,304,1,0,0,0,303,
        301,1,0,0,0,304,305,5,28,0,0,305,307,5,3,0,0,306,308,3,14,7,0,307,
        306,1,0,0,0,307,308,1,0,0,0,308,309,1,0,0,0,309,310,5,4,0,0,310,
        311,3,28,14,0,311,19,1,0,0,0,312,314,5,12,0,0,313,312,1,0,0,0,313,
        314,1,0,0,0,314,317,1,0,0,0,315,318,5,26,0,0,316,318,5,27,0,0,317,
        315,1,0,0,0,317,316,1,0,0,0,318,322,1,0,0,0,319,321,5,34,0,0,320,
        319,1,0,0,0,321,324,1,0,0,0,322,320,1,0,0,0,322,323,1,0,0,0,323,
        325,1,0,0,0,324,322,1,0,0,0,325,326,5,28,0,0,326,328,5,3,0,0,327,
        329,3,14,7,0,328,327,1,0,0,0,328,329,1,0,0,0,329,330,1,0,0,0,330,
        331,5,4,0,0,331,21,1,0,0,0,332,337,3,24,12,0,333,334,5,2,0,0,334,
        336,3,24,12,0,335,333,1,0,0,0,336,339,1,0,0,0,337,338,1,0,0,0,337,
        335,1,0,0,0,338,23,1,0,0,0,339,337,1,0,0,0,340,346,3,74,37,0,341,
        346,3,70,35,0,342,346,3,26,13,0,343,346,3,86,43,0,344,346,3,78,39,
        0,345,340,1,0,0,0,345,341,1,0,0,0,345,342,1,0,0,0,345,343,1,0,0,
        0,345,344,1,0,0,0,346,25,1,0,0,0,347,348,5,28,0,0,348,350,5,3,0,
        0,349,351,3,22,11,0,350,349,1,0,0,0,350,351,1,0,0,0,351,352,1,0,
        0,0,352,353,5,4,0,0,353,27,1,0,0,0,354,435,5,5,0,0,355,362,3,6,3,
        0,356,358,5,1,0,0,357,356,1,0,0,0,358,359,1,0,0,0,359,357,1,0,0,
        0,359,360,1,0,0,0,360,363,1,0,0,0,361,363,5,57,0,0,362,357,1,0,0,
        0,362,361,1,0,0,0,363,434,1,0,0,0,364,371,3,10,5,0,365,367,5,1,0,
        0,366,365,1,0,0,0,367,368,1,0,0,0,368,366,1,0,0,0,368,369,1,0,0,
        0,369,372,1,0,0,0,370,372,5,57,0,0,371,366,1,0,0,0,371,370,1,0,0,
        0,372,434,1,0,0,0,373,434,3,30,15,0,374,382,3,50,25,0,375,377,5,
        1,0,0,376,375,1,0,0,0,377,380,1,0,0,0,378,376,1,0,0,0,378,379,1,
        0,0,0,379,383,1,0,0,0,380,378,1,0,0,0,381,383,5,57,0,0,382,378,1,
        0,0,0,382,381,1,0,0,0,383,434,1,0,0,0,384,392,3,54,27,0,385,387,
        5,1,0,0,386,385,1,0,0,0,387,390,1,0,0,0,388,386,1,0,0,0,388,389,
        1,0,0,0,389,393,1,0,0,0,390,388,1,0,0,0,391,393,5,57,0,0,392,388,
        1,0,0,0,392,391,1,0,0,0,393,434,1,0,0,0,394,402,3,56,28,0,395,397,
        5,1,0,0,396,395,1,0,0,0,397,400,1,0,0,0,398,396,1,0,0,0,398,399,
        1,0,0,0,399,403,1,0,0,0,400,398,1,0,0,0,401,403,5,57,0,0,402,398,
        1,0,0,0,402,401,1,0,0,0,403,434,1,0,0,0,404,411,3,66,33,0,405,407,
        5,1,0,0,406,405,1,0,0,0,407,408,1,0,0,0,408,406,1,0,0,0,408,409,
        1,0,0,0,409,412,1,0,0,0,410,412,5,57,0,0,411,406,1,0,0,0,411,410,
        1,0,0,0,412,434,1,0,0,0,413,434,3,2,1,0,414,421,3,76,38,0,415,417,
        5,1,0,0,416,415,1,0,0,0,417,418,1,0,0,0,418,416,1,0,0,0,418,419,
        1,0,0,0,419,422,1,0,0,0,420,422,5,57,0,0,421,416,1,0,0,0,421,420,
        1,0,0,0,422,434,1,0,0,0,423,431,3,34,17,0,424,426,5,1,0,0,425,424,
        1,0,0,0,426,429,1,0,0,0,427,425,1,0,0,0,427,428,1,0,0,0,428,432,
        1,0,0,0,429,427,1,0,0,0,430,432,5,57,0,0,431,427,1,0,0,0,431,430,
        1,0,0,0,432,434,1,0,0,0,433,355,1,0,0,0,433,364,1,0,0,0,433,373,
        1,0,0,0,433,374,1,0,0,0,433,384,1,0,0,0,433,394,1,0,0,0,433,404,
        1,0,0,0,433,413,1,0,0,0,433,414,1,0,0,0,433,423,1,0,0,0,434,437,
        1,0,0,0,435,433,1,0,0,0,435,436,1,0,0,0,436,438,1,0,0,0,437,435,
        1,0,0,0,438,439,5,6,0,0,439,29,1,0,0,0,440,442,5,23,0,0,441,443,
        3,78,39,0,442,441,1,0,0,0,442,443,1,0,0,0,443,444,1,0,0,0,444,449,
        5,1,0,0,445,448,3,2,1,0,446,448,3,30,15,0,447,445,1,0,0,0,447,446,
        1,0,0,0,448,451,1,0,0,0,449,447,1,0,0,0,449,450,1,0,0,0,450,31,1,
        0,0,0,451,449,1,0,0,0,452,535,5,5,0,0,453,460,3,6,3,0,454,456,5,
        1,0,0,455,454,1,0,0,0,456,457,1,0,0,0,457,455,1,0,0,0,457,458,1,
        0,0,0,458,461,1,0,0,0,459,461,5,57,0,0,460,455,1,0,0,0,460,459,1,
        0,0,0,461,534,1,0,0,0,462,469,3,10,5,0,463,465,5,1,0,0,464,463,1,
        0,0,0,465,466,1,0,0,0,466,464,1,0,0,0,466,467,1,0,0,0,467,470,1,
        0,0,0,468,470,5,57,0,0,469,464,1,0,0,0,469,468,1,0,0,0,470,534,1,
        0,0,0,471,534,3,30,15,0,472,480,3,50,25,0,473,475,5,1,0,0,474,473,
        1,0,0,0,475,478,1,0,0,0,476,474,1,0,0,0,476,477,1,0,0,0,477,481,
        1,0,0,0,478,476,1,0,0,0,479,481,5,57,0,0,480,476,1,0,0,0,480,479,
        1,0,0,0,481,534,1,0,0,0,482,490,3,54,27,0,483,485,5,1,0,0,484,483,
        1,0,0,0,485,488,1,0,0,0,486,484,1,0,0,0,486,487,1,0,0,0,487,491,
        1,0,0,0,488,486,1,0,0,0,489,491,5,57,0,0,490,486,1,0,0,0,490,489,
        1,0,0,0,491,534,1,0,0,0,492,500,3,56,28,0,493,495,5,1,0,0,494,493,
        1,0,0,0,495,498,1,0,0,0,496,494,1,0,0,0,496,497,1,0,0,0,497,501,
        1,0,0,0,498,496,1,0,0,0,499,501,5,57,0,0,500,496,1,0,0,0,500,499,
        1,0,0,0,501,534,1,0,0,0,502,509,3,66,33,0,503,505,5,1,0,0,504,503,
        1,0,0,0,505,506,1,0,0,0,506,504,1,0,0,0,506,507,1,0,0,0,507,510,
        1,0,0,0,508,510,5,57,0,0,509,504,1,0,0,0,509,508,1,0,0,0,510,534,
        1,0,0,0,511,534,3,44,22,0,512,534,3,42,21,0,513,534,3,2,1,0,514,
        521,3,76,38,0,515,517,5,1,0,0,516,515,1,0,0,0,517,518,1,0,0,0,518,
        516,1,0,0,0,518,519,1,0,0,0,519,522,1,0,0,0,520,522,5,57,0,0,521,
        516,1,0,0,0,521,520,1,0,0,0,522,534,1,0,0,0,523,531,3,34,17,0,524,
        526,5,1,0,0,525,524,1,0,0,0,526,529,1,0,0,0,527,525,1,0,0,0,527,
        528,1,0,0,0,528,532,1,0,0,0,529,527,1,0,0,0,530,532,5,57,0,0,531,
        527,1,0,0,0,531,530,1,0,0,0,532,534,1,0,0,0,533,453,1,0,0,0,533,
        462,1,0,0,0,533,471,1,0,0,0,533,472,1,0,0,0,533,482,1,0,0,0,533,
        492,1,0,0,0,533,502,1,0,0,0,533,511,1,0,0,0,533,512,1,0,0,0,533,
        513,1,0,0,0,533,514,1,0,0,0,533,523,1,0,0,0,534,537,1,0,0,0,535,
        533,1,0,0,0,535,536,1,0,0,0,536,538,1,0,0,0,537,535,1,0,0,0,538,
        539,5,6,0,0,539,33,1,0,0,0,540,541,5,19,0,0,541,542,5,3,0,0,542,
        543,3,78,39,0,543,544,5,4,0,0,544,548,5,5,0,0,545,547,3,36,18,0,
        546,545,1,0,0,0,547,550,1,0,0,0,548,546,1,0,0,0,548,549,1,0,0,0,
        549,552,1,0,0,0,550,548,1,0,0,0,551,553,3,38,19,0,552,551,1,0,0,
        0,552,553,1,0,0,0,553,554,1,0,0,0,554,555,5,6,0,0,555,35,1,0,0,0,
        556,557,5,20,0,0,557,558,3,78,39,0,558,559,5,7,0,0,559,560,3,40,
        20,0,560,37,1,0,0,0,561,562,5,21,0,0,562,563,5,7,0,0,563,564,3,40,
        20,0,564,39,1,0,0,0,565,572,3,6,3,0,566,568,5,1,0,0,567,566,1,0,
        0,0,568,569,1,0,0,0,569,567,1,0,0,0,569,570,1,0,0,0,570,573,1,0,
        0,0,571,573,5,57,0,0,572,567,1,0,0,0,572,571,1,0,0,0,573,646,1,0,
        0,0,574,581,3,10,5,0,575,577,5,1,0,0,576,575,1,0,0,0,577,578,1,0,
        0,0,578,576,1,0,0,0,578,579,1,0,0,0,579,582,1,0,0,0,580,582,5,57,
        0,0,581,576,1,0,0,0,581,580,1,0,0,0,582,646,1,0,0,0,583,646,3,30,
        15,0,584,592,3,50,25,0,585,587,5,1,0,0,586,585,1,0,0,0,587,590,1,
        0,0,0,588,586,1,0,0,0,588,589,1,0,0,0,589,593,1,0,0,0,590,588,1,
        0,0,0,591,593,5,57,0,0,592,588,1,0,0,0,592,591,1,0,0,0,593,646,1,
        0,0,0,594,602,3,54,27,0,595,597,5,1,0,0,596,595,1,0,0,0,597,600,
        1,0,0,0,598,596,1,0,0,0,598,599,1,0,0,0,599,603,1,0,0,0,600,598,
        1,0,0,0,601,603,5,57,0,0,602,598,1,0,0,0,602,601,1,0,0,0,603,646,
        1,0,0,0,604,612,3,56,28,0,605,607,5,1,0,0,606,605,1,0,0,0,607,610,
        1,0,0,0,608,606,1,0,0,0,608,609,1,0,0,0,609,613,1,0,0,0,610,608,
        1,0,0,0,611,613,5,57,0,0,612,608,1,0,0,0,612,611,1,0,0,0,613,646,
        1,0,0,0,614,621,3,66,33,0,615,617,5,1,0,0,616,615,1,0,0,0,617,618,
        1,0,0,0,618,616,1,0,0,0,618,619,1,0,0,0,619,622,1,0,0,0,620,622,
        5,57,0,0,621,616,1,0,0,0,621,620,1,0,0,0,622,646,1,0,0,0,623,646,
        3,44,22,0,624,646,3,42,21,0,625,646,3,2,1,0,626,633,3,76,38,0,627,
        629,5,1,0,0,628,627,1,0,0,0,629,630,1,0,0,0,630,628,1,0,0,0,630,
        631,1,0,0,0,631,634,1,0,0,0,632,634,5,57,0,0,633,628,1,0,0,0,633,
        632,1,0,0,0,634,646,1,0,0,0,635,643,3,34,17,0,636,638,5,1,0,0,637,
        636,1,0,0,0,638,641,1,0,0,0,639,637,1,0,0,0,639,640,1,0,0,0,640,
        644,1,0,0,0,641,639,1,0,0,0,642,644,5,57,0,0,643,639,1,0,0,0,643,
        642,1,0,0,0,644,646,1,0,0,0,645,565,1,0,0,0,645,574,1,0,0,0,645,
        583,1,0,0,0,645,584,1,0,0,0,645,594,1,0,0,0,645,604,1,0,0,0,645,
        614,1,0,0,0,645,623,1,0,0,0,645,624,1,0,0,0,645,625,1,0,0,0,645,
        626,1,0,0,0,645,635,1,0,0,0,646,649,1,0,0,0,647,645,1,0,0,0,647,
        648,1,0,0,0,648,41,1,0,0,0,649,647,1,0,0,0,650,651,5,18,0,0,651,
        655,7,0,0,0,652,654,3,2,1,0,653,652,1,0,0,0,654,657,1,0,0,0,655,
        653,1,0,0,0,655,656,1,0,0,0,656,43,1,0,0,0,657,655,1,0,0,0,658,659,
        5,17,0,0,659,663,7,0,0,0,660,662,3,2,1,0,661,660,1,0,0,0,662,665,
        1,0,0,0,663,661,1,0,0,0,663,664,1,0,0,0,664,45,1,0,0,0,665,663,1,
        0,0,0,666,668,5,12,0,0,667,666,1,0,0,0,667,668,1,0,0,0,668,669,1,
        0,0,0,669,673,5,26,0,0,670,672,5,34,0,0,671,670,1,0,0,0,672,675,
        1,0,0,0,673,671,1,0,0,0,673,674,1,0,0,0,674,676,1,0,0,0,675,673,
        1,0,0,0,676,677,5,28,0,0,677,679,5,8,0,0,678,680,5,29,0,0,679,678,
        1,0,0,0,679,680,1,0,0,0,680,681,1,0,0,0,681,682,5,9,0,0,682,683,
        5,48,0,0,683,689,5,5,0,0,684,685,3,86,43,0,685,686,5,2,0,0,686,688,
        1,0,0,0,687,684,1,0,0,0,688,691,1,0,0,0,689,687,1,0,0,0,689,690,
        1,0,0,0,690,692,1,0,0,0,691,689,1,0,0,0,692,693,3,86,43,0,693,694,
        5,6,0,0,694,710,1,0,0,0,695,697,5,12,0,0,696,695,1,0,0,0,696,697,
        1,0,0,0,697,698,1,0,0,0,698,702,5,26,0,0,699,701,5,34,0,0,700,699,
        1,0,0,0,701,704,1,0,0,0,702,700,1,0,0,0,702,703,1,0,0,0,703,705,
        1,0,0,0,704,702,1,0,0,0,705,706,5,28,0,0,706,707,5,8,0,0,707,708,
        5,29,0,0,708,710,5,9,0,0,709,667,1,0,0,0,709,696,1,0,0,0,710,47,
        1,0,0,0,711,712,5,25,0,0,712,713,5,39,0,0,713,714,5,28,0,0,714,715,
        5,10,0,0,715,716,5,41,0,0,716,49,1,0,0,0,717,718,5,13,0,0,718,719,
        5,3,0,0,719,720,3,60,30,0,720,721,5,4,0,0,721,723,3,32,16,0,722,
        724,3,52,26,0,723,722,1,0,0,0,723,724,1,0,0,0,724,51,1,0,0,0,725,
        726,5,14,0,0,726,727,3,32,16,0,727,53,1,0,0,0,728,729,5,16,0,0,729,
        730,5,3,0,0,730,731,3,60,30,0,731,732,5,4,0,0,732,733,3,32,16,0,
        733,55,1,0,0,0,734,735,5,15,0,0,735,736,5,3,0,0,736,737,3,58,29,
        0,737,738,5,1,0,0,738,739,3,60,30,0,739,740,5,1,0,0,740,741,3,62,
        31,0,741,742,5,4,0,0,742,743,3,32,16,0,743,57,1,0,0,0,744,745,5,
        26,0,0,745,746,3,72,36,0,746,747,5,48,0,0,747,748,3,78,39,0,748,
        751,1,0,0,0,749,751,3,66,33,0,750,744,1,0,0,0,750,749,1,0,0,0,751,
        59,1,0,0,0,752,755,3,76,38,0,753,755,3,78,39,0,754,752,1,0,0,0,754,
        753,1,0,0,0,755,61,1,0,0,0,756,757,5,50,0,0,757,767,3,74,37,0,758,
        759,5,51,0,0,759,767,3,74,37,0,760,761,3,74,37,0,761,762,5,50,0,
        0,762,767,1,0,0,0,763,764,3,74,37,0,764,765,5,51,0,0,765,767,1,0,
        0,0,766,756,1,0,0,0,766,758,1,0,0,0,766,760,1,0,0,0,766,763,1,0,
        0,0,767,63,1,0,0,0,768,769,3,72,36,0,769,770,5,48,0,0,770,771,3,
        78,39,0,771,774,1,0,0,0,772,774,3,72,36,0,773,768,1,0,0,0,773,772,
        1,0,0,0,774,65,1,0,0,0,775,776,3,74,37,0,776,777,5,48,0,0,777,778,
        3,78,39,0,778,788,1,0,0,0,779,780,3,70,35,0,780,781,5,48,0,0,781,
        782,3,78,39,0,782,788,1,0,0,0,783,784,3,68,34,0,784,785,5,48,0,0,
        785,786,3,78,39,0,786,788,1,0,0,0,787,775,1,0,0,0,787,779,1,0,0,
        0,787,783,1,0,0,0,788,67,1,0,0,0,789,790,3,72,36,0,790,791,5,8,0,
        0,791,792,5,29,0,0,792,793,5,9,0,0,793,810,1,0,0,0,794,795,3,72,
        36,0,795,796,5,8,0,0,796,797,3,78,39,0,797,798,5,9,0,0,798,810,1,
        0,0,0,799,800,3,70,35,0,800,801,5,8,0,0,801,802,5,29,0,0,802,803,
        5,9,0,0,803,810,1,0,0,0,804,805,3,70,35,0,805,806,5,8,0,0,806,807,
        3,78,39,0,807,808,5,9,0,0,808,810,1,0,0,0,809,789,1,0,0,0,809,794,
        1,0,0,0,809,799,1,0,0,0,809,804,1,0,0,0,810,69,1,0,0,0,811,812,5,
        34,0,0,812,816,3,70,35,0,813,814,5,34,0,0,814,816,3,74,37,0,815,
        811,1,0,0,0,815,813,1,0,0,0,816,71,1,0,0,0,817,819,5,34,0,0,818,
        817,1,0,0,0,819,822,1,0,0,0,820,818,1,0,0,0,820,821,1,0,0,0,821,
        823,1,0,0,0,822,820,1,0,0,0,823,824,5,28,0,0,824,73,1,0,0,0,825,
        826,5,28,0,0,826,75,1,0,0,0,827,828,3,78,39,0,828,829,7,1,0,0,829,
        830,3,78,39,0,830,840,1,0,0,0,831,832,3,78,39,0,832,833,7,2,0,0,
        833,834,3,78,39,0,834,840,1,0,0,0,835,836,3,78,39,0,836,837,7,3,
        0,0,837,838,3,78,39,0,838,840,1,0,0,0,839,827,1,0,0,0,839,831,1,
        0,0,0,839,835,1,0,0,0,840,77,1,0,0,0,841,842,6,39,-1,0,842,843,3,
        80,40,0,843,855,1,0,0,0,844,845,10,3,0,0,845,846,5,37,0,0,846,854,
        3,80,40,0,847,848,10,2,0,0,848,849,5,38,0,0,849,854,3,80,40,0,850,
        851,10,1,0,0,851,852,7,1,0,0,852,854,3,80,40,0,853,844,1,0,0,0,853,
        847,1,0,0,0,853,850,1,0,0,0,854,857,1,0,0,0,855,853,1,0,0,0,855,
        856,1,0,0,0,856,79,1,0,0,0,857,855,1,0,0,0,858,859,6,40,-1,0,859,
        863,3,82,41,0,860,861,5,47,0,0,861,863,3,82,41,0,862,858,1,0,0,0,
        862,860,1,0,0,0,863,874,1,0,0,0,864,865,10,4,0,0,865,866,7,4,0,0,
        866,873,3,82,41,0,867,868,10,3,0,0,868,869,7,5,0,0,869,873,3,82,
        41,0,870,871,10,1,0,0,871,873,7,6,0,0,872,864,1,0,0,0,872,867,1,
        0,0,0,872,870,1,0,0,0,873,876,1,0,0,0,874,872,1,0,0,0,874,875,1,
        0,0,0,875,81,1,0,0,0,876,874,1,0,0,0,877,885,3,84,42,0,878,879,5,
        38,0,0,879,885,3,82,41,0,880,881,5,37,0,0,881,885,3,82,41,0,882,
        883,7,6,0,0,883,885,3,82,41,0,884,877,1,0,0,0,884,878,1,0,0,0,884,
        880,1,0,0,0,884,882,1,0,0,0,885,83,1,0,0,0,886,900,3,74,37,0,887,
        900,3,86,43,0,888,889,5,49,0,0,889,900,3,74,37,0,890,900,3,70,35,
        0,891,892,5,3,0,0,892,893,3,78,39,0,893,894,5,4,0,0,894,900,1,0,
        0,0,895,896,5,11,0,0,896,900,3,84,42,0,897,900,3,26,13,0,898,900,
        3,68,34,0,899,886,1,0,0,0,899,887,1,0,0,0,899,888,1,0,0,0,899,890,
        1,0,0,0,899,891,1,0,0,0,899,895,1,0,0,0,899,897,1,0,0,0,899,898,
        1,0,0,0,900,85,1,0,0,0,901,902,7,7,0,0,902,87,1,0,0,0,135,91,99,
        103,109,112,114,116,125,128,134,137,143,146,152,155,158,161,169,
        179,186,194,198,201,210,216,220,227,231,243,250,254,258,263,269,
        272,278,282,287,289,292,296,301,307,313,317,322,328,337,345,350,
        359,362,368,371,378,382,388,392,398,402,408,411,418,421,427,431,
        433,435,442,447,449,457,460,466,469,476,480,486,490,496,500,506,
        509,518,521,527,531,533,535,548,552,569,572,578,581,588,592,598,
        602,608,612,618,621,630,633,639,643,645,647,655,663,667,673,679,
        689,696,702,709,723,750,754,766,773,787,809,815,820,839,853,855,
        862,872,874,884,899
    ]

class MathParser ( Parser ):

    grammarFileName = "Math.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "','", "'('", "')'", "'{'", "'}'", 
                     "':'", "'['", "']'", "'.h'", "<INVALID>", "'const'", 
                     "'if'", "'else'", "'for'", "'while'", "'break'", "'continue'", 
                     "'switch'", "'case'", "'default'", "'printf'", "'return'", 
                     "'scanf'", "'#include'", "<INVALID>", "'void'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'*'", "'/'", "'%'", "'+'", "'-'", "'<'", 
                     "'<='", "'>'", "'>='", "'=='", "'!='", "'||'", "'&&'", 
                     "'!'", "'='", "'&'", "'++'", "'--'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "CAST", "CONST", 
                      "IF", "ELSE", "FOR", "WHILE", "BREAK", "CONTINUE", 
                      "SWITCH", "CASE", "DEFAULT", "PRINTF", "RETURN", "SCANF", 
                      "INCLUDE", "TYPE", "VOID", "VAR_NAME", "INT", "FLOAT", 
                      "CHAR", "SCANF_STRING", "STRING", "STR", "DIV", "MOD", 
                      "SUM", "DIF", "LT", "LEQ", "GT", "GEQ", "EQ", "NEQ", 
                      "OR_OP", "AND_OP", "NOT_OP", "ASSIGN", "ADDR", "INCR", 
                      "DECR", "SP", "NEWLINE", "WS", "UNICODE_WS", "LN", 
                      "DELIM", "COMMENT", "LCOMMENT" ]

    RULE_math = 0
    RULE_instr = 1
    RULE_declr = 2
    RULE_printf = 3
    RULE_printf_arg = 4
    RULE_scanf = 5
    RULE_scanf_arg = 6
    RULE_param_list = 7
    RULE_param_declr = 8
    RULE_func_defn = 9
    RULE_func_decl = 10
    RULE_arg_list = 11
    RULE_func_arg = 12
    RULE_func_call = 13
    RULE_func_scope = 14
    RULE_return_instr = 15
    RULE_scope = 16
    RULE_switch_instr = 17
    RULE_case_instr = 18
    RULE_default_instr = 19
    RULE_switch_scope = 20
    RULE_cont_instr = 21
    RULE_break_instr = 22
    RULE_array_decl = 23
    RULE_incl_stat = 24
    RULE_if_cond = 25
    RULE_else_cond = 26
    RULE_while_loop = 27
    RULE_for_loop = 28
    RULE_init = 29
    RULE_cond = 30
    RULE_incr = 31
    RULE_var_decl = 32
    RULE_assign = 33
    RULE_array_el = 34
    RULE_deref = 35
    RULE_lvar = 36
    RULE_rvar = 37
    RULE_comp = 38
    RULE_expr = 39
    RULE_term = 40
    RULE_factor = 41
    RULE_primary = 42
    RULE_rtype = 43

    ruleNames =  [ "math", "instr", "declr", "printf", "printf_arg", "scanf", 
                   "scanf_arg", "param_list", "param_declr", "func_defn", 
                   "func_decl", "arg_list", "func_arg", "func_call", "func_scope", 
                   "return_instr", "scope", "switch_instr", "case_instr", 
                   "default_instr", "switch_scope", "cont_instr", "break_instr", 
                   "array_decl", "incl_stat", "if_cond", "else_cond", "while_loop", 
                   "for_loop", "init", "cond", "incr", "var_decl", "assign", 
                   "array_el", "deref", "lvar", "rvar", "comp", "expr", 
                   "term", "factor", "primary", "rtype" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    CAST=11
    CONST=12
    IF=13
    ELSE=14
    FOR=15
    WHILE=16
    BREAK=17
    CONTINUE=18
    SWITCH=19
    CASE=20
    DEFAULT=21
    PRINTF=22
    RETURN=23
    SCANF=24
    INCLUDE=25
    TYPE=26
    VOID=27
    VAR_NAME=28
    INT=29
    FLOAT=30
    CHAR=31
    SCANF_STRING=32
    STRING=33
    STR=34
    DIV=35
    MOD=36
    SUM=37
    DIF=38
    LT=39
    LEQ=40
    GT=41
    GEQ=42
    EQ=43
    NEQ=44
    OR_OP=45
    AND_OP=46
    NOT_OP=47
    ASSIGN=48
    ADDR=49
    INCR=50
    DECR=51
    SP=52
    NEWLINE=53
    WS=54
    UNICODE_WS=55
    LN=56
    DELIM=57
    COMMENT=58
    LCOMMENT=59

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class MathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(MathParser.EOF, 0)

        def incl_stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Incl_statContext)
            else:
                return self.getTypedRuleContext(MathParser.Incl_statContext,i)


        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.InstrContext)
            else:
                return self.getTypedRuleContext(MathParser.InstrContext,i)


        def func_defn(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Func_defnContext)
            else:
                return self.getTypedRuleContext(MathParser.Func_defnContext,i)


        def func_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Func_declContext)
            else:
                return self.getTypedRuleContext(MathParser.Func_declContext,i)


        def DELIM(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.DELIM)
            else:
                return self.getToken(MathParser.DELIM, i)

        def getRuleIndex(self):
            return MathParser.RULE_math

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMath" ):
                listener.enterMath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMath" ):
                listener.exitMath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMath" ):
                return visitor.visitMath(self)
            else:
                return visitor.visitChildren(self)




    def math(self):

        localctx = MathParser.MathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_math)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 91
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==25:
                self.state = 88
                self.incl_stat()
                self.state = 93
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 116
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 4081820886898728) != 0:
                self.state = 114
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
                if la_ == 1:
                    self.state = 94
                    self.instr()
                    pass

                elif la_ == 2:
                    self.state = 95
                    self.func_defn()
                    self.state = 103
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [-1, 1, 3, 5, 11, 12, 26, 27, 28, 29, 30, 31, 34, 37, 38, 47, 49, 50, 51]:
                        self.state = 99
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 96
                            self.match(MathParser.T__0)
                            self.state = 101
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [57]:
                        self.state = 102
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 3:
                    self.state = 105
                    self.func_decl()
                    self.state = 112
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 107 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 106
                            self.match(MathParser.T__0)
                            self.state = 109 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [57]:
                        self.state = 111
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass


                self.state = 118
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 119
            self.match(MathParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declr(self):
            return self.getTypedRuleContext(MathParser.DeclrContext,0)


        def DELIM(self):
            return self.getToken(MathParser.DELIM, 0)

        def array_decl(self):
            return self.getTypedRuleContext(MathParser.Array_declContext,0)


        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def assign(self):
            return self.getTypedRuleContext(MathParser.AssignContext,0)


        def scope(self):
            return self.getTypedRuleContext(MathParser.ScopeContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstr" ):
                listener.enterInstr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstr" ):
                listener.exitInstr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstr" ):
                return visitor.visitInstr(self)
            else:
                return visitor.visitChildren(self)




    def instr(self):

        localctx = MathParser.InstrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_instr)
        self._la = 0 # Token type
        try:
            self.state = 158
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 121
                self.declr()
                self.state = 128
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1]:
                    self.state = 123 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 122
                        self.match(MathParser.T__0)
                        self.state = 125 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1):
                            break

                    pass
                elif token in [57]:
                    self.state = 127
                    self.match(MathParser.DELIM)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 130
                self.array_decl()
                self.state = 137
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1]:
                    self.state = 132 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 131
                        self.match(MathParser.T__0)
                        self.state = 134 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1):
                            break

                    pass
                elif token in [57]:
                    self.state = 136
                    self.match(MathParser.DELIM)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 139
                self.expr(0)
                self.state = 146
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1]:
                    self.state = 141 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 140
                        self.match(MathParser.T__0)
                        self.state = 143 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1):
                            break

                    pass
                elif token in [57]:
                    self.state = 145
                    self.match(MathParser.DELIM)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 148
                self.assign()
                self.state = 155
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1]:
                    self.state = 150 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 149
                        self.match(MathParser.T__0)
                        self.state = 152 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1):
                            break

                    pass
                elif token in [57]:
                    self.state = 154
                    self.match(MathParser.DELIM)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 157
                self.scope()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(MathParser.TYPE, 0)

        def var_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Var_declContext)
            else:
                return self.getTypedRuleContext(MathParser.Var_declContext,i)


        def CONST(self):
            return self.getToken(MathParser.CONST, 0)

        def getRuleIndex(self):
            return MathParser.RULE_declr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclr" ):
                listener.enterDeclr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclr" ):
                listener.exitDeclr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclr" ):
                return visitor.visitDeclr(self)
            else:
                return visitor.visitChildren(self)




    def declr(self):

        localctx = MathParser.DeclrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_declr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 160
                self.match(MathParser.CONST)


            self.state = 163
            self.match(MathParser.TYPE)
            self.state = 169
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 164
                    self.var_decl()
                    self.state = 165
                    self.match(MathParser.T__1) 
                self.state = 171
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

            self.state = 172
            self.var_decl()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrintfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.print_val = None # Token
            self.format_string = None # Token
            self._printf_arg = None # Printf_argContext
            self.vars_ = list() # of Printf_argContexts

        def PRINTF(self):
            return self.getToken(MathParser.PRINTF, 0)

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def rtype(self):
            return self.getTypedRuleContext(MathParser.RtypeContext,0)


        def STRING(self):
            return self.getToken(MathParser.STRING, 0)

        def SCANF_STRING(self):
            return self.getToken(MathParser.SCANF_STRING, 0)

        def printf_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Printf_argContext)
            else:
                return self.getTypedRuleContext(MathParser.Printf_argContext,i)


        def getRuleIndex(self):
            return MathParser.RULE_printf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintf" ):
                listener.enterPrintf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintf" ):
                listener.exitPrintf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrintf" ):
                return visitor.visitPrintf(self)
            else:
                return visitor.visitChildren(self)




    def printf(self):

        localctx = MathParser.PrintfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_printf)
        self._la = 0 # Token type
        try:
            self.state = 201
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 174
                self.match(MathParser.PRINTF)
                self.state = 175
                self.match(MathParser.T__2)
                self.state = 179
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [28]:
                    self.state = 176
                    self.rvar()
                    pass
                elif token in [29, 30, 31]:
                    self.state = 177
                    self.rtype()
                    pass
                elif token in [33]:
                    self.state = 178
                    localctx.print_val = self.match(MathParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 181
                self.match(MathParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 182
                self.match(MathParser.PRINTF)
                self.state = 183
                self.match(MathParser.T__2)
                self.state = 186
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [32]:
                    self.state = 184
                    localctx.format_string = self.match(MathParser.SCANF_STRING)
                    pass
                elif token in [33]:
                    self.state = 185
                    localctx.format_string = self.match(MathParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 198
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 188
                    self.match(MathParser.T__1)
                    self.state = 194
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,20,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 189
                            localctx._printf_arg = self.printf_arg()
                            localctx.vars_.append(localctx._printf_arg)
                            self.state = 190
                            self.match(MathParser.T__1) 
                        self.state = 196
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

                    self.state = 197
                    localctx._printf_arg = self.printf_arg()
                    localctx.vars_.append(localctx._printf_arg)


                self.state = 200
                self.match(MathParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Printf_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def rtype(self):
            return self.getTypedRuleContext(MathParser.RtypeContext,0)


        def array_el(self):
            return self.getTypedRuleContext(MathParser.Array_elContext,0)


        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def comp(self):
            return self.getTypedRuleContext(MathParser.CompContext,0)


        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def STRING(self):
            return self.getToken(MathParser.STRING, 0)

        def getRuleIndex(self):
            return MathParser.RULE_printf_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintf_arg" ):
                listener.enterPrintf_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintf_arg" ):
                listener.exitPrintf_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrintf_arg" ):
                return visitor.visitPrintf_arg(self)
            else:
                return visitor.visitChildren(self)




    def printf_arg(self):

        localctx = MathParser.Printf_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_printf_arg)
        try:
            self.state = 210
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 203
                self.rvar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 204
                self.rtype()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 205
                self.array_el()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 206
                self.deref()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 207
                self.comp()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 208
                self.expr(0)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 209
                self.match(MathParser.STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScanfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.format_string = None # Token
            self._scanf_arg = None # Scanf_argContext
            self.vars_ = list() # of Scanf_argContexts

        def SCANF(self):
            return self.getToken(MathParser.SCANF, 0)

        def scanf_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Scanf_argContext)
            else:
                return self.getTypedRuleContext(MathParser.Scanf_argContext,i)


        def SCANF_STRING(self):
            return self.getToken(MathParser.SCANF_STRING, 0)

        def STRING(self):
            return self.getToken(MathParser.STRING, 0)

        def ADDR(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.ADDR)
            else:
                return self.getToken(MathParser.ADDR, i)

        def getRuleIndex(self):
            return MathParser.RULE_scanf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScanf" ):
                listener.enterScanf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScanf" ):
                listener.exitScanf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScanf" ):
                return visitor.visitScanf(self)
            else:
                return visitor.visitChildren(self)




    def scanf(self):

        localctx = MathParser.ScanfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_scanf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 212
            self.match(MathParser.SCANF)
            self.state = 213
            self.match(MathParser.T__2)
            self.state = 216
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [32]:
                self.state = 214
                localctx.format_string = self.match(MathParser.SCANF_STRING)
                pass
            elif token in [33]:
                self.state = 215
                localctx.format_string = self.match(MathParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 218
            self.match(MathParser.T__1)
            self.state = 227
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 220
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                    if la_ == 1:
                        self.state = 219
                        self.match(MathParser.ADDR)


                    self.state = 222
                    localctx._scanf_arg = self.scanf_arg()
                    localctx.vars_.append(localctx._scanf_arg)
                    self.state = 223
                    self.match(MathParser.T__1) 
                self.state = 229
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

            self.state = 231
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 230
                self.match(MathParser.ADDR)


            self.state = 233
            localctx._scanf_arg = self.scanf_arg()
            localctx.vars_.append(localctx._scanf_arg)
            self.state = 234
            self.match(MathParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Scanf_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def array_el(self):
            return self.getTypedRuleContext(MathParser.Array_elContext,0)


        def ADDR(self):
            return self.getToken(MathParser.ADDR, 0)

        def getRuleIndex(self):
            return MathParser.RULE_scanf_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScanf_arg" ):
                listener.enterScanf_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScanf_arg" ):
                listener.exitScanf_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScanf_arg" ):
                return visitor.visitScanf_arg(self)
            else:
                return visitor.visitChildren(self)




    def scanf_arg(self):

        localctx = MathParser.Scanf_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_scanf_arg)
        try:
            self.state = 243
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 236
                self.rvar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 237
                self.deref()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 238
                self.array_el()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 239
                self.match(MathParser.ADDR)
                self.state = 240
                self.rvar()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 241
                self.match(MathParser.ADDR)
                self.state = 242
                self.deref()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._param_declr = None # Param_declrContext
            self.params = list() # of Param_declrContexts

        def param_declr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Param_declrContext)
            else:
                return self.getTypedRuleContext(MathParser.Param_declrContext,i)


        def getRuleIndex(self):
            return MathParser.RULE_param_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_list" ):
                listener.enterParam_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_list" ):
                listener.exitParam_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_list" ):
                return visitor.visitParam_list(self)
            else:
                return visitor.visitChildren(self)




    def param_list(self):

        localctx = MathParser.Param_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_param_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 245
            localctx._param_declr = self.param_declr()
            localctx.params.append(localctx._param_declr)
            self.state = 250
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2:
                self.state = 246
                self.match(MathParser.T__1)
                self.state = 247
                localctx._param_declr = self.param_declr()
                localctx.params.append(localctx._param_declr)
                self.state = 252
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_declrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.const = None # Token
            self.type_ = None # Token
            self.reference = None # Token
            self._STR = None # Token
            self.ptr = list() # of Tokens
            self.var = None # Token
            self.default = None # ExprContext

        def TYPE(self):
            return self.getToken(MathParser.TYPE, 0)

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def ASSIGN(self):
            return self.getToken(MathParser.ASSIGN, 0)

        def CONST(self):
            return self.getToken(MathParser.CONST, 0)

        def ADDR(self):
            return self.getToken(MathParser.ADDR, 0)

        def STR(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.STR)
            else:
                return self.getToken(MathParser.STR, i)

        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_param_declr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_declr" ):
                listener.enterParam_declr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_declr" ):
                listener.exitParam_declr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_declr" ):
                return visitor.visitParam_declr(self)
            else:
                return visitor.visitChildren(self)




    def param_declr(self):

        localctx = MathParser.Param_declrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_param_declr)
        self._la = 0 # Token type
        try:
            self.state = 289
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 253
                    localctx.const = self.match(MathParser.CONST)


                self.state = 256
                localctx.type_ = self.match(MathParser.TYPE)
                self.state = 258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 257
                    localctx.reference = self.match(MathParser.ADDR)


                self.state = 263
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==34:
                    self.state = 260
                    localctx._STR = self.match(MathParser.STR)
                    localctx.ptr.append(localctx._STR)
                    self.state = 265
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 266
                localctx.var = self.match(MathParser.VAR_NAME)
                self.state = 269
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==48:
                    self.state = 267
                    self.match(MathParser.ASSIGN)
                    self.state = 268
                    localctx.default = self.expr(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 271
                    localctx.const = self.match(MathParser.CONST)


                self.state = 274
                localctx.type_ = self.match(MathParser.TYPE)
                self.state = 278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==34:
                    self.state = 275
                    localctx._STR = self.match(MathParser.STR)
                    localctx.ptr.append(localctx._STR)
                    self.state = 280
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 281
                    localctx.reference = self.match(MathParser.ADDR)


                self.state = 284
                localctx.var = self.match(MathParser.VAR_NAME)
                self.state = 287
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==48:
                    self.state = 285
                    self.match(MathParser.ASSIGN)
                    self.state = 286
                    localctx.default = self.expr(0)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_defnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.const = None # Token
            self.type_ = None # Token
            self._STR = None # Token
            self.ptr = list() # of Tokens
            self.name = None # Token
            self.params = None # Param_listContext

        def func_scope(self):
            return self.getTypedRuleContext(MathParser.Func_scopeContext,0)


        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def TYPE(self):
            return self.getToken(MathParser.TYPE, 0)

        def VOID(self):
            return self.getToken(MathParser.VOID, 0)

        def CONST(self):
            return self.getToken(MathParser.CONST, 0)

        def STR(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.STR)
            else:
                return self.getToken(MathParser.STR, i)

        def param_list(self):
            return self.getTypedRuleContext(MathParser.Param_listContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_func_defn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_defn" ):
                listener.enterFunc_defn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_defn" ):
                listener.exitFunc_defn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_defn" ):
                return visitor.visitFunc_defn(self)
            else:
                return visitor.visitChildren(self)




    def func_defn(self):

        localctx = MathParser.Func_defnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_func_defn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 291
                localctx.const = self.match(MathParser.CONST)


            self.state = 296
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26]:
                self.state = 294
                localctx.type_ = self.match(MathParser.TYPE)
                pass
            elif token in [27]:
                self.state = 295
                localctx.type_ = self.match(MathParser.VOID)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==34:
                self.state = 298
                localctx._STR = self.match(MathParser.STR)
                localctx.ptr.append(localctx._STR)
                self.state = 303
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 304
            localctx.name = self.match(MathParser.VAR_NAME)
            self.state = 305
            self.match(MathParser.T__2)
            self.state = 307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12 or _la==26:
                self.state = 306
                localctx.params = self.param_list()


            self.state = 309
            self.match(MathParser.T__3)
            self.state = 310
            self.func_scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.const = None # Token
            self.type_ = None # Token
            self._STR = None # Token
            self.ptr = list() # of Tokens
            self.name = None # Token
            self.params = None # Param_listContext

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def TYPE(self):
            return self.getToken(MathParser.TYPE, 0)

        def VOID(self):
            return self.getToken(MathParser.VOID, 0)

        def CONST(self):
            return self.getToken(MathParser.CONST, 0)

        def STR(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.STR)
            else:
                return self.getToken(MathParser.STR, i)

        def param_list(self):
            return self.getTypedRuleContext(MathParser.Param_listContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_func_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_decl" ):
                listener.enterFunc_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_decl" ):
                listener.exitFunc_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_decl" ):
                return visitor.visitFunc_decl(self)
            else:
                return visitor.visitChildren(self)




    def func_decl(self):

        localctx = MathParser.Func_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_func_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 312
                localctx.const = self.match(MathParser.CONST)


            self.state = 317
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26]:
                self.state = 315
                localctx.type_ = self.match(MathParser.TYPE)
                pass
            elif token in [27]:
                self.state = 316
                localctx.type_ = self.match(MathParser.VOID)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==34:
                self.state = 319
                localctx._STR = self.match(MathParser.STR)
                localctx.ptr.append(localctx._STR)
                self.state = 324
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 325
            localctx.name = self.match(MathParser.VAR_NAME)
            self.state = 326
            self.match(MathParser.T__2)
            self.state = 328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12 or _la==26:
                self.state = 327
                localctx.params = self.param_list()


            self.state = 330
            self.match(MathParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arg_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._func_arg = None # Func_argContext
            self.args = list() # of Func_argContexts

        def func_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Func_argContext)
            else:
                return self.getTypedRuleContext(MathParser.Func_argContext,i)


        def getRuleIndex(self):
            return MathParser.RULE_arg_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArg_list" ):
                listener.enterArg_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArg_list" ):
                listener.exitArg_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArg_list" ):
                return visitor.visitArg_list(self)
            else:
                return visitor.visitChildren(self)




    def arg_list(self):

        localctx = MathParser.Arg_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_arg_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 332
            localctx._func_arg = self.func_arg()
            localctx.args.append(localctx._func_arg)
            self.state = 337
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 333
                    self.match(MathParser.T__1)
                    self.state = 334
                    localctx._func_arg = self.func_arg()
                    localctx.args.append(localctx._func_arg) 
                self.state = 339
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def func_call(self):
            return self.getTypedRuleContext(MathParser.Func_callContext,0)


        def rtype(self):
            return self.getTypedRuleContext(MathParser.RtypeContext,0)


        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_func_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_arg" ):
                listener.enterFunc_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_arg" ):
                listener.exitFunc_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_arg" ):
                return visitor.visitFunc_arg(self)
            else:
                return visitor.visitChildren(self)




    def func_arg(self):

        localctx = MathParser.Func_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_func_arg)
        try:
            self.state = 345
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 340
                self.rvar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 341
                self.deref()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 342
                self.func_call()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 343
                self.rtype()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 344
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self.args = None # Arg_listContext

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def arg_list(self):
            return self.getTypedRuleContext(MathParser.Arg_listContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_call" ):
                listener.enterFunc_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_call" ):
                listener.exitFunc_call(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_call" ):
                return visitor.visitFunc_call(self)
            else:
                return visitor.visitChildren(self)




    def func_call(self):

        localctx = MathParser.Func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_func_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 347
            localctx.name = self.match(MathParser.VAR_NAME)
            self.state = 348
            self.match(MathParser.T__2)
            self.state = 350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 4081820685568008) != 0:
                self.state = 349
                localctx.args = self.arg_list()


            self.state = 352
            self.match(MathParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_scopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def printf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.PrintfContext)
            else:
                return self.getTypedRuleContext(MathParser.PrintfContext,i)


        def scanf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.ScanfContext)
            else:
                return self.getTypedRuleContext(MathParser.ScanfContext,i)


        def return_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Return_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Return_instrContext,i)


        def if_cond(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.If_condContext)
            else:
                return self.getTypedRuleContext(MathParser.If_condContext,i)


        def while_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.While_loopContext)
            else:
                return self.getTypedRuleContext(MathParser.While_loopContext,i)


        def for_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.For_loopContext)
            else:
                return self.getTypedRuleContext(MathParser.For_loopContext,i)


        def assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.AssignContext)
            else:
                return self.getTypedRuleContext(MathParser.AssignContext,i)


        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.InstrContext)
            else:
                return self.getTypedRuleContext(MathParser.InstrContext,i)


        def comp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.CompContext)
            else:
                return self.getTypedRuleContext(MathParser.CompContext,i)


        def switch_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Switch_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Switch_instrContext,i)


        def DELIM(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.DELIM)
            else:
                return self.getToken(MathParser.DELIM, i)

        def getRuleIndex(self):
            return MathParser.RULE_func_scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_scope" ):
                listener.enterFunc_scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_scope" ):
                listener.exitFunc_scope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_scope" ):
                return visitor.visitFunc_scope(self)
            else:
                return visitor.visitChildren(self)




    def func_scope(self):

        localctx = MathParser.Func_scopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_func_scope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self.match(MathParser.T__4)
            self.state = 435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 4081820782671912) != 0:
                self.state = 433
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                if la_ == 1:
                    self.state = 355
                    self.printf()
                    self.state = 362
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 357 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 356
                            self.match(MathParser.T__0)
                            self.state = 359 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [57]:
                        self.state = 361
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 2:
                    self.state = 364
                    self.scanf()
                    self.state = 371
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 366 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 365
                            self.match(MathParser.T__0)
                            self.state = 368 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [57]:
                        self.state = 370
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 3:
                    self.state = 373
                    self.return_instr()
                    pass

                elif la_ == 4:
                    self.state = 374
                    self.if_cond()
                    self.state = 382
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 11, 12, 13, 15, 16, 19, 22, 23, 24, 26, 28, 29, 30, 31, 34, 37, 38, 47, 49, 50, 51]:
                        self.state = 378
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 375
                            self.match(MathParser.T__0)
                            self.state = 380
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [57]:
                        self.state = 381
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 5:
                    self.state = 384
                    self.while_loop()
                    self.state = 392
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 11, 12, 13, 15, 16, 19, 22, 23, 24, 26, 28, 29, 30, 31, 34, 37, 38, 47, 49, 50, 51]:
                        self.state = 388
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 385
                            self.match(MathParser.T__0)
                            self.state = 390
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [57]:
                        self.state = 391
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 6:
                    self.state = 394
                    self.for_loop()
                    self.state = 402
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 11, 12, 13, 15, 16, 19, 22, 23, 24, 26, 28, 29, 30, 31, 34, 37, 38, 47, 49, 50, 51]:
                        self.state = 398
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 395
                            self.match(MathParser.T__0)
                            self.state = 400
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [57]:
                        self.state = 401
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 7:
                    self.state = 404
                    self.assign()
                    self.state = 411
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 406 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 405
                            self.match(MathParser.T__0)
                            self.state = 408 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [57]:
                        self.state = 410
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 8:
                    self.state = 413
                    self.instr()
                    pass

                elif la_ == 9:
                    self.state = 414
                    self.comp()
                    self.state = 421
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 416 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 415
                            self.match(MathParser.T__0)
                            self.state = 418 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [57]:
                        self.state = 420
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 10:
                    self.state = 423
                    self.switch_instr()
                    self.state = 431
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 11, 12, 13, 15, 16, 19, 22, 23, 24, 26, 28, 29, 30, 31, 34, 37, 38, 47, 49, 50, 51]:
                        self.state = 427
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 424
                            self.match(MathParser.T__0)
                            self.state = 429
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [57]:
                        self.state = 430
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass


                self.state = 437
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 438
            self.match(MathParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ret_val = None # ExprContext

        def RETURN(self):
            return self.getToken(MathParser.RETURN, 0)

        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.InstrContext)
            else:
                return self.getTypedRuleContext(MathParser.InstrContext,i)


        def return_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Return_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Return_instrContext,i)


        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_return_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_instr" ):
                listener.enterReturn_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_instr" ):
                listener.exitReturn_instr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_instr" ):
                return visitor.visitReturn_instr(self)
            else:
                return visitor.visitChildren(self)




    def return_instr(self):

        localctx = MathParser.Return_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_return_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 440
            self.match(MathParser.RETURN)
            self.state = 442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 4081820685568008) != 0:
                self.state = 441
                localctx.ret_val = self.expr(0)


            self.state = 444
            self.match(MathParser.T__0)
            self.state = 449
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,70,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 447
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [3, 5, 11, 12, 26, 28, 29, 30, 31, 34, 37, 38, 47, 49, 50, 51]:
                        self.state = 445
                        self.instr()
                        pass
                    elif token in [23]:
                        self.state = 446
                        self.return_instr()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 451
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def printf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.PrintfContext)
            else:
                return self.getTypedRuleContext(MathParser.PrintfContext,i)


        def scanf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.ScanfContext)
            else:
                return self.getTypedRuleContext(MathParser.ScanfContext,i)


        def return_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Return_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Return_instrContext,i)


        def if_cond(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.If_condContext)
            else:
                return self.getTypedRuleContext(MathParser.If_condContext,i)


        def while_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.While_loopContext)
            else:
                return self.getTypedRuleContext(MathParser.While_loopContext,i)


        def for_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.For_loopContext)
            else:
                return self.getTypedRuleContext(MathParser.For_loopContext,i)


        def assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.AssignContext)
            else:
                return self.getTypedRuleContext(MathParser.AssignContext,i)


        def break_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Break_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Break_instrContext,i)


        def cont_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Cont_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Cont_instrContext,i)


        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.InstrContext)
            else:
                return self.getTypedRuleContext(MathParser.InstrContext,i)


        def comp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.CompContext)
            else:
                return self.getTypedRuleContext(MathParser.CompContext,i)


        def switch_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Switch_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Switch_instrContext,i)


        def DELIM(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.DELIM)
            else:
                return self.getToken(MathParser.DELIM, i)

        def getRuleIndex(self):
            return MathParser.RULE_scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScope" ):
                listener.enterScope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScope" ):
                listener.exitScope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScope" ):
                return visitor.visitScope(self)
            else:
                return visitor.visitChildren(self)




    def scope(self):

        localctx = MathParser.ScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_scope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 452
            self.match(MathParser.T__4)
            self.state = 535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 4081820783065128) != 0:
                self.state = 533
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                if la_ == 1:
                    self.state = 453
                    self.printf()
                    self.state = 460
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 455 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 454
                            self.match(MathParser.T__0)
                            self.state = 457 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [57]:
                        self.state = 459
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 2:
                    self.state = 462
                    self.scanf()
                    self.state = 469
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 464 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 463
                            self.match(MathParser.T__0)
                            self.state = 466 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [57]:
                        self.state = 468
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 3:
                    self.state = 471
                    self.return_instr()
                    pass

                elif la_ == 4:
                    self.state = 472
                    self.if_cond()
                    self.state = 480
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 11, 12, 13, 15, 16, 17, 18, 19, 22, 23, 24, 26, 28, 29, 30, 31, 34, 37, 38, 47, 49, 50, 51]:
                        self.state = 476
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 473
                            self.match(MathParser.T__0)
                            self.state = 478
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [57]:
                        self.state = 479
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 5:
                    self.state = 482
                    self.while_loop()
                    self.state = 490
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 11, 12, 13, 15, 16, 17, 18, 19, 22, 23, 24, 26, 28, 29, 30, 31, 34, 37, 38, 47, 49, 50, 51]:
                        self.state = 486
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 483
                            self.match(MathParser.T__0)
                            self.state = 488
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [57]:
                        self.state = 489
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 6:
                    self.state = 492
                    self.for_loop()
                    self.state = 500
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 11, 12, 13, 15, 16, 17, 18, 19, 22, 23, 24, 26, 28, 29, 30, 31, 34, 37, 38, 47, 49, 50, 51]:
                        self.state = 496
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 493
                            self.match(MathParser.T__0)
                            self.state = 498
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [57]:
                        self.state = 499
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 7:
                    self.state = 502
                    self.assign()
                    self.state = 509
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 504 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 503
                            self.match(MathParser.T__0)
                            self.state = 506 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [57]:
                        self.state = 508
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 8:
                    self.state = 511
                    self.break_instr()
                    pass

                elif la_ == 9:
                    self.state = 512
                    self.cont_instr()
                    pass

                elif la_ == 10:
                    self.state = 513
                    self.instr()
                    pass

                elif la_ == 11:
                    self.state = 514
                    self.comp()
                    self.state = 521
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 516 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 515
                            self.match(MathParser.T__0)
                            self.state = 518 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [57]:
                        self.state = 520
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 12:
                    self.state = 523
                    self.switch_instr()
                    self.state = 531
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 11, 12, 13, 15, 16, 17, 18, 19, 22, 23, 24, 26, 28, 29, 30, 31, 34, 37, 38, 47, 49, 50, 51]:
                        self.state = 527
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 524
                            self.match(MathParser.T__0)
                            self.state = 529
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [57]:
                        self.state = 530
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass


                self.state = 537
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 538
            self.match(MathParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.switch_cond = None # ExprContext
            self._case_instr = None # Case_instrContext
            self.case_list = list() # of Case_instrContexts
            self.default = None # Default_instrContext

        def SWITCH(self):
            return self.getToken(MathParser.SWITCH, 0)

        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def case_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Case_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Case_instrContext,i)


        def default_instr(self):
            return self.getTypedRuleContext(MathParser.Default_instrContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_switch_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_instr" ):
                listener.enterSwitch_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_instr" ):
                listener.exitSwitch_instr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitch_instr" ):
                return visitor.visitSwitch_instr(self)
            else:
                return visitor.visitChildren(self)




    def switch_instr(self):

        localctx = MathParser.Switch_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_switch_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 540
            self.match(MathParser.SWITCH)
            self.state = 541
            self.match(MathParser.T__2)
            self.state = 542
            localctx.switch_cond = self.expr(0)
            self.state = 543
            self.match(MathParser.T__3)
            self.state = 544
            self.match(MathParser.T__4)
            self.state = 548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==20:
                self.state = 545
                localctx._case_instr = self.case_instr()
                localctx.case_list.append(localctx._case_instr)
                self.state = 550
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21:
                self.state = 551
                localctx.default = self.default_instr()


            self.state = 554
            self.match(MathParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.case_cond = None # ExprContext

        def CASE(self):
            return self.getToken(MathParser.CASE, 0)

        def switch_scope(self):
            return self.getTypedRuleContext(MathParser.Switch_scopeContext,0)


        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_case_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_instr" ):
                listener.enterCase_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_instr" ):
                listener.exitCase_instr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_instr" ):
                return visitor.visitCase_instr(self)
            else:
                return visitor.visitChildren(self)




    def case_instr(self):

        localctx = MathParser.Case_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_case_instr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 556
            self.match(MathParser.CASE)
            self.state = 557
            localctx.case_cond = self.expr(0)
            self.state = 558
            self.match(MathParser.T__6)
            self.state = 559
            self.switch_scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(MathParser.DEFAULT, 0)

        def switch_scope(self):
            return self.getTypedRuleContext(MathParser.Switch_scopeContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_default_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_instr" ):
                listener.enterDefault_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_instr" ):
                listener.exitDefault_instr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefault_instr" ):
                return visitor.visitDefault_instr(self)
            else:
                return visitor.visitChildren(self)




    def default_instr(self):

        localctx = MathParser.Default_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_default_instr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 561
            self.match(MathParser.DEFAULT)
            self.state = 562
            self.match(MathParser.T__6)
            self.state = 563
            self.switch_scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_scopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def printf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.PrintfContext)
            else:
                return self.getTypedRuleContext(MathParser.PrintfContext,i)


        def scanf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.ScanfContext)
            else:
                return self.getTypedRuleContext(MathParser.ScanfContext,i)


        def return_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Return_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Return_instrContext,i)


        def if_cond(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.If_condContext)
            else:
                return self.getTypedRuleContext(MathParser.If_condContext,i)


        def while_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.While_loopContext)
            else:
                return self.getTypedRuleContext(MathParser.While_loopContext,i)


        def for_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.For_loopContext)
            else:
                return self.getTypedRuleContext(MathParser.For_loopContext,i)


        def assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.AssignContext)
            else:
                return self.getTypedRuleContext(MathParser.AssignContext,i)


        def break_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Break_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Break_instrContext,i)


        def cont_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Cont_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Cont_instrContext,i)


        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.InstrContext)
            else:
                return self.getTypedRuleContext(MathParser.InstrContext,i)


        def comp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.CompContext)
            else:
                return self.getTypedRuleContext(MathParser.CompContext,i)


        def switch_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Switch_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Switch_instrContext,i)


        def DELIM(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.DELIM)
            else:
                return self.getToken(MathParser.DELIM, i)

        def getRuleIndex(self):
            return MathParser.RULE_switch_scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_scope" ):
                listener.enterSwitch_scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_scope" ):
                listener.exitSwitch_scope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitch_scope" ):
                return visitor.visitSwitch_scope(self)
            else:
                return visitor.visitChildren(self)




    def switch_scope(self):

        localctx = MathParser.Switch_scopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_switch_scope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 4081820783065128) != 0:
                self.state = 645
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                if la_ == 1:
                    self.state = 565
                    self.printf()
                    self.state = 572
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 567 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 566
                            self.match(MathParser.T__0)
                            self.state = 569 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [57]:
                        self.state = 571
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 2:
                    self.state = 574
                    self.scanf()
                    self.state = 581
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 576 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 575
                            self.match(MathParser.T__0)
                            self.state = 578 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [57]:
                        self.state = 580
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 3:
                    self.state = 583
                    self.return_instr()
                    pass

                elif la_ == 4:
                    self.state = 584
                    self.if_cond()
                    self.state = 592
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 34, 37, 38, 47, 49, 50, 51]:
                        self.state = 588
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 585
                            self.match(MathParser.T__0)
                            self.state = 590
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [57]:
                        self.state = 591
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 5:
                    self.state = 594
                    self.while_loop()
                    self.state = 602
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 34, 37, 38, 47, 49, 50, 51]:
                        self.state = 598
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 595
                            self.match(MathParser.T__0)
                            self.state = 600
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [57]:
                        self.state = 601
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 6:
                    self.state = 604
                    self.for_loop()
                    self.state = 612
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 34, 37, 38, 47, 49, 50, 51]:
                        self.state = 608
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 605
                            self.match(MathParser.T__0)
                            self.state = 610
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [57]:
                        self.state = 611
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 7:
                    self.state = 614
                    self.assign()
                    self.state = 621
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 616 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 615
                            self.match(MathParser.T__0)
                            self.state = 618 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [57]:
                        self.state = 620
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 8:
                    self.state = 623
                    self.break_instr()
                    pass

                elif la_ == 9:
                    self.state = 624
                    self.cont_instr()
                    pass

                elif la_ == 10:
                    self.state = 625
                    self.instr()
                    pass

                elif la_ == 11:
                    self.state = 626
                    self.comp()
                    self.state = 633
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 628 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 627
                            self.match(MathParser.T__0)
                            self.state = 630 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [57]:
                        self.state = 632
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 12:
                    self.state = 635
                    self.switch_instr()
                    self.state = 643
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 34, 37, 38, 47, 49, 50, 51]:
                        self.state = 639
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 636
                            self.match(MathParser.T__0)
                            self.state = 641
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [57]:
                        self.state = 642
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass


                self.state = 649
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cont_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(MathParser.CONTINUE, 0)

        def DELIM(self):
            return self.getToken(MathParser.DELIM, 0)

        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.InstrContext)
            else:
                return self.getTypedRuleContext(MathParser.InstrContext,i)


        def getRuleIndex(self):
            return MathParser.RULE_cont_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCont_instr" ):
                listener.enterCont_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCont_instr" ):
                listener.exitCont_instr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCont_instr" ):
                return visitor.visitCont_instr(self)
            else:
                return visitor.visitChildren(self)




    def cont_instr(self):

        localctx = MathParser.Cont_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_cont_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 650
            self.match(MathParser.CONTINUE)
            self.state = 651
            _la = self._input.LA(1)
            if not(_la==1 or _la==57):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 655
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 652
                    self.instr() 
                self.state = 657
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Break_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(MathParser.BREAK, 0)

        def DELIM(self):
            return self.getToken(MathParser.DELIM, 0)

        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.InstrContext)
            else:
                return self.getTypedRuleContext(MathParser.InstrContext,i)


        def getRuleIndex(self):
            return MathParser.RULE_break_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_instr" ):
                listener.enterBreak_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_instr" ):
                listener.exitBreak_instr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreak_instr" ):
                return visitor.visitBreak_instr(self)
            else:
                return visitor.visitChildren(self)




    def break_instr(self):

        localctx = MathParser.Break_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_break_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 658
            self.match(MathParser.BREAK)
            self.state = 659
            _la = self._input.LA(1)
            if not(_la==1 or _la==57):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 663
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 660
                    self.instr() 
                self.state = 665
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.const = None # Token
            self.type_ = None # Token
            self._STR = None # Token
            self.ptr = list() # of Tokens
            self.name = None # Token
            self.size = None # Token
            self._rtype = None # RtypeContext
            self.values = list() # of RtypeContexts

        def ASSIGN(self):
            return self.getToken(MathParser.ASSIGN, 0)

        def TYPE(self):
            return self.getToken(MathParser.TYPE, 0)

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def rtype(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.RtypeContext)
            else:
                return self.getTypedRuleContext(MathParser.RtypeContext,i)


        def CONST(self):
            return self.getToken(MathParser.CONST, 0)

        def STR(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.STR)
            else:
                return self.getToken(MathParser.STR, i)

        def INT(self):
            return self.getToken(MathParser.INT, 0)

        def getRuleIndex(self):
            return MathParser.RULE_array_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_decl" ):
                listener.enterArray_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_decl" ):
                listener.exitArray_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_decl" ):
                return visitor.visitArray_decl(self)
            else:
                return visitor.visitChildren(self)




    def array_decl(self):

        localctx = MathParser.Array_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_array_decl)
        self._la = 0 # Token type
        try:
            self.state = 709
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 667
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 666
                    localctx.const = self.match(MathParser.CONST)


                self.state = 669
                localctx.type_ = self.match(MathParser.TYPE)
                self.state = 673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==34:
                    self.state = 670
                    localctx._STR = self.match(MathParser.STR)
                    localctx.ptr.append(localctx._STR)
                    self.state = 675
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 676
                localctx.name = self.match(MathParser.VAR_NAME)
                self.state = 677
                self.match(MathParser.T__7)
                self.state = 679
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==29:
                    self.state = 678
                    localctx.size = self.match(MathParser.INT)


                self.state = 681
                self.match(MathParser.T__8)
                self.state = 682
                self.match(MathParser.ASSIGN)
                self.state = 683
                self.match(MathParser.T__4)
                self.state = 689
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,114,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 684
                        localctx._rtype = self.rtype()
                        localctx.values.append(localctx._rtype)
                        self.state = 685
                        self.match(MathParser.T__1) 
                    self.state = 691
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,114,self._ctx)

                self.state = 692
                localctx._rtype = self.rtype()
                localctx.values.append(localctx._rtype)
                self.state = 693
                self.match(MathParser.T__5)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 696
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 695
                    localctx.const = self.match(MathParser.CONST)


                self.state = 698
                localctx.type_ = self.match(MathParser.TYPE)
                self.state = 702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==34:
                    self.state = 699
                    localctx._STR = self.match(MathParser.STR)
                    localctx.ptr.append(localctx._STR)
                    self.state = 704
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 705
                localctx.name = self.match(MathParser.VAR_NAME)
                self.state = 706
                self.match(MathParser.T__7)
                self.state = 707
                localctx.size = self.match(MathParser.INT)
                self.state = 708
                self.match(MathParser.T__8)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Incl_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.library = None # Token

        def INCLUDE(self):
            return self.getToken(MathParser.INCLUDE, 0)

        def LT(self):
            return self.getToken(MathParser.LT, 0)

        def GT(self):
            return self.getToken(MathParser.GT, 0)

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def getRuleIndex(self):
            return MathParser.RULE_incl_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncl_stat" ):
                listener.enterIncl_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncl_stat" ):
                listener.exitIncl_stat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncl_stat" ):
                return visitor.visitIncl_stat(self)
            else:
                return visitor.visitChildren(self)




    def incl_stat(self):

        localctx = MathParser.Incl_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_incl_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 711
            self.match(MathParser.INCLUDE)
            self.state = 712
            self.match(MathParser.LT)
            self.state = 713
            localctx.library = self.match(MathParser.VAR_NAME)
            self.state = 714
            self.match(MathParser.T__9)
            self.state = 715
            self.match(MathParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_condContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # CondContext

        def IF(self):
            return self.getToken(MathParser.IF, 0)

        def scope(self):
            return self.getTypedRuleContext(MathParser.ScopeContext,0)


        def cond(self):
            return self.getTypedRuleContext(MathParser.CondContext,0)


        def else_cond(self):
            return self.getTypedRuleContext(MathParser.Else_condContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_if_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_cond" ):
                listener.enterIf_cond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_cond" ):
                listener.exitIf_cond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_cond" ):
                return visitor.visitIf_cond(self)
            else:
                return visitor.visitChildren(self)




    def if_cond(self):

        localctx = MathParser.If_condContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_if_cond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            self.match(MathParser.IF)
            self.state = 718
            self.match(MathParser.T__2)
            self.state = 719
            localctx.condition = self.cond()
            self.state = 720
            self.match(MathParser.T__3)
            self.state = 721
            self.scope()
            self.state = 723
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 722
                self.else_cond()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_condContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(MathParser.ELSE, 0)

        def scope(self):
            return self.getTypedRuleContext(MathParser.ScopeContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_else_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_cond" ):
                listener.enterElse_cond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_cond" ):
                listener.exitElse_cond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_cond" ):
                return visitor.visitElse_cond(self)
            else:
                return visitor.visitChildren(self)




    def else_cond(self):

        localctx = MathParser.Else_condContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_else_cond)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self.match(MathParser.ELSE)
            self.state = 726
            self.scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # CondContext

        def WHILE(self):
            return self.getToken(MathParser.WHILE, 0)

        def scope(self):
            return self.getTypedRuleContext(MathParser.ScopeContext,0)


        def cond(self):
            return self.getTypedRuleContext(MathParser.CondContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_while_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_loop" ):
                listener.enterWhile_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_loop" ):
                listener.exitWhile_loop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_loop" ):
                return visitor.visitWhile_loop(self)
            else:
                return visitor.visitChildren(self)




    def while_loop(self):

        localctx = MathParser.While_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_while_loop)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728
            self.match(MathParser.WHILE)
            self.state = 729
            self.match(MathParser.T__2)
            self.state = 730
            localctx.condition = self.cond()
            self.state = 731
            self.match(MathParser.T__3)
            self.state = 732
            self.scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.initialization = None # InitContext
            self.condition = None # CondContext
            self.increment = None # IncrContext

        def FOR(self):
            return self.getToken(MathParser.FOR, 0)

        def scope(self):
            return self.getTypedRuleContext(MathParser.ScopeContext,0)


        def init(self):
            return self.getTypedRuleContext(MathParser.InitContext,0)


        def cond(self):
            return self.getTypedRuleContext(MathParser.CondContext,0)


        def incr(self):
            return self.getTypedRuleContext(MathParser.IncrContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_for_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_loop" ):
                listener.enterFor_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_loop" ):
                listener.exitFor_loop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_loop" ):
                return visitor.visitFor_loop(self)
            else:
                return visitor.visitChildren(self)




    def for_loop(self):

        localctx = MathParser.For_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_for_loop)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            self.match(MathParser.FOR)
            self.state = 735
            self.match(MathParser.T__2)
            self.state = 736
            localctx.initialization = self.init()
            self.state = 737
            self.match(MathParser.T__0)
            self.state = 738
            localctx.condition = self.cond()
            self.state = 739
            self.match(MathParser.T__0)
            self.state = 740
            localctx.increment = self.incr()
            self.state = 741
            self.match(MathParser.T__3)
            self.state = 742
            self.scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(MathParser.TYPE, 0)

        def lvar(self):
            return self.getTypedRuleContext(MathParser.LvarContext,0)


        def ASSIGN(self):
            return self.getToken(MathParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def assign(self):
            return self.getTypedRuleContext(MathParser.AssignContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_init

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInit" ):
                listener.enterInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInit" ):
                listener.exitInit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInit" ):
                return visitor.visitInit(self)
            else:
                return visitor.visitChildren(self)




    def init(self):

        localctx = MathParser.InitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_init)
        try:
            self.state = 750
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26]:
                self.enterOuterAlt(localctx, 1)
                self.state = 744
                self.match(MathParser.TYPE)
                self.state = 745
                self.lvar()
                self.state = 746
                self.match(MathParser.ASSIGN)
                self.state = 747
                self.expr(0)
                pass
            elif token in [28, 34]:
                self.enterOuterAlt(localctx, 2)
                self.state = 749
                self.assign()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp(self):
            return self.getTypedRuleContext(MathParser.CompContext,0)


        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCond" ):
                listener.enterCond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCond" ):
                listener.exitCond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCond" ):
                return visitor.visitCond(self)
            else:
                return visitor.visitChildren(self)




    def cond(self):

        localctx = MathParser.CondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_cond)
        try:
            self.state = 754
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 752
                self.comp()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 753
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCR(self):
            return self.getToken(MathParser.INCR, 0)

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def DECR(self):
            return self.getToken(MathParser.DECR, 0)

        def getRuleIndex(self):
            return MathParser.RULE_incr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncr" ):
                listener.enterIncr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncr" ):
                listener.exitIncr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncr" ):
                return visitor.visitIncr(self)
            else:
                return visitor.visitChildren(self)




    def incr(self):

        localctx = MathParser.IncrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_incr)
        try:
            self.state = 766
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 756
                self.match(MathParser.INCR)
                self.state = 757
                self.rvar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 758
                self.match(MathParser.DECR)
                self.state = 759
                self.rvar()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 760
                self.rvar()
                self.state = 761
                self.match(MathParser.INCR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 763
                self.rvar()
                self.state = 764
                self.match(MathParser.DECR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lvar(self):
            return self.getTypedRuleContext(MathParser.LvarContext,0)


        def ASSIGN(self):
            return self.getToken(MathParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_var_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_decl" ):
                listener.enterVar_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_decl" ):
                listener.exitVar_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVar_decl" ):
                return visitor.visitVar_decl(self)
            else:
                return visitor.visitChildren(self)




    def var_decl(self):

        localctx = MathParser.Var_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_var_decl)
        try:
            self.state = 773
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 768
                self.lvar()
                self.state = 769
                self.match(MathParser.ASSIGN)
                self.state = 770
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 772
                self.lvar()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def ASSIGN(self):
            return self.getToken(MathParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def array_el(self):
            return self.getTypedRuleContext(MathParser.Array_elContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign" ):
                listener.enterAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign" ):
                listener.exitAssign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssign" ):
                return visitor.visitAssign(self)
            else:
                return visitor.visitChildren(self)




    def assign(self):

        localctx = MathParser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_assign)
        try:
            self.state = 787
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 775
                self.rvar()
                self.state = 776
                self.match(MathParser.ASSIGN)
                self.state = 777
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 779
                self.deref()
                self.state = 780
                self.match(MathParser.ASSIGN)
                self.state = 781
                self.expr(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 783
                self.array_el()
                self.state = 784
                self.match(MathParser.ASSIGN)
                self.state = 785
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_elContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.index = None # Token

        def lvar(self):
            return self.getTypedRuleContext(MathParser.LvarContext,0)


        def INT(self):
            return self.getToken(MathParser.INT, 0)

        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_array_el

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_el" ):
                listener.enterArray_el(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_el" ):
                listener.exitArray_el(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_el" ):
                return visitor.visitArray_el(self)
            else:
                return visitor.visitChildren(self)




    def array_el(self):

        localctx = MathParser.Array_elContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_array_el)
        try:
            self.state = 809
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 789
                self.lvar()
                self.state = 790
                self.match(MathParser.T__7)
                self.state = 791
                localctx.index = self.match(MathParser.INT)
                self.state = 792
                self.match(MathParser.T__8)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 794
                self.lvar()
                self.state = 795
                self.match(MathParser.T__7)
                self.state = 796
                self.expr(0)
                self.state = 797
                self.match(MathParser.T__8)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 799
                self.deref()
                self.state = 800
                self.match(MathParser.T__7)
                self.state = 801
                localctx.index = self.match(MathParser.INT)
                self.state = 802
                self.match(MathParser.T__8)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 804
                self.deref()
                self.state = 805
                self.match(MathParser.T__7)
                self.state = 806
                self.expr(0)
                self.state = 807
                self.match(MathParser.T__8)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DerefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STR(self):
            return self.getToken(MathParser.STR, 0)

        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_deref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeref" ):
                listener.enterDeref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeref" ):
                listener.exitDeref(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeref" ):
                return visitor.visitDeref(self)
            else:
                return visitor.visitChildren(self)




    def deref(self):

        localctx = MathParser.DerefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_deref)
        try:
            self.state = 815
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 811
                self.match(MathParser.STR)
                self.state = 812
                self.deref()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 813
                self.match(MathParser.STR)
                self.state = 814
                self.rvar()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LvarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._STR = None # Token
            self.ptr = list() # of Tokens
            self.name = None # Token

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def STR(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.STR)
            else:
                return self.getToken(MathParser.STR, i)

        def getRuleIndex(self):
            return MathParser.RULE_lvar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLvar" ):
                listener.enterLvar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLvar" ):
                listener.exitLvar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLvar" ):
                return visitor.visitLvar(self)
            else:
                return visitor.visitChildren(self)




    def lvar(self):

        localctx = MathParser.LvarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_lvar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 820
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==34:
                self.state = 817
                localctx._STR = self.match(MathParser.STR)
                localctx.ptr.append(localctx._STR)
                self.state = 822
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 823
            localctx.name = self.match(MathParser.VAR_NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RvarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def getRuleIndex(self):
            return MathParser.RULE_rvar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRvar" ):
                listener.enterRvar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRvar" ):
                listener.exitRvar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRvar" ):
                return visitor.visitRvar(self)
            else:
                return visitor.visitChildren(self)




    def rvar(self):

        localctx = MathParser.RvarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_rvar)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self.match(MathParser.VAR_NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.ExprContext)
            else:
                return self.getTypedRuleContext(MathParser.ExprContext,i)


        def AND_OP(self):
            return self.getToken(MathParser.AND_OP, 0)

        def OR_OP(self):
            return self.getToken(MathParser.OR_OP, 0)

        def GEQ(self):
            return self.getToken(MathParser.GEQ, 0)

        def LEQ(self):
            return self.getToken(MathParser.LEQ, 0)

        def NEQ(self):
            return self.getToken(MathParser.NEQ, 0)

        def GT(self):
            return self.getToken(MathParser.GT, 0)

        def LT(self):
            return self.getToken(MathParser.LT, 0)

        def EQ(self):
            return self.getToken(MathParser.EQ, 0)

        def getRuleIndex(self):
            return MathParser.RULE_comp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp" ):
                listener.enterComp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp" ):
                listener.exitComp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp" ):
                return visitor.visitComp(self)
            else:
                return visitor.visitChildren(self)




    def comp(self):

        localctx = MathParser.CompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_comp)
        self._la = 0 # Token type
        try:
            self.state = 839
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 827
                self.expr(0)
                self.state = 828
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==45 or _la==46):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 829
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 831
                self.expr(0)
                self.state = 832
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 23089744183296) != 0):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 833
                self.expr(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 835
                self.expr(0)
                self.state = 836
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 11544872091648) != 0):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 837
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self):
            return self.getTypedRuleContext(MathParser.TermContext,0)


        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def SUM(self):
            return self.getToken(MathParser.SUM, 0)

        def DIF(self):
            return self.getToken(MathParser.DIF, 0)

        def AND_OP(self):
            return self.getToken(MathParser.AND_OP, 0)

        def OR_OP(self):
            return self.getToken(MathParser.OR_OP, 0)

        def getRuleIndex(self):
            return MathParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MathParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 78
        self.enterRecursionRule(localctx, 78, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 842
            self.term(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 855
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,129,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 853
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
                    if la_ == 1:
                        localctx = MathParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 844
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 845
                        self.match(MathParser.SUM)
                        self.state = 846
                        self.term(0)
                        pass

                    elif la_ == 2:
                        localctx = MathParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 847
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 848
                        self.match(MathParser.DIF)
                        self.state = 849
                        self.term(0)
                        pass

                    elif la_ == 3:
                        localctx = MathParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 850
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 851
                        _la = self._input.LA(1)
                        if not(_la==45 or _la==46):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 852
                        self.term(0)
                        pass

             
                self.state = 857
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,129,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(MathParser.FactorContext,0)


        def NOT_OP(self):
            return self.getToken(MathParser.NOT_OP, 0)

        def term(self):
            return self.getTypedRuleContext(MathParser.TermContext,0)


        def STR(self):
            return self.getToken(MathParser.STR, 0)

        def DIV(self):
            return self.getToken(MathParser.DIV, 0)

        def MOD(self):
            return self.getToken(MathParser.MOD, 0)

        def GT(self):
            return self.getToken(MathParser.GT, 0)

        def LT(self):
            return self.getToken(MathParser.LT, 0)

        def GEQ(self):
            return self.getToken(MathParser.GEQ, 0)

        def LEQ(self):
            return self.getToken(MathParser.LEQ, 0)

        def EQ(self):
            return self.getToken(MathParser.EQ, 0)

        def NEQ(self):
            return self.getToken(MathParser.NEQ, 0)

        def INCR(self):
            return self.getToken(MathParser.INCR, 0)

        def DECR(self):
            return self.getToken(MathParser.DECR, 0)

        def getRuleIndex(self):
            return MathParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerm" ):
                return visitor.visitTerm(self)
            else:
                return visitor.visitChildren(self)



    def term(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MathParser.TermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 80
        self.enterRecursionRule(localctx, 80, self.RULE_term, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 11, 28, 29, 30, 31, 34, 37, 38, 49, 50, 51]:
                self.state = 859
                self.factor()
                pass
            elif token in [47]:
                self.state = 860
                self.match(MathParser.NOT_OP)
                self.state = 861
                self.factor()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 874
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,132,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 872
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
                    if la_ == 1:
                        localctx = MathParser.TermContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_term)
                        self.state = 864
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 865
                        _la = self._input.LA(1)
                        if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 120259084288) != 0):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 866
                        self.factor()
                        pass

                    elif la_ == 2:
                        localctx = MathParser.TermContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_term)
                        self.state = 867
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 868
                        _la = self._input.LA(1)
                        if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 34634616274944) != 0):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 869
                        self.factor()
                        pass

                    elif la_ == 3:
                        localctx = MathParser.TermContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_term)
                        self.state = 870
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 871
                        _la = self._input.LA(1)
                        if not(_la==50 or _la==51):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

             
                self.state = 876
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,132,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary(self):
            return self.getTypedRuleContext(MathParser.PrimaryContext,0)


        def DIF(self):
            return self.getToken(MathParser.DIF, 0)

        def factor(self):
            return self.getTypedRuleContext(MathParser.FactorContext,0)


        def SUM(self):
            return self.getToken(MathParser.SUM, 0)

        def INCR(self):
            return self.getToken(MathParser.INCR, 0)

        def DECR(self):
            return self.getToken(MathParser.DECR, 0)

        def getRuleIndex(self):
            return MathParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFactor" ):
                return visitor.visitFactor(self)
            else:
                return visitor.visitChildren(self)




    def factor(self):

        localctx = MathParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_factor)
        self._la = 0 # Token type
        try:
            self.state = 884
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 11, 28, 29, 30, 31, 34, 49]:
                self.enterOuterAlt(localctx, 1)
                self.state = 877
                self.primary()
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 2)
                self.state = 878
                self.match(MathParser.DIF)
                self.state = 879
                self.factor()
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 3)
                self.state = 880
                self.match(MathParser.SUM)
                self.state = 881
                self.factor()
                pass
            elif token in [50, 51]:
                self.enterOuterAlt(localctx, 4)
                self.state = 882
                _la = self._input.LA(1)
                if not(_la==50 or _la==51):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 883
                self.factor()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def rtype(self):
            return self.getTypedRuleContext(MathParser.RtypeContext,0)


        def ADDR(self):
            return self.getToken(MathParser.ADDR, 0)

        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def CAST(self):
            return self.getToken(MathParser.CAST, 0)

        def primary(self):
            return self.getTypedRuleContext(MathParser.PrimaryContext,0)


        def func_call(self):
            return self.getTypedRuleContext(MathParser.Func_callContext,0)


        def array_el(self):
            return self.getTypedRuleContext(MathParser.Array_elContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimary" ):
                return visitor.visitPrimary(self)
            else:
                return visitor.visitChildren(self)




    def primary(self):

        localctx = MathParser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_primary)
        try:
            self.state = 899
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 886
                self.rvar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 887
                self.rtype()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 888
                self.match(MathParser.ADDR)
                self.state = 889
                self.rvar()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 890
                self.deref()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 891
                self.match(MathParser.T__2)
                self.state = 892
                self.expr(0)
                self.state = 893
                self.match(MathParser.T__3)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 895
                self.match(MathParser.CAST)
                self.state = 896
                self.primary()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 897
                self.func_call()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 898
                self.array_el()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RtypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(MathParser.INT, 0)

        def FLOAT(self):
            return self.getToken(MathParser.FLOAT, 0)

        def CHAR(self):
            return self.getToken(MathParser.CHAR, 0)

        def getRuleIndex(self):
            return MathParser.RULE_rtype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRtype" ):
                listener.enterRtype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRtype" ):
                listener.exitRtype(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRtype" ):
                return visitor.visitRtype(self)
            else:
                return visitor.visitChildren(self)




    def rtype(self):

        localctx = MathParser.RtypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_rtype)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 901
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 3758096384) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[39] = self.expr_sempred
        self._predicates[40] = self.term_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def term_sempred(self, localctx:TermContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 1)
         




