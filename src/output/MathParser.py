# Generated from Math.g4 by ANTLR 4.11.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,58,727,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,0,5,0,80,
        8,0,10,0,12,0,83,9,0,1,0,1,0,1,0,5,0,88,8,0,10,0,12,0,91,9,0,1,0,
        3,0,94,8,0,1,0,1,0,4,0,98,8,0,11,0,12,0,99,1,0,3,0,103,8,0,5,0,105,
        8,0,10,0,12,0,108,9,0,1,0,1,0,1,1,1,1,4,1,114,8,1,11,1,12,1,115,
        1,1,3,1,119,8,1,1,1,1,1,4,1,123,8,1,11,1,12,1,124,1,1,3,1,128,8,
        1,1,1,1,1,4,1,132,8,1,11,1,12,1,133,1,1,3,1,137,8,1,1,1,1,1,4,1,
        141,8,1,11,1,12,1,142,1,1,3,1,146,8,1,1,1,3,1,149,8,1,1,2,3,2,152,
        8,2,1,2,1,2,1,2,1,2,5,2,158,8,2,10,2,12,2,161,9,2,1,2,1,2,1,3,1,
        3,1,3,1,3,1,3,3,3,170,8,3,1,3,1,3,1,3,1,3,1,3,3,3,177,8,3,1,3,1,
        3,1,3,1,3,5,3,183,8,3,10,3,12,3,186,9,3,1,3,3,3,189,8,3,1,3,3,3,
        192,8,3,1,4,1,4,1,4,1,4,1,4,1,4,3,4,200,8,4,1,5,1,5,1,5,1,5,3,5,
        206,8,5,1,5,1,5,3,5,210,8,5,1,5,1,5,1,5,5,5,215,8,5,10,5,12,5,218,
        9,5,1,5,3,5,221,8,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,
        233,8,6,1,7,1,7,1,7,5,7,238,8,7,10,7,12,7,241,9,7,1,8,3,8,244,8,
        8,1,8,1,8,3,8,248,8,8,1,8,5,8,251,8,8,10,8,12,8,254,9,8,1,8,1,8,
        1,8,3,8,259,8,8,1,8,3,8,262,8,8,1,8,1,8,5,8,266,8,8,10,8,12,8,269,
        9,8,1,8,3,8,272,8,8,1,8,1,8,1,8,3,8,277,8,8,3,8,279,8,8,1,9,3,9,
        282,8,9,1,9,1,9,3,9,286,8,9,1,9,5,9,289,8,9,10,9,12,9,292,9,9,1,
        9,1,9,1,9,3,9,297,8,9,1,9,1,9,1,9,1,10,3,10,303,8,10,1,10,1,10,3,
        10,307,8,10,1,10,5,10,310,8,10,10,10,12,10,313,9,10,1,10,1,10,1,
        10,3,10,318,8,10,1,10,1,10,1,11,1,11,1,11,5,11,325,8,11,10,11,12,
        11,328,9,11,1,12,1,12,1,12,1,12,3,12,334,8,12,1,13,1,13,1,13,3,13,
        339,8,13,1,13,1,13,1,14,1,14,1,14,4,14,346,8,14,11,14,12,14,347,
        1,14,3,14,351,8,14,1,14,1,14,4,14,355,8,14,11,14,12,14,356,1,14,
        3,14,360,8,14,1,14,1,14,1,14,5,14,365,8,14,10,14,12,14,368,9,14,
        1,14,3,14,371,8,14,1,14,1,14,5,14,375,8,14,10,14,12,14,378,9,14,
        1,14,3,14,381,8,14,1,14,1,14,5,14,385,8,14,10,14,12,14,388,9,14,
        1,14,3,14,391,8,14,1,14,1,14,4,14,395,8,14,11,14,12,14,396,1,14,
        3,14,400,8,14,1,14,5,14,403,8,14,10,14,12,14,406,9,14,1,14,1,14,
        1,15,1,15,3,15,412,8,15,1,15,1,15,1,15,5,15,417,8,15,10,15,12,15,
        420,9,15,1,16,1,16,1,16,4,16,425,8,16,11,16,12,16,426,1,16,3,16,
        430,8,16,1,16,1,16,4,16,434,8,16,11,16,12,16,435,1,16,3,16,439,8,
        16,1,16,1,16,1,16,5,16,444,8,16,10,16,12,16,447,9,16,1,16,3,16,450,
        8,16,1,16,1,16,5,16,454,8,16,10,16,12,16,457,9,16,1,16,3,16,460,
        8,16,1,16,1,16,5,16,464,8,16,10,16,12,16,467,9,16,1,16,3,16,470,
        8,16,1,16,1,16,4,16,474,8,16,11,16,12,16,475,1,16,3,16,479,8,16,
        1,16,1,16,1,16,5,16,484,8,16,10,16,12,16,487,9,16,1,16,1,16,1,17,
        1,17,1,17,5,17,494,8,17,10,17,12,17,497,9,17,1,18,1,18,1,18,5,18,
        502,8,18,10,18,12,18,505,9,18,1,19,3,19,508,8,19,1,19,1,19,5,19,
        512,8,19,10,19,12,19,515,9,19,1,19,1,19,1,19,3,19,520,8,19,1,19,
        1,19,1,19,1,19,1,19,1,19,5,19,528,8,19,10,19,12,19,531,9,19,1,19,
        1,19,1,19,1,19,3,19,537,8,19,1,19,1,19,5,19,541,8,19,10,19,12,19,
        544,9,19,1,19,1,19,1,19,1,19,3,19,550,8,19,1,20,1,20,1,20,1,20,1,
        20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,3,21,564,8,21,1,22,1,22,1,
        22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,
        24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,3,25,591,8,25,1,
        26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,
        26,606,8,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,
        27,618,8,27,1,28,1,28,1,28,1,28,1,28,3,28,625,8,28,1,29,1,29,1,29,
        1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,639,8,29,1,30,
        1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,3,31,650,8,31,1,32,5,32,
        653,8,32,10,32,12,32,656,9,32,1,32,1,32,1,33,1,33,1,34,1,34,1,34,
        1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,5,34,674,8,34,10,34,
        12,34,677,9,34,1,35,1,35,1,35,1,35,3,35,683,8,35,1,35,1,35,1,35,
        1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,5,35,696,8,35,10,35,12,35,
        699,9,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,708,8,36,1,37,1,
        37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,723,
        8,37,1,38,1,38,1,38,1,326,2,68,70,39,0,2,4,6,8,10,12,14,16,18,20,
        22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
        66,68,70,72,74,76,0,7,2,0,1,1,56,56,3,0,39,39,41,41,43,43,3,0,38,
        38,40,40,42,42,1,0,44,45,1,0,33,35,1,0,49,50,1,0,28,30,836,0,81,
        1,0,0,0,2,148,1,0,0,0,4,151,1,0,0,0,6,191,1,0,0,0,8,199,1,0,0,0,
        10,201,1,0,0,0,12,232,1,0,0,0,14,234,1,0,0,0,16,278,1,0,0,0,18,281,
        1,0,0,0,20,302,1,0,0,0,22,321,1,0,0,0,24,333,1,0,0,0,26,335,1,0,
        0,0,28,342,1,0,0,0,30,409,1,0,0,0,32,421,1,0,0,0,34,490,1,0,0,0,
        36,498,1,0,0,0,38,549,1,0,0,0,40,551,1,0,0,0,42,557,1,0,0,0,44,565,
        1,0,0,0,46,568,1,0,0,0,48,574,1,0,0,0,50,590,1,0,0,0,52,605,1,0,
        0,0,54,617,1,0,0,0,56,624,1,0,0,0,58,638,1,0,0,0,60,640,1,0,0,0,
        62,649,1,0,0,0,64,654,1,0,0,0,66,659,1,0,0,0,68,661,1,0,0,0,70,682,
        1,0,0,0,72,707,1,0,0,0,74,722,1,0,0,0,76,724,1,0,0,0,78,80,3,40,
        20,0,79,78,1,0,0,0,80,83,1,0,0,0,81,79,1,0,0,0,81,82,1,0,0,0,82,
        106,1,0,0,0,83,81,1,0,0,0,84,105,3,2,1,0,85,93,3,18,9,0,86,88,5,
        1,0,0,87,86,1,0,0,0,88,91,1,0,0,0,89,87,1,0,0,0,89,90,1,0,0,0,90,
        94,1,0,0,0,91,89,1,0,0,0,92,94,5,56,0,0,93,89,1,0,0,0,93,92,1,0,
        0,0,94,105,1,0,0,0,95,102,3,20,10,0,96,98,5,1,0,0,97,96,1,0,0,0,
        98,99,1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,0,100,103,1,0,0,0,101,103,
        5,56,0,0,102,97,1,0,0,0,102,101,1,0,0,0,103,105,1,0,0,0,104,84,1,
        0,0,0,104,85,1,0,0,0,104,95,1,0,0,0,105,108,1,0,0,0,106,104,1,0,
        0,0,106,107,1,0,0,0,107,109,1,0,0,0,108,106,1,0,0,0,109,110,5,0,
        0,1,110,1,1,0,0,0,111,118,3,4,2,0,112,114,5,1,0,0,113,112,1,0,0,
        0,114,115,1,0,0,0,115,113,1,0,0,0,115,116,1,0,0,0,116,119,1,0,0,
        0,117,119,5,56,0,0,118,113,1,0,0,0,118,117,1,0,0,0,119,149,1,0,0,
        0,120,127,3,38,19,0,121,123,5,1,0,0,122,121,1,0,0,0,123,124,1,0,
        0,0,124,122,1,0,0,0,124,125,1,0,0,0,125,128,1,0,0,0,126,128,5,56,
        0,0,127,122,1,0,0,0,127,126,1,0,0,0,128,149,1,0,0,0,129,136,3,68,
        34,0,130,132,5,1,0,0,131,130,1,0,0,0,132,133,1,0,0,0,133,131,1,0,
        0,0,133,134,1,0,0,0,134,137,1,0,0,0,135,137,5,56,0,0,136,131,1,0,
        0,0,136,135,1,0,0,0,137,149,1,0,0,0,138,145,3,58,29,0,139,141,5,
        1,0,0,140,139,1,0,0,0,141,142,1,0,0,0,142,140,1,0,0,0,142,143,1,
        0,0,0,143,146,1,0,0,0,144,146,5,56,0,0,145,140,1,0,0,0,145,144,1,
        0,0,0,146,149,1,0,0,0,147,149,3,32,16,0,148,111,1,0,0,0,148,120,
        1,0,0,0,148,129,1,0,0,0,148,138,1,0,0,0,148,147,1,0,0,0,149,3,1,
        0,0,0,150,152,5,11,0,0,151,150,1,0,0,0,151,152,1,0,0,0,152,153,1,
        0,0,0,153,159,5,25,0,0,154,155,3,56,28,0,155,156,5,2,0,0,156,158,
        1,0,0,0,157,154,1,0,0,0,158,161,1,0,0,0,159,157,1,0,0,0,159,160,
        1,0,0,0,160,162,1,0,0,0,161,159,1,0,0,0,162,163,3,56,28,0,163,5,
        1,0,0,0,164,165,5,21,0,0,165,169,5,3,0,0,166,170,3,66,33,0,167,170,
        3,76,38,0,168,170,5,32,0,0,169,166,1,0,0,0,169,167,1,0,0,0,169,168,
        1,0,0,0,170,171,1,0,0,0,171,192,5,4,0,0,172,173,5,21,0,0,173,176,
        5,3,0,0,174,177,5,31,0,0,175,177,5,32,0,0,176,174,1,0,0,0,176,175,
        1,0,0,0,177,188,1,0,0,0,178,184,5,2,0,0,179,180,3,8,4,0,180,181,
        5,2,0,0,181,183,1,0,0,0,182,179,1,0,0,0,183,186,1,0,0,0,184,182,
        1,0,0,0,184,185,1,0,0,0,185,187,1,0,0,0,186,184,1,0,0,0,187,189,
        3,8,4,0,188,178,1,0,0,0,188,189,1,0,0,0,189,190,1,0,0,0,190,192,
        5,4,0,0,191,164,1,0,0,0,191,172,1,0,0,0,192,7,1,0,0,0,193,200,3,
        66,33,0,194,200,3,76,38,0,195,200,3,60,30,0,196,200,3,62,31,0,197,
        200,3,68,34,0,198,200,5,32,0,0,199,193,1,0,0,0,199,194,1,0,0,0,199,
        195,1,0,0,0,199,196,1,0,0,0,199,197,1,0,0,0,199,198,1,0,0,0,200,
        9,1,0,0,0,201,202,5,23,0,0,202,205,5,3,0,0,203,206,5,31,0,0,204,
        206,5,32,0,0,205,203,1,0,0,0,205,204,1,0,0,0,206,207,1,0,0,0,207,
        216,5,2,0,0,208,210,5,48,0,0,209,208,1,0,0,0,209,210,1,0,0,0,210,
        211,1,0,0,0,211,212,3,12,6,0,212,213,5,2,0,0,213,215,1,0,0,0,214,
        209,1,0,0,0,215,218,1,0,0,0,216,214,1,0,0,0,216,217,1,0,0,0,217,
        220,1,0,0,0,218,216,1,0,0,0,219,221,5,48,0,0,220,219,1,0,0,0,220,
        221,1,0,0,0,221,222,1,0,0,0,222,223,3,12,6,0,223,224,5,4,0,0,224,
        11,1,0,0,0,225,233,3,66,33,0,226,233,3,62,31,0,227,233,3,60,30,0,
        228,229,5,48,0,0,229,233,3,66,33,0,230,231,5,48,0,0,231,233,3,62,
        31,0,232,225,1,0,0,0,232,226,1,0,0,0,232,227,1,0,0,0,232,228,1,0,
        0,0,232,230,1,0,0,0,233,13,1,0,0,0,234,239,3,16,8,0,235,236,5,2,
        0,0,236,238,3,16,8,0,237,235,1,0,0,0,238,241,1,0,0,0,239,237,1,0,
        0,0,239,240,1,0,0,0,240,15,1,0,0,0,241,239,1,0,0,0,242,244,5,11,
        0,0,243,242,1,0,0,0,243,244,1,0,0,0,244,245,1,0,0,0,245,247,5,25,
        0,0,246,248,5,48,0,0,247,246,1,0,0,0,247,248,1,0,0,0,248,252,1,0,
        0,0,249,251,5,33,0,0,250,249,1,0,0,0,251,254,1,0,0,0,252,250,1,0,
        0,0,252,253,1,0,0,0,253,255,1,0,0,0,254,252,1,0,0,0,255,258,5,27,
        0,0,256,257,5,47,0,0,257,259,3,68,34,0,258,256,1,0,0,0,258,259,1,
        0,0,0,259,279,1,0,0,0,260,262,5,11,0,0,261,260,1,0,0,0,261,262,1,
        0,0,0,262,263,1,0,0,0,263,267,5,25,0,0,264,266,5,33,0,0,265,264,
        1,0,0,0,266,269,1,0,0,0,267,265,1,0,0,0,267,268,1,0,0,0,268,271,
        1,0,0,0,269,267,1,0,0,0,270,272,5,48,0,0,271,270,1,0,0,0,271,272,
        1,0,0,0,272,273,1,0,0,0,273,276,5,27,0,0,274,275,5,47,0,0,275,277,
        3,68,34,0,276,274,1,0,0,0,276,277,1,0,0,0,277,279,1,0,0,0,278,243,
        1,0,0,0,278,261,1,0,0,0,279,17,1,0,0,0,280,282,5,11,0,0,281,280,
        1,0,0,0,281,282,1,0,0,0,282,285,1,0,0,0,283,286,5,25,0,0,284,286,
        5,26,0,0,285,283,1,0,0,0,285,284,1,0,0,0,286,290,1,0,0,0,287,289,
        5,33,0,0,288,287,1,0,0,0,289,292,1,0,0,0,290,288,1,0,0,0,290,291,
        1,0,0,0,291,293,1,0,0,0,292,290,1,0,0,0,293,294,5,27,0,0,294,296,
        5,3,0,0,295,297,3,14,7,0,296,295,1,0,0,0,296,297,1,0,0,0,297,298,
        1,0,0,0,298,299,5,4,0,0,299,300,3,28,14,0,300,19,1,0,0,0,301,303,
        5,11,0,0,302,301,1,0,0,0,302,303,1,0,0,0,303,306,1,0,0,0,304,307,
        5,25,0,0,305,307,5,26,0,0,306,304,1,0,0,0,306,305,1,0,0,0,307,311,
        1,0,0,0,308,310,5,33,0,0,309,308,1,0,0,0,310,313,1,0,0,0,311,309,
        1,0,0,0,311,312,1,0,0,0,312,314,1,0,0,0,313,311,1,0,0,0,314,315,
        5,27,0,0,315,317,5,3,0,0,316,318,3,14,7,0,317,316,1,0,0,0,317,318,
        1,0,0,0,318,319,1,0,0,0,319,320,5,4,0,0,320,21,1,0,0,0,321,326,3,
        24,12,0,322,323,5,2,0,0,323,325,3,24,12,0,324,322,1,0,0,0,325,328,
        1,0,0,0,326,327,1,0,0,0,326,324,1,0,0,0,327,23,1,0,0,0,328,326,1,
        0,0,0,329,334,3,66,33,0,330,334,3,62,31,0,331,334,3,26,13,0,332,
        334,3,76,38,0,333,329,1,0,0,0,333,330,1,0,0,0,333,331,1,0,0,0,333,
        332,1,0,0,0,334,25,1,0,0,0,335,336,5,27,0,0,336,338,5,3,0,0,337,
        339,3,22,11,0,338,337,1,0,0,0,338,339,1,0,0,0,339,340,1,0,0,0,340,
        341,5,4,0,0,341,27,1,0,0,0,342,404,5,5,0,0,343,350,3,6,3,0,344,346,
        5,1,0,0,345,344,1,0,0,0,346,347,1,0,0,0,347,345,1,0,0,0,347,348,
        1,0,0,0,348,351,1,0,0,0,349,351,5,56,0,0,350,345,1,0,0,0,350,349,
        1,0,0,0,351,403,1,0,0,0,352,359,3,10,5,0,353,355,5,1,0,0,354,353,
        1,0,0,0,355,356,1,0,0,0,356,354,1,0,0,0,356,357,1,0,0,0,357,360,
        1,0,0,0,358,360,5,56,0,0,359,354,1,0,0,0,359,358,1,0,0,0,360,403,
        1,0,0,0,361,403,3,30,15,0,362,370,3,42,21,0,363,365,5,1,0,0,364,
        363,1,0,0,0,365,368,1,0,0,0,366,364,1,0,0,0,366,367,1,0,0,0,367,
        371,1,0,0,0,368,366,1,0,0,0,369,371,5,56,0,0,370,366,1,0,0,0,370,
        369,1,0,0,0,371,403,1,0,0,0,372,380,3,46,23,0,373,375,5,1,0,0,374,
        373,1,0,0,0,375,378,1,0,0,0,376,374,1,0,0,0,376,377,1,0,0,0,377,
        381,1,0,0,0,378,376,1,0,0,0,379,381,5,56,0,0,380,376,1,0,0,0,380,
        379,1,0,0,0,381,403,1,0,0,0,382,390,3,48,24,0,383,385,5,1,0,0,384,
        383,1,0,0,0,385,388,1,0,0,0,386,384,1,0,0,0,386,387,1,0,0,0,387,
        391,1,0,0,0,388,386,1,0,0,0,389,391,5,56,0,0,390,386,1,0,0,0,390,
        389,1,0,0,0,391,403,1,0,0,0,392,399,3,58,29,0,393,395,5,1,0,0,394,
        393,1,0,0,0,395,396,1,0,0,0,396,394,1,0,0,0,396,397,1,0,0,0,397,
        400,1,0,0,0,398,400,5,56,0,0,399,394,1,0,0,0,399,398,1,0,0,0,400,
        403,1,0,0,0,401,403,3,2,1,0,402,343,1,0,0,0,402,352,1,0,0,0,402,
        361,1,0,0,0,402,362,1,0,0,0,402,372,1,0,0,0,402,382,1,0,0,0,402,
        392,1,0,0,0,402,401,1,0,0,0,403,406,1,0,0,0,404,402,1,0,0,0,404,
        405,1,0,0,0,405,407,1,0,0,0,406,404,1,0,0,0,407,408,5,6,0,0,408,
        29,1,0,0,0,409,411,5,22,0,0,410,412,3,68,34,0,411,410,1,0,0,0,411,
        412,1,0,0,0,412,413,1,0,0,0,413,418,5,1,0,0,414,417,3,2,1,0,415,
        417,3,30,15,0,416,414,1,0,0,0,416,415,1,0,0,0,417,420,1,0,0,0,418,
        416,1,0,0,0,418,419,1,0,0,0,419,31,1,0,0,0,420,418,1,0,0,0,421,485,
        5,5,0,0,422,429,3,6,3,0,423,425,5,1,0,0,424,423,1,0,0,0,425,426,
        1,0,0,0,426,424,1,0,0,0,426,427,1,0,0,0,427,430,1,0,0,0,428,430,
        5,56,0,0,429,424,1,0,0,0,429,428,1,0,0,0,430,484,1,0,0,0,431,438,
        3,10,5,0,432,434,5,1,0,0,433,432,1,0,0,0,434,435,1,0,0,0,435,433,
        1,0,0,0,435,436,1,0,0,0,436,439,1,0,0,0,437,439,5,56,0,0,438,433,
        1,0,0,0,438,437,1,0,0,0,439,484,1,0,0,0,440,484,3,30,15,0,441,449,
        3,42,21,0,442,444,5,1,0,0,443,442,1,0,0,0,444,447,1,0,0,0,445,443,
        1,0,0,0,445,446,1,0,0,0,446,450,1,0,0,0,447,445,1,0,0,0,448,450,
        5,56,0,0,449,445,1,0,0,0,449,448,1,0,0,0,450,484,1,0,0,0,451,459,
        3,46,23,0,452,454,5,1,0,0,453,452,1,0,0,0,454,457,1,0,0,0,455,453,
        1,0,0,0,455,456,1,0,0,0,456,460,1,0,0,0,457,455,1,0,0,0,458,460,
        5,56,0,0,459,455,1,0,0,0,459,458,1,0,0,0,460,484,1,0,0,0,461,469,
        3,48,24,0,462,464,5,1,0,0,463,462,1,0,0,0,464,467,1,0,0,0,465,463,
        1,0,0,0,465,466,1,0,0,0,466,470,1,0,0,0,467,465,1,0,0,0,468,470,
        5,56,0,0,469,465,1,0,0,0,469,468,1,0,0,0,470,484,1,0,0,0,471,478,
        3,58,29,0,472,474,5,1,0,0,473,472,1,0,0,0,474,475,1,0,0,0,475,473,
        1,0,0,0,475,476,1,0,0,0,476,479,1,0,0,0,477,479,5,56,0,0,478,473,
        1,0,0,0,478,477,1,0,0,0,479,484,1,0,0,0,480,484,3,36,18,0,481,484,
        3,34,17,0,482,484,3,2,1,0,483,422,1,0,0,0,483,431,1,0,0,0,483,440,
        1,0,0,0,483,441,1,0,0,0,483,451,1,0,0,0,483,461,1,0,0,0,483,471,
        1,0,0,0,483,480,1,0,0,0,483,481,1,0,0,0,483,482,1,0,0,0,484,487,
        1,0,0,0,485,483,1,0,0,0,485,486,1,0,0,0,486,488,1,0,0,0,487,485,
        1,0,0,0,488,489,5,6,0,0,489,33,1,0,0,0,490,491,5,17,0,0,491,495,
        7,0,0,0,492,494,3,2,1,0,493,492,1,0,0,0,494,497,1,0,0,0,495,493,
        1,0,0,0,495,496,1,0,0,0,496,35,1,0,0,0,497,495,1,0,0,0,498,499,5,
        16,0,0,499,503,7,0,0,0,500,502,3,2,1,0,501,500,1,0,0,0,502,505,1,
        0,0,0,503,501,1,0,0,0,503,504,1,0,0,0,504,37,1,0,0,0,505,503,1,0,
        0,0,506,508,5,11,0,0,507,506,1,0,0,0,507,508,1,0,0,0,508,509,1,0,
        0,0,509,513,5,25,0,0,510,512,5,33,0,0,511,510,1,0,0,0,512,515,1,
        0,0,0,513,511,1,0,0,0,513,514,1,0,0,0,514,516,1,0,0,0,515,513,1,
        0,0,0,516,517,5,27,0,0,517,519,5,7,0,0,518,520,5,28,0,0,519,518,
        1,0,0,0,519,520,1,0,0,0,520,521,1,0,0,0,521,522,5,8,0,0,522,523,
        5,47,0,0,523,529,5,5,0,0,524,525,3,76,38,0,525,526,5,2,0,0,526,528,
        1,0,0,0,527,524,1,0,0,0,528,531,1,0,0,0,529,527,1,0,0,0,529,530,
        1,0,0,0,530,532,1,0,0,0,531,529,1,0,0,0,532,533,3,76,38,0,533,534,
        5,6,0,0,534,550,1,0,0,0,535,537,5,11,0,0,536,535,1,0,0,0,536,537,
        1,0,0,0,537,538,1,0,0,0,538,542,5,25,0,0,539,541,5,33,0,0,540,539,
        1,0,0,0,541,544,1,0,0,0,542,540,1,0,0,0,542,543,1,0,0,0,543,545,
        1,0,0,0,544,542,1,0,0,0,545,546,5,27,0,0,546,547,5,7,0,0,547,548,
        5,28,0,0,548,550,5,8,0,0,549,507,1,0,0,0,549,536,1,0,0,0,550,39,
        1,0,0,0,551,552,5,24,0,0,552,553,5,38,0,0,553,554,5,27,0,0,554,555,
        5,9,0,0,555,556,5,40,0,0,556,41,1,0,0,0,557,558,5,12,0,0,558,559,
        5,3,0,0,559,560,3,52,26,0,560,561,5,4,0,0,561,563,3,32,16,0,562,
        564,3,44,22,0,563,562,1,0,0,0,563,564,1,0,0,0,564,43,1,0,0,0,565,
        566,5,13,0,0,566,567,3,32,16,0,567,45,1,0,0,0,568,569,5,15,0,0,569,
        570,5,3,0,0,570,571,3,52,26,0,571,572,5,4,0,0,572,573,3,32,16,0,
        573,47,1,0,0,0,574,575,5,14,0,0,575,576,5,3,0,0,576,577,3,50,25,
        0,577,578,5,1,0,0,578,579,3,52,26,0,579,580,5,1,0,0,580,581,3,54,
        27,0,581,582,5,4,0,0,582,583,3,32,16,0,583,49,1,0,0,0,584,585,5,
        25,0,0,585,586,3,64,32,0,586,587,5,47,0,0,587,588,3,68,34,0,588,
        591,1,0,0,0,589,591,3,58,29,0,590,584,1,0,0,0,590,589,1,0,0,0,591,
        51,1,0,0,0,592,593,3,70,35,0,593,594,7,1,0,0,594,595,3,72,36,0,595,
        606,1,0,0,0,596,597,3,70,35,0,597,598,7,2,0,0,598,599,3,72,36,0,
        599,606,1,0,0,0,600,601,3,68,34,0,601,602,7,3,0,0,602,603,3,70,35,
        0,603,606,1,0,0,0,604,606,3,68,34,0,605,592,1,0,0,0,605,596,1,0,
        0,0,605,600,1,0,0,0,605,604,1,0,0,0,606,53,1,0,0,0,607,608,5,49,
        0,0,608,618,3,66,33,0,609,610,5,50,0,0,610,618,3,66,33,0,611,612,
        3,66,33,0,612,613,5,49,0,0,613,618,1,0,0,0,614,615,3,66,33,0,615,
        616,5,50,0,0,616,618,1,0,0,0,617,607,1,0,0,0,617,609,1,0,0,0,617,
        611,1,0,0,0,617,614,1,0,0,0,618,55,1,0,0,0,619,620,3,64,32,0,620,
        621,5,47,0,0,621,622,3,68,34,0,622,625,1,0,0,0,623,625,3,64,32,0,
        624,619,1,0,0,0,624,623,1,0,0,0,625,57,1,0,0,0,626,627,3,66,33,0,
        627,628,5,47,0,0,628,629,3,68,34,0,629,639,1,0,0,0,630,631,3,62,
        31,0,631,632,5,47,0,0,632,633,3,68,34,0,633,639,1,0,0,0,634,635,
        3,60,30,0,635,636,5,47,0,0,636,637,3,68,34,0,637,639,1,0,0,0,638,
        626,1,0,0,0,638,630,1,0,0,0,638,634,1,0,0,0,639,59,1,0,0,0,640,641,
        3,64,32,0,641,642,5,7,0,0,642,643,5,28,0,0,643,644,5,8,0,0,644,61,
        1,0,0,0,645,646,5,33,0,0,646,650,3,62,31,0,647,648,5,33,0,0,648,
        650,3,66,33,0,649,645,1,0,0,0,649,647,1,0,0,0,650,63,1,0,0,0,651,
        653,5,33,0,0,652,651,1,0,0,0,653,656,1,0,0,0,654,652,1,0,0,0,654,
        655,1,0,0,0,655,657,1,0,0,0,656,654,1,0,0,0,657,658,5,27,0,0,658,
        65,1,0,0,0,659,660,5,27,0,0,660,67,1,0,0,0,661,662,6,34,-1,0,662,
        663,3,70,35,0,663,675,1,0,0,0,664,665,10,3,0,0,665,666,5,36,0,0,
        666,674,3,70,35,0,667,668,10,2,0,0,668,669,5,37,0,0,669,674,3,70,
        35,0,670,671,10,1,0,0,671,672,7,3,0,0,672,674,3,70,35,0,673,664,
        1,0,0,0,673,667,1,0,0,0,673,670,1,0,0,0,674,677,1,0,0,0,675,673,
        1,0,0,0,675,676,1,0,0,0,676,69,1,0,0,0,677,675,1,0,0,0,678,679,6,
        35,-1,0,679,683,3,72,36,0,680,681,5,46,0,0,681,683,3,72,36,0,682,
        678,1,0,0,0,682,680,1,0,0,0,683,697,1,0,0,0,684,685,10,5,0,0,685,
        686,7,4,0,0,686,696,3,72,36,0,687,688,10,4,0,0,688,689,7,2,0,0,689,
        696,3,72,36,0,690,691,10,3,0,0,691,692,7,1,0,0,692,696,3,72,36,0,
        693,694,10,1,0,0,694,696,7,5,0,0,695,684,1,0,0,0,695,687,1,0,0,0,
        695,690,1,0,0,0,695,693,1,0,0,0,696,699,1,0,0,0,697,695,1,0,0,0,
        697,698,1,0,0,0,698,71,1,0,0,0,699,697,1,0,0,0,700,708,3,74,37,0,
        701,702,5,37,0,0,702,708,3,72,36,0,703,704,5,36,0,0,704,708,3,72,
        36,0,705,706,7,5,0,0,706,708,3,72,36,0,707,700,1,0,0,0,707,701,1,
        0,0,0,707,703,1,0,0,0,707,705,1,0,0,0,708,73,1,0,0,0,709,723,3,66,
        33,0,710,723,3,76,38,0,711,712,5,48,0,0,712,723,3,66,33,0,713,723,
        3,62,31,0,714,715,5,3,0,0,715,716,3,68,34,0,716,717,5,4,0,0,717,
        723,1,0,0,0,718,719,5,10,0,0,719,723,3,74,37,0,720,723,3,26,13,0,
        721,723,3,60,30,0,722,709,1,0,0,0,722,710,1,0,0,0,722,711,1,0,0,
        0,722,713,1,0,0,0,722,714,1,0,0,0,722,718,1,0,0,0,722,720,1,0,0,
        0,722,721,1,0,0,0,723,75,1,0,0,0,724,725,7,6,0,0,725,77,1,0,0,0,
        105,81,89,93,99,102,104,106,115,118,124,127,133,136,142,145,148,
        151,159,169,176,184,188,191,199,205,209,216,220,232,239,243,247,
        252,258,261,267,271,276,278,281,285,290,296,302,306,311,317,326,
        333,338,347,350,356,359,366,370,376,380,386,390,396,399,402,404,
        411,416,418,426,429,435,438,445,449,455,459,465,469,475,478,483,
        485,495,503,507,513,519,529,536,542,549,563,590,605,617,624,638,
        649,654,673,675,682,695,697,707,722
    ]

class MathParser ( Parser ):

    grammarFileName = "Math.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "','", "'('", "')'", "'{'", "'}'", 
                     "'['", "']'", "'.h'", "<INVALID>", "'const'", "'if'", 
                     "'else'", "'for'", "'while'", "'break'", "'continue'", 
                     "'switch'", "'case'", "'default'", "'printf'", "'return'", 
                     "'scanf'", "'#include'", "<INVALID>", "'void'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'*'", "'/'", "'%'", "'+'", "'-'", "'<'", 
                     "'<='", "'>'", "'>='", "'=='", "'!='", "'||'", "'&&'", 
                     "'!'", "'='", "'&'", "'++'", "'--'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "CAST", "CONST", "IF", "ELSE", 
                      "FOR", "WHILE", "BREAK", "CONTINUE", "SWITCH", "CASE", 
                      "DEFAULT", "PRINTF", "RETURN", "SCANF", "INCLUDE", 
                      "TYPE", "VOID", "VAR_NAME", "INT", "FLOAT", "CHAR", 
                      "SCANF_STRING", "STRING", "STR", "DIV", "MOD", "SUM", 
                      "DIF", "LT", "LEQ", "GT", "GEQ", "EQ", "NEQ", "OR_OP", 
                      "AND_OP", "NOT_OP", "ASSIGN", "ADDR", "INCR", "DECR", 
                      "SP", "NEWLINE", "WS", "UNICODE_WS", "LN", "DELIM", 
                      "COMMENT", "LCOMMENT" ]

    RULE_math = 0
    RULE_instr = 1
    RULE_declr = 2
    RULE_printf = 3
    RULE_printf_arg = 4
    RULE_scanf = 5
    RULE_scanf_arg = 6
    RULE_param_list = 7
    RULE_param_declr = 8
    RULE_func_defn = 9
    RULE_func_decl = 10
    RULE_arg_list = 11
    RULE_func_arg = 12
    RULE_func_call = 13
    RULE_func_scope = 14
    RULE_return_instr = 15
    RULE_scope = 16
    RULE_cont_instr = 17
    RULE_break_instr = 18
    RULE_array_decl = 19
    RULE_incl_stat = 20
    RULE_if_cond = 21
    RULE_else_cond = 22
    RULE_while_loop = 23
    RULE_for_loop = 24
    RULE_init = 25
    RULE_cond = 26
    RULE_incr = 27
    RULE_var_decl = 28
    RULE_assign = 29
    RULE_array_el = 30
    RULE_deref = 31
    RULE_lvar = 32
    RULE_rvar = 33
    RULE_expr = 34
    RULE_term = 35
    RULE_factor = 36
    RULE_primary = 37
    RULE_rtype = 38

    ruleNames =  [ "math", "instr", "declr", "printf", "printf_arg", "scanf", 
                   "scanf_arg", "param_list", "param_declr", "func_defn", 
                   "func_decl", "arg_list", "func_arg", "func_call", "func_scope", 
                   "return_instr", "scope", "cont_instr", "break_instr", 
                   "array_decl", "incl_stat", "if_cond", "else_cond", "while_loop", 
                   "for_loop", "init", "cond", "incr", "var_decl", "assign", 
                   "array_el", "deref", "lvar", "rvar", "expr", "term", 
                   "factor", "primary", "rtype" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    CAST=10
    CONST=11
    IF=12
    ELSE=13
    FOR=14
    WHILE=15
    BREAK=16
    CONTINUE=17
    SWITCH=18
    CASE=19
    DEFAULT=20
    PRINTF=21
    RETURN=22
    SCANF=23
    INCLUDE=24
    TYPE=25
    VOID=26
    VAR_NAME=27
    INT=28
    FLOAT=29
    CHAR=30
    SCANF_STRING=31
    STRING=32
    STR=33
    DIV=34
    MOD=35
    SUM=36
    DIF=37
    LT=38
    LEQ=39
    GT=40
    GEQ=41
    EQ=42
    NEQ=43
    OR_OP=44
    AND_OP=45
    NOT_OP=46
    ASSIGN=47
    ADDR=48
    INCR=49
    DECR=50
    SP=51
    NEWLINE=52
    WS=53
    UNICODE_WS=54
    LN=55
    DELIM=56
    COMMENT=57
    LCOMMENT=58

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class MathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(MathParser.EOF, 0)

        def incl_stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Incl_statContext)
            else:
                return self.getTypedRuleContext(MathParser.Incl_statContext,i)


        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.InstrContext)
            else:
                return self.getTypedRuleContext(MathParser.InstrContext,i)


        def func_defn(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Func_defnContext)
            else:
                return self.getTypedRuleContext(MathParser.Func_defnContext,i)


        def func_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Func_declContext)
            else:
                return self.getTypedRuleContext(MathParser.Func_declContext,i)


        def DELIM(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.DELIM)
            else:
                return self.getToken(MathParser.DELIM, i)

        def getRuleIndex(self):
            return MathParser.RULE_math

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMath" ):
                listener.enterMath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMath" ):
                listener.exitMath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMath" ):
                return visitor.visitMath(self)
            else:
                return visitor.visitChildren(self)




    def math(self):

        localctx = MathParser.MathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_math)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 81
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 78
                self.incl_stat()
                self.state = 83
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 106
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 2040910443449384) != 0:
                self.state = 104
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
                if la_ == 1:
                    self.state = 84
                    self.instr()
                    pass

                elif la_ == 2:
                    self.state = 85
                    self.func_defn()
                    self.state = 93
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [-1, 1, 3, 5, 10, 11, 25, 26, 27, 28, 29, 30, 33, 36, 37, 46, 48, 49, 50]:
                        self.state = 89
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 86
                            self.match(MathParser.T__0)
                            self.state = 91
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [56]:
                        self.state = 92
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 3:
                    self.state = 95
                    self.func_decl()
                    self.state = 102
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 97 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 96
                            self.match(MathParser.T__0)
                            self.state = 99 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [56]:
                        self.state = 101
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass


                self.state = 108
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 109
            self.match(MathParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declr(self):
            return self.getTypedRuleContext(MathParser.DeclrContext,0)


        def DELIM(self):
            return self.getToken(MathParser.DELIM, 0)

        def array_decl(self):
            return self.getTypedRuleContext(MathParser.Array_declContext,0)


        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def assign(self):
            return self.getTypedRuleContext(MathParser.AssignContext,0)


        def scope(self):
            return self.getTypedRuleContext(MathParser.ScopeContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstr" ):
                listener.enterInstr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstr" ):
                listener.exitInstr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstr" ):
                return visitor.visitInstr(self)
            else:
                return visitor.visitChildren(self)




    def instr(self):

        localctx = MathParser.InstrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_instr)
        self._la = 0 # Token type
        try:
            self.state = 148
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 111
                self.declr()
                self.state = 118
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1]:
                    self.state = 113 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 112
                        self.match(MathParser.T__0)
                        self.state = 115 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1):
                            break

                    pass
                elif token in [56]:
                    self.state = 117
                    self.match(MathParser.DELIM)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 120
                self.array_decl()
                self.state = 127
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1]:
                    self.state = 122 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 121
                        self.match(MathParser.T__0)
                        self.state = 124 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1):
                            break

                    pass
                elif token in [56]:
                    self.state = 126
                    self.match(MathParser.DELIM)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 129
                self.expr(0)
                self.state = 136
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1]:
                    self.state = 131 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 130
                        self.match(MathParser.T__0)
                        self.state = 133 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1):
                            break

                    pass
                elif token in [56]:
                    self.state = 135
                    self.match(MathParser.DELIM)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 138
                self.assign()
                self.state = 145
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1]:
                    self.state = 140 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 139
                        self.match(MathParser.T__0)
                        self.state = 142 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1):
                            break

                    pass
                elif token in [56]:
                    self.state = 144
                    self.match(MathParser.DELIM)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 147
                self.scope()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(MathParser.TYPE, 0)

        def var_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Var_declContext)
            else:
                return self.getTypedRuleContext(MathParser.Var_declContext,i)


        def CONST(self):
            return self.getToken(MathParser.CONST, 0)

        def getRuleIndex(self):
            return MathParser.RULE_declr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclr" ):
                listener.enterDeclr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclr" ):
                listener.exitDeclr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclr" ):
                return visitor.visitDeclr(self)
            else:
                return visitor.visitChildren(self)




    def declr(self):

        localctx = MathParser.DeclrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_declr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 151
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 150
                self.match(MathParser.CONST)


            self.state = 153
            self.match(MathParser.TYPE)
            self.state = 159
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 154
                    self.var_decl()
                    self.state = 155
                    self.match(MathParser.T__1) 
                self.state = 161
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

            self.state = 162
            self.var_decl()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrintfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.print_val = None # Token
            self.format_string = None # Token
            self._printf_arg = None # Printf_argContext
            self.vars_ = list() # of Printf_argContexts

        def PRINTF(self):
            return self.getToken(MathParser.PRINTF, 0)

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def rtype(self):
            return self.getTypedRuleContext(MathParser.RtypeContext,0)


        def STRING(self):
            return self.getToken(MathParser.STRING, 0)

        def SCANF_STRING(self):
            return self.getToken(MathParser.SCANF_STRING, 0)

        def printf_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Printf_argContext)
            else:
                return self.getTypedRuleContext(MathParser.Printf_argContext,i)


        def getRuleIndex(self):
            return MathParser.RULE_printf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintf" ):
                listener.enterPrintf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintf" ):
                listener.exitPrintf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrintf" ):
                return visitor.visitPrintf(self)
            else:
                return visitor.visitChildren(self)




    def printf(self):

        localctx = MathParser.PrintfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_printf)
        self._la = 0 # Token type
        try:
            self.state = 191
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 164
                self.match(MathParser.PRINTF)
                self.state = 165
                self.match(MathParser.T__2)
                self.state = 169
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [27]:
                    self.state = 166
                    self.rvar()
                    pass
                elif token in [28, 29, 30]:
                    self.state = 167
                    self.rtype()
                    pass
                elif token in [32]:
                    self.state = 168
                    localctx.print_val = self.match(MathParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 171
                self.match(MathParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 172
                self.match(MathParser.PRINTF)
                self.state = 173
                self.match(MathParser.T__2)
                self.state = 176
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [31]:
                    self.state = 174
                    localctx.format_string = self.match(MathParser.SCANF_STRING)
                    pass
                elif token in [32]:
                    self.state = 175
                    localctx.format_string = self.match(MathParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 188
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 178
                    self.match(MathParser.T__1)
                    self.state = 184
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,20,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 179
                            localctx._printf_arg = self.printf_arg()
                            localctx.vars_.append(localctx._printf_arg)
                            self.state = 180
                            self.match(MathParser.T__1) 
                        self.state = 186
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

                    self.state = 187
                    localctx._printf_arg = self.printf_arg()
                    localctx.vars_.append(localctx._printf_arg)


                self.state = 190
                self.match(MathParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Printf_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def rtype(self):
            return self.getTypedRuleContext(MathParser.RtypeContext,0)


        def array_el(self):
            return self.getTypedRuleContext(MathParser.Array_elContext,0)


        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def STRING(self):
            return self.getToken(MathParser.STRING, 0)

        def getRuleIndex(self):
            return MathParser.RULE_printf_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintf_arg" ):
                listener.enterPrintf_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintf_arg" ):
                listener.exitPrintf_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrintf_arg" ):
                return visitor.visitPrintf_arg(self)
            else:
                return visitor.visitChildren(self)




    def printf_arg(self):

        localctx = MathParser.Printf_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_printf_arg)
        try:
            self.state = 199
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 193
                self.rvar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 194
                self.rtype()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 195
                self.array_el()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 196
                self.deref()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 197
                self.expr(0)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 198
                self.match(MathParser.STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScanfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.format_string = None # Token
            self._scanf_arg = None # Scanf_argContext
            self.vars_ = list() # of Scanf_argContexts

        def SCANF(self):
            return self.getToken(MathParser.SCANF, 0)

        def scanf_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Scanf_argContext)
            else:
                return self.getTypedRuleContext(MathParser.Scanf_argContext,i)


        def SCANF_STRING(self):
            return self.getToken(MathParser.SCANF_STRING, 0)

        def STRING(self):
            return self.getToken(MathParser.STRING, 0)

        def ADDR(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.ADDR)
            else:
                return self.getToken(MathParser.ADDR, i)

        def getRuleIndex(self):
            return MathParser.RULE_scanf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScanf" ):
                listener.enterScanf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScanf" ):
                listener.exitScanf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScanf" ):
                return visitor.visitScanf(self)
            else:
                return visitor.visitChildren(self)




    def scanf(self):

        localctx = MathParser.ScanfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_scanf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 201
            self.match(MathParser.SCANF)
            self.state = 202
            self.match(MathParser.T__2)
            self.state = 205
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [31]:
                self.state = 203
                localctx.format_string = self.match(MathParser.SCANF_STRING)
                pass
            elif token in [32]:
                self.state = 204
                localctx.format_string = self.match(MathParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 207
            self.match(MathParser.T__1)
            self.state = 216
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 209
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                    if la_ == 1:
                        self.state = 208
                        self.match(MathParser.ADDR)


                    self.state = 211
                    localctx._scanf_arg = self.scanf_arg()
                    localctx.vars_.append(localctx._scanf_arg)
                    self.state = 212
                    self.match(MathParser.T__1) 
                self.state = 218
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

            self.state = 220
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 219
                self.match(MathParser.ADDR)


            self.state = 222
            localctx._scanf_arg = self.scanf_arg()
            localctx.vars_.append(localctx._scanf_arg)
            self.state = 223
            self.match(MathParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Scanf_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def array_el(self):
            return self.getTypedRuleContext(MathParser.Array_elContext,0)


        def ADDR(self):
            return self.getToken(MathParser.ADDR, 0)

        def getRuleIndex(self):
            return MathParser.RULE_scanf_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScanf_arg" ):
                listener.enterScanf_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScanf_arg" ):
                listener.exitScanf_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScanf_arg" ):
                return visitor.visitScanf_arg(self)
            else:
                return visitor.visitChildren(self)




    def scanf_arg(self):

        localctx = MathParser.Scanf_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_scanf_arg)
        try:
            self.state = 232
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 225
                self.rvar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 226
                self.deref()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 227
                self.array_el()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 228
                self.match(MathParser.ADDR)
                self.state = 229
                self.rvar()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 230
                self.match(MathParser.ADDR)
                self.state = 231
                self.deref()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._param_declr = None # Param_declrContext
            self.params = list() # of Param_declrContexts

        def param_declr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Param_declrContext)
            else:
                return self.getTypedRuleContext(MathParser.Param_declrContext,i)


        def getRuleIndex(self):
            return MathParser.RULE_param_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_list" ):
                listener.enterParam_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_list" ):
                listener.exitParam_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_list" ):
                return visitor.visitParam_list(self)
            else:
                return visitor.visitChildren(self)




    def param_list(self):

        localctx = MathParser.Param_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_param_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 234
            localctx._param_declr = self.param_declr()
            localctx.params.append(localctx._param_declr)
            self.state = 239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2:
                self.state = 235
                self.match(MathParser.T__1)
                self.state = 236
                localctx._param_declr = self.param_declr()
                localctx.params.append(localctx._param_declr)
                self.state = 241
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_declrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.const = None # Token
            self.type_ = None # Token
            self.reference = None # Token
            self._STR = None # Token
            self.ptr = list() # of Tokens
            self.var = None # Token
            self.default = None # ExprContext

        def TYPE(self):
            return self.getToken(MathParser.TYPE, 0)

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def ASSIGN(self):
            return self.getToken(MathParser.ASSIGN, 0)

        def CONST(self):
            return self.getToken(MathParser.CONST, 0)

        def ADDR(self):
            return self.getToken(MathParser.ADDR, 0)

        def STR(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.STR)
            else:
                return self.getToken(MathParser.STR, i)

        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_param_declr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_declr" ):
                listener.enterParam_declr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_declr" ):
                listener.exitParam_declr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_declr" ):
                return visitor.visitParam_declr(self)
            else:
                return visitor.visitChildren(self)




    def param_declr(self):

        localctx = MathParser.Param_declrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_param_declr)
        self._la = 0 # Token type
        try:
            self.state = 278
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 243
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 242
                    localctx.const = self.match(MathParser.CONST)


                self.state = 245
                localctx.type_ = self.match(MathParser.TYPE)
                self.state = 247
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==48:
                    self.state = 246
                    localctx.reference = self.match(MathParser.ADDR)


                self.state = 252
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==33:
                    self.state = 249
                    localctx._STR = self.match(MathParser.STR)
                    localctx.ptr.append(localctx._STR)
                    self.state = 254
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 255
                localctx.var = self.match(MathParser.VAR_NAME)
                self.state = 258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47:
                    self.state = 256
                    self.match(MathParser.ASSIGN)
                    self.state = 257
                    localctx.default = self.expr(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 260
                    localctx.const = self.match(MathParser.CONST)


                self.state = 263
                localctx.type_ = self.match(MathParser.TYPE)
                self.state = 267
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==33:
                    self.state = 264
                    localctx._STR = self.match(MathParser.STR)
                    localctx.ptr.append(localctx._STR)
                    self.state = 269
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 271
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==48:
                    self.state = 270
                    localctx.reference = self.match(MathParser.ADDR)


                self.state = 273
                localctx.var = self.match(MathParser.VAR_NAME)
                self.state = 276
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47:
                    self.state = 274
                    self.match(MathParser.ASSIGN)
                    self.state = 275
                    localctx.default = self.expr(0)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_defnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.const = None # Token
            self.type_ = None # Token
            self._STR = None # Token
            self.ptr = list() # of Tokens
            self.name = None # Token
            self.params = None # Param_listContext

        def func_scope(self):
            return self.getTypedRuleContext(MathParser.Func_scopeContext,0)


        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def TYPE(self):
            return self.getToken(MathParser.TYPE, 0)

        def VOID(self):
            return self.getToken(MathParser.VOID, 0)

        def CONST(self):
            return self.getToken(MathParser.CONST, 0)

        def STR(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.STR)
            else:
                return self.getToken(MathParser.STR, i)

        def param_list(self):
            return self.getTypedRuleContext(MathParser.Param_listContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_func_defn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_defn" ):
                listener.enterFunc_defn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_defn" ):
                listener.exitFunc_defn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_defn" ):
                return visitor.visitFunc_defn(self)
            else:
                return visitor.visitChildren(self)




    def func_defn(self):

        localctx = MathParser.Func_defnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_func_defn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 280
                localctx.const = self.match(MathParser.CONST)


            self.state = 285
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25]:
                self.state = 283
                localctx.type_ = self.match(MathParser.TYPE)
                pass
            elif token in [26]:
                self.state = 284
                localctx.type_ = self.match(MathParser.VOID)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==33:
                self.state = 287
                localctx._STR = self.match(MathParser.STR)
                localctx.ptr.append(localctx._STR)
                self.state = 292
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 293
            localctx.name = self.match(MathParser.VAR_NAME)
            self.state = 294
            self.match(MathParser.T__2)
            self.state = 296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11 or _la==25:
                self.state = 295
                localctx.params = self.param_list()


            self.state = 298
            self.match(MathParser.T__3)
            self.state = 299
            self.func_scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.const = None # Token
            self.type_ = None # Token
            self._STR = None # Token
            self.ptr = list() # of Tokens
            self.name = None # Token
            self.params = None # Param_listContext

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def TYPE(self):
            return self.getToken(MathParser.TYPE, 0)

        def VOID(self):
            return self.getToken(MathParser.VOID, 0)

        def CONST(self):
            return self.getToken(MathParser.CONST, 0)

        def STR(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.STR)
            else:
                return self.getToken(MathParser.STR, i)

        def param_list(self):
            return self.getTypedRuleContext(MathParser.Param_listContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_func_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_decl" ):
                listener.enterFunc_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_decl" ):
                listener.exitFunc_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_decl" ):
                return visitor.visitFunc_decl(self)
            else:
                return visitor.visitChildren(self)




    def func_decl(self):

        localctx = MathParser.Func_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_func_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 301
                localctx.const = self.match(MathParser.CONST)


            self.state = 306
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25]:
                self.state = 304
                localctx.type_ = self.match(MathParser.TYPE)
                pass
            elif token in [26]:
                self.state = 305
                localctx.type_ = self.match(MathParser.VOID)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==33:
                self.state = 308
                localctx._STR = self.match(MathParser.STR)
                localctx.ptr.append(localctx._STR)
                self.state = 313
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 314
            localctx.name = self.match(MathParser.VAR_NAME)
            self.state = 315
            self.match(MathParser.T__2)
            self.state = 317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11 or _la==25:
                self.state = 316
                localctx.params = self.param_list()


            self.state = 319
            self.match(MathParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arg_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._func_arg = None # Func_argContext
            self.args = list() # of Func_argContexts

        def func_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Func_argContext)
            else:
                return self.getTypedRuleContext(MathParser.Func_argContext,i)


        def getRuleIndex(self):
            return MathParser.RULE_arg_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArg_list" ):
                listener.enterArg_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArg_list" ):
                listener.exitArg_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArg_list" ):
                return visitor.visitArg_list(self)
            else:
                return visitor.visitChildren(self)




    def arg_list(self):

        localctx = MathParser.Arg_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_arg_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 321
            localctx._func_arg = self.func_arg()
            localctx.args.append(localctx._func_arg)
            self.state = 326
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 322
                    self.match(MathParser.T__1)
                    self.state = 323
                    localctx._func_arg = self.func_arg()
                    localctx.args.append(localctx._func_arg) 
                self.state = 328
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def func_call(self):
            return self.getTypedRuleContext(MathParser.Func_callContext,0)


        def rtype(self):
            return self.getTypedRuleContext(MathParser.RtypeContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_func_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_arg" ):
                listener.enterFunc_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_arg" ):
                listener.exitFunc_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_arg" ):
                return visitor.visitFunc_arg(self)
            else:
                return visitor.visitChildren(self)




    def func_arg(self):

        localctx = MathParser.Func_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_func_arg)
        try:
            self.state = 333
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 329
                self.rvar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 330
                self.deref()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 331
                self.func_call()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 332
                self.rtype()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self.args = None # Arg_listContext

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def arg_list(self):
            return self.getTypedRuleContext(MathParser.Arg_listContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_call" ):
                listener.enterFunc_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_call" ):
                listener.exitFunc_call(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_call" ):
                return visitor.visitFunc_call(self)
            else:
                return visitor.visitChildren(self)




    def func_call(self):

        localctx = MathParser.Func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_func_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 335
            localctx.name = self.match(MathParser.VAR_NAME)
            self.state = 336
            self.match(MathParser.T__2)
            self.state = 338
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 10603200512) != 0:
                self.state = 337
                localctx.args = self.arg_list()


            self.state = 340
            self.match(MathParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_scopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def printf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.PrintfContext)
            else:
                return self.getTypedRuleContext(MathParser.PrintfContext,i)


        def scanf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.ScanfContext)
            else:
                return self.getTypedRuleContext(MathParser.ScanfContext,i)


        def return_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Return_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Return_instrContext,i)


        def if_cond(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.If_condContext)
            else:
                return self.getTypedRuleContext(MathParser.If_condContext,i)


        def while_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.While_loopContext)
            else:
                return self.getTypedRuleContext(MathParser.While_loopContext,i)


        def for_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.For_loopContext)
            else:
                return self.getTypedRuleContext(MathParser.For_loopContext,i)


        def assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.AssignContext)
            else:
                return self.getTypedRuleContext(MathParser.AssignContext,i)


        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.InstrContext)
            else:
                return self.getTypedRuleContext(MathParser.InstrContext,i)


        def DELIM(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.DELIM)
            else:
                return self.getToken(MathParser.DELIM, i)

        def getRuleIndex(self):
            return MathParser.RULE_func_scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_scope" ):
                listener.enterFunc_scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_scope" ):
                listener.exitFunc_scope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_scope" ):
                return visitor.visitFunc_scope(self)
            else:
                return visitor.visitChildren(self)




    def func_scope(self):

        localctx = MathParser.Func_scopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_func_scope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 342
            self.match(MathParser.T__4)
            self.state = 404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 2040910391073832) != 0:
                self.state = 402
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
                if la_ == 1:
                    self.state = 343
                    self.printf()
                    self.state = 350
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 345 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 344
                            self.match(MathParser.T__0)
                            self.state = 347 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [56]:
                        self.state = 349
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 2:
                    self.state = 352
                    self.scanf()
                    self.state = 359
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 354 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 353
                            self.match(MathParser.T__0)
                            self.state = 356 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [56]:
                        self.state = 358
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 3:
                    self.state = 361
                    self.return_instr()
                    pass

                elif la_ == 4:
                    self.state = 362
                    self.if_cond()
                    self.state = 370
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 10, 11, 12, 14, 15, 21, 22, 23, 25, 27, 28, 29, 30, 33, 36, 37, 46, 48, 49, 50]:
                        self.state = 366
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 363
                            self.match(MathParser.T__0)
                            self.state = 368
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [56]:
                        self.state = 369
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 5:
                    self.state = 372
                    self.while_loop()
                    self.state = 380
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 10, 11, 12, 14, 15, 21, 22, 23, 25, 27, 28, 29, 30, 33, 36, 37, 46, 48, 49, 50]:
                        self.state = 376
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 373
                            self.match(MathParser.T__0)
                            self.state = 378
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [56]:
                        self.state = 379
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 6:
                    self.state = 382
                    self.for_loop()
                    self.state = 390
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 10, 11, 12, 14, 15, 21, 22, 23, 25, 27, 28, 29, 30, 33, 36, 37, 46, 48, 49, 50]:
                        self.state = 386
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 383
                            self.match(MathParser.T__0)
                            self.state = 388
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [56]:
                        self.state = 389
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 7:
                    self.state = 392
                    self.assign()
                    self.state = 399
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 394 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 393
                            self.match(MathParser.T__0)
                            self.state = 396 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [56]:
                        self.state = 398
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 8:
                    self.state = 401
                    self.instr()
                    pass


                self.state = 406
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 407
            self.match(MathParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ret_val = None # ExprContext

        def RETURN(self):
            return self.getToken(MathParser.RETURN, 0)

        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.InstrContext)
            else:
                return self.getTypedRuleContext(MathParser.InstrContext,i)


        def return_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Return_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Return_instrContext,i)


        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_return_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_instr" ):
                listener.enterReturn_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_instr" ):
                listener.exitReturn_instr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_instr" ):
                return visitor.visitReturn_instr(self)
            else:
                return visitor.visitChildren(self)




    def return_instr(self):

        localctx = MathParser.Return_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_return_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 409
            self.match(MathParser.RETURN)
            self.state = 411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 2040910342784008) != 0:
                self.state = 410
                localctx.ret_val = self.expr(0)


            self.state = 413
            self.match(MathParser.T__0)
            self.state = 418
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 416
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [3, 5, 10, 11, 25, 27, 28, 29, 30, 33, 36, 37, 46, 48, 49, 50]:
                        self.state = 414
                        self.instr()
                        pass
                    elif token in [22]:
                        self.state = 415
                        self.return_instr()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 420
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def printf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.PrintfContext)
            else:
                return self.getTypedRuleContext(MathParser.PrintfContext,i)


        def scanf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.ScanfContext)
            else:
                return self.getTypedRuleContext(MathParser.ScanfContext,i)


        def return_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Return_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Return_instrContext,i)


        def if_cond(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.If_condContext)
            else:
                return self.getTypedRuleContext(MathParser.If_condContext,i)


        def while_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.While_loopContext)
            else:
                return self.getTypedRuleContext(MathParser.While_loopContext,i)


        def for_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.For_loopContext)
            else:
                return self.getTypedRuleContext(MathParser.For_loopContext,i)


        def assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.AssignContext)
            else:
                return self.getTypedRuleContext(MathParser.AssignContext,i)


        def break_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Break_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Break_instrContext,i)


        def cont_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Cont_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Cont_instrContext,i)


        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.InstrContext)
            else:
                return self.getTypedRuleContext(MathParser.InstrContext,i)


        def DELIM(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.DELIM)
            else:
                return self.getToken(MathParser.DELIM, i)

        def getRuleIndex(self):
            return MathParser.RULE_scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScope" ):
                listener.enterScope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScope" ):
                listener.exitScope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScope" ):
                return visitor.visitScope(self)
            else:
                return visitor.visitChildren(self)




    def scope(self):

        localctx = MathParser.ScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_scope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            self.match(MathParser.T__4)
            self.state = 485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 2040910391270440) != 0:
                self.state = 483
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
                if la_ == 1:
                    self.state = 422
                    self.printf()
                    self.state = 429
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 424 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 423
                            self.match(MathParser.T__0)
                            self.state = 426 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [56]:
                        self.state = 428
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 2:
                    self.state = 431
                    self.scanf()
                    self.state = 438
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 433 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 432
                            self.match(MathParser.T__0)
                            self.state = 435 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [56]:
                        self.state = 437
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 3:
                    self.state = 440
                    self.return_instr()
                    pass

                elif la_ == 4:
                    self.state = 441
                    self.if_cond()
                    self.state = 449
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 10, 11, 12, 14, 15, 16, 17, 21, 22, 23, 25, 27, 28, 29, 30, 33, 36, 37, 46, 48, 49, 50]:
                        self.state = 445
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 442
                            self.match(MathParser.T__0)
                            self.state = 447
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [56]:
                        self.state = 448
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 5:
                    self.state = 451
                    self.while_loop()
                    self.state = 459
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 10, 11, 12, 14, 15, 16, 17, 21, 22, 23, 25, 27, 28, 29, 30, 33, 36, 37, 46, 48, 49, 50]:
                        self.state = 455
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 452
                            self.match(MathParser.T__0)
                            self.state = 457
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [56]:
                        self.state = 458
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 6:
                    self.state = 461
                    self.for_loop()
                    self.state = 469
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 10, 11, 12, 14, 15, 16, 17, 21, 22, 23, 25, 27, 28, 29, 30, 33, 36, 37, 46, 48, 49, 50]:
                        self.state = 465
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 462
                            self.match(MathParser.T__0)
                            self.state = 467
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [56]:
                        self.state = 468
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 7:
                    self.state = 471
                    self.assign()
                    self.state = 478
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 473 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 472
                            self.match(MathParser.T__0)
                            self.state = 475 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [56]:
                        self.state = 477
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 8:
                    self.state = 480
                    self.break_instr()
                    pass

                elif la_ == 9:
                    self.state = 481
                    self.cont_instr()
                    pass

                elif la_ == 10:
                    self.state = 482
                    self.instr()
                    pass


                self.state = 487
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 488
            self.match(MathParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cont_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(MathParser.CONTINUE, 0)

        def DELIM(self):
            return self.getToken(MathParser.DELIM, 0)

        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.InstrContext)
            else:
                return self.getTypedRuleContext(MathParser.InstrContext,i)


        def getRuleIndex(self):
            return MathParser.RULE_cont_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCont_instr" ):
                listener.enterCont_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCont_instr" ):
                listener.exitCont_instr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCont_instr" ):
                return visitor.visitCont_instr(self)
            else:
                return visitor.visitChildren(self)




    def cont_instr(self):

        localctx = MathParser.Cont_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_cont_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 490
            self.match(MathParser.CONTINUE)
            self.state = 491
            _la = self._input.LA(1)
            if not(_la==1 or _la==56):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 495
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 492
                    self.instr() 
                self.state = 497
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Break_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(MathParser.BREAK, 0)

        def DELIM(self):
            return self.getToken(MathParser.DELIM, 0)

        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.InstrContext)
            else:
                return self.getTypedRuleContext(MathParser.InstrContext,i)


        def getRuleIndex(self):
            return MathParser.RULE_break_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_instr" ):
                listener.enterBreak_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_instr" ):
                listener.exitBreak_instr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreak_instr" ):
                return visitor.visitBreak_instr(self)
            else:
                return visitor.visitChildren(self)




    def break_instr(self):

        localctx = MathParser.Break_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_break_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 498
            self.match(MathParser.BREAK)
            self.state = 499
            _la = self._input.LA(1)
            if not(_la==1 or _la==56):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 503
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 500
                    self.instr() 
                self.state = 505
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.const = None # Token
            self.type_ = None # Token
            self._STR = None # Token
            self.ptr = list() # of Tokens
            self.name = None # Token
            self.size = None # Token
            self._rtype = None # RtypeContext
            self.values = list() # of RtypeContexts

        def ASSIGN(self):
            return self.getToken(MathParser.ASSIGN, 0)

        def TYPE(self):
            return self.getToken(MathParser.TYPE, 0)

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def rtype(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.RtypeContext)
            else:
                return self.getTypedRuleContext(MathParser.RtypeContext,i)


        def CONST(self):
            return self.getToken(MathParser.CONST, 0)

        def STR(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.STR)
            else:
                return self.getToken(MathParser.STR, i)

        def INT(self):
            return self.getToken(MathParser.INT, 0)

        def getRuleIndex(self):
            return MathParser.RULE_array_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_decl" ):
                listener.enterArray_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_decl" ):
                listener.exitArray_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_decl" ):
                return visitor.visitArray_decl(self)
            else:
                return visitor.visitChildren(self)




    def array_decl(self):

        localctx = MathParser.Array_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_array_decl)
        self._la = 0 # Token type
        try:
            self.state = 549
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 507
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 506
                    localctx.const = self.match(MathParser.CONST)


                self.state = 509
                localctx.type_ = self.match(MathParser.TYPE)
                self.state = 513
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==33:
                    self.state = 510
                    localctx._STR = self.match(MathParser.STR)
                    localctx.ptr.append(localctx._STR)
                    self.state = 515
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 516
                localctx.name = self.match(MathParser.VAR_NAME)
                self.state = 517
                self.match(MathParser.T__6)
                self.state = 519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==28:
                    self.state = 518
                    localctx.size = self.match(MathParser.INT)


                self.state = 521
                self.match(MathParser.T__7)
                self.state = 522
                self.match(MathParser.ASSIGN)
                self.state = 523
                self.match(MathParser.T__4)
                self.state = 529
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 524
                        localctx._rtype = self.rtype()
                        localctx.values.append(localctx._rtype)
                        self.state = 525
                        self.match(MathParser.T__1) 
                    self.state = 531
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

                self.state = 532
                localctx._rtype = self.rtype()
                localctx.values.append(localctx._rtype)
                self.state = 533
                self.match(MathParser.T__5)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 536
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 535
                    localctx.const = self.match(MathParser.CONST)


                self.state = 538
                localctx.type_ = self.match(MathParser.TYPE)
                self.state = 542
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==33:
                    self.state = 539
                    localctx._STR = self.match(MathParser.STR)
                    localctx.ptr.append(localctx._STR)
                    self.state = 544
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 545
                localctx.name = self.match(MathParser.VAR_NAME)
                self.state = 546
                self.match(MathParser.T__6)
                self.state = 547
                localctx.size = self.match(MathParser.INT)
                self.state = 548
                self.match(MathParser.T__7)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Incl_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.library = None # Token

        def INCLUDE(self):
            return self.getToken(MathParser.INCLUDE, 0)

        def LT(self):
            return self.getToken(MathParser.LT, 0)

        def GT(self):
            return self.getToken(MathParser.GT, 0)

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def getRuleIndex(self):
            return MathParser.RULE_incl_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncl_stat" ):
                listener.enterIncl_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncl_stat" ):
                listener.exitIncl_stat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncl_stat" ):
                return visitor.visitIncl_stat(self)
            else:
                return visitor.visitChildren(self)




    def incl_stat(self):

        localctx = MathParser.Incl_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_incl_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self.match(MathParser.INCLUDE)
            self.state = 552
            self.match(MathParser.LT)
            self.state = 553
            localctx.library = self.match(MathParser.VAR_NAME)
            self.state = 554
            self.match(MathParser.T__8)
            self.state = 555
            self.match(MathParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_condContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # CondContext

        def IF(self):
            return self.getToken(MathParser.IF, 0)

        def scope(self):
            return self.getTypedRuleContext(MathParser.ScopeContext,0)


        def cond(self):
            return self.getTypedRuleContext(MathParser.CondContext,0)


        def else_cond(self):
            return self.getTypedRuleContext(MathParser.Else_condContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_if_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_cond" ):
                listener.enterIf_cond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_cond" ):
                listener.exitIf_cond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_cond" ):
                return visitor.visitIf_cond(self)
            else:
                return visitor.visitChildren(self)




    def if_cond(self):

        localctx = MathParser.If_condContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_if_cond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 557
            self.match(MathParser.IF)
            self.state = 558
            self.match(MathParser.T__2)
            self.state = 559
            localctx.condition = self.cond()
            self.state = 560
            self.match(MathParser.T__3)
            self.state = 561
            self.scope()
            self.state = 563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 562
                self.else_cond()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_condContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(MathParser.ELSE, 0)

        def scope(self):
            return self.getTypedRuleContext(MathParser.ScopeContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_else_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_cond" ):
                listener.enterElse_cond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_cond" ):
                listener.exitElse_cond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_cond" ):
                return visitor.visitElse_cond(self)
            else:
                return visitor.visitChildren(self)




    def else_cond(self):

        localctx = MathParser.Else_condContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_else_cond)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565
            self.match(MathParser.ELSE)
            self.state = 566
            self.scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # CondContext

        def WHILE(self):
            return self.getToken(MathParser.WHILE, 0)

        def scope(self):
            return self.getTypedRuleContext(MathParser.ScopeContext,0)


        def cond(self):
            return self.getTypedRuleContext(MathParser.CondContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_while_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_loop" ):
                listener.enterWhile_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_loop" ):
                listener.exitWhile_loop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_loop" ):
                return visitor.visitWhile_loop(self)
            else:
                return visitor.visitChildren(self)




    def while_loop(self):

        localctx = MathParser.While_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_while_loop)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            self.match(MathParser.WHILE)
            self.state = 569
            self.match(MathParser.T__2)
            self.state = 570
            localctx.condition = self.cond()
            self.state = 571
            self.match(MathParser.T__3)
            self.state = 572
            self.scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.initialization = None # InitContext
            self.condition = None # CondContext
            self.increment = None # IncrContext

        def FOR(self):
            return self.getToken(MathParser.FOR, 0)

        def scope(self):
            return self.getTypedRuleContext(MathParser.ScopeContext,0)


        def init(self):
            return self.getTypedRuleContext(MathParser.InitContext,0)


        def cond(self):
            return self.getTypedRuleContext(MathParser.CondContext,0)


        def incr(self):
            return self.getTypedRuleContext(MathParser.IncrContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_for_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_loop" ):
                listener.enterFor_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_loop" ):
                listener.exitFor_loop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_loop" ):
                return visitor.visitFor_loop(self)
            else:
                return visitor.visitChildren(self)




    def for_loop(self):

        localctx = MathParser.For_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_for_loop)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            self.match(MathParser.FOR)
            self.state = 575
            self.match(MathParser.T__2)
            self.state = 576
            localctx.initialization = self.init()
            self.state = 577
            self.match(MathParser.T__0)
            self.state = 578
            localctx.condition = self.cond()
            self.state = 579
            self.match(MathParser.T__0)
            self.state = 580
            localctx.increment = self.incr()
            self.state = 581
            self.match(MathParser.T__3)
            self.state = 582
            self.scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(MathParser.TYPE, 0)

        def lvar(self):
            return self.getTypedRuleContext(MathParser.LvarContext,0)


        def ASSIGN(self):
            return self.getToken(MathParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def assign(self):
            return self.getTypedRuleContext(MathParser.AssignContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_init

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInit" ):
                listener.enterInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInit" ):
                listener.exitInit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInit" ):
                return visitor.visitInit(self)
            else:
                return visitor.visitChildren(self)




    def init(self):

        localctx = MathParser.InitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_init)
        try:
            self.state = 590
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25]:
                self.enterOuterAlt(localctx, 1)
                self.state = 584
                self.match(MathParser.TYPE)
                self.state = 585
                self.lvar()
                self.state = 586
                self.match(MathParser.ASSIGN)
                self.state = 587
                self.expr(0)
                pass
            elif token in [27, 33]:
                self.enterOuterAlt(localctx, 2)
                self.state = 589
                self.assign()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self):
            return self.getTypedRuleContext(MathParser.TermContext,0)


        def factor(self):
            return self.getTypedRuleContext(MathParser.FactorContext,0)


        def GEQ(self):
            return self.getToken(MathParser.GEQ, 0)

        def LEQ(self):
            return self.getToken(MathParser.LEQ, 0)

        def NEQ(self):
            return self.getToken(MathParser.NEQ, 0)

        def GT(self):
            return self.getToken(MathParser.GT, 0)

        def LT(self):
            return self.getToken(MathParser.LT, 0)

        def EQ(self):
            return self.getToken(MathParser.EQ, 0)

        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def AND_OP(self):
            return self.getToken(MathParser.AND_OP, 0)

        def OR_OP(self):
            return self.getToken(MathParser.OR_OP, 0)

        def getRuleIndex(self):
            return MathParser.RULE_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCond" ):
                listener.enterCond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCond" ):
                listener.exitCond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCond" ):
                return visitor.visitCond(self)
            else:
                return visitor.visitChildren(self)




    def cond(self):

        localctx = MathParser.CondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_cond)
        self._la = 0 # Token type
        try:
            self.state = 605
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 592
                self.term(0)
                self.state = 593
                _la = self._input.LA(1)
                if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 11544872091648) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 594
                self.factor()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 596
                self.term(0)
                self.state = 597
                _la = self._input.LA(1)
                if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 5772436045824) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 598
                self.factor()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 600
                self.expr(0)
                self.state = 601
                _la = self._input.LA(1)
                if not(_la==44 or _la==45):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 602
                self.term(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 604
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCR(self):
            return self.getToken(MathParser.INCR, 0)

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def DECR(self):
            return self.getToken(MathParser.DECR, 0)

        def getRuleIndex(self):
            return MathParser.RULE_incr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncr" ):
                listener.enterIncr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncr" ):
                listener.exitIncr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncr" ):
                return visitor.visitIncr(self)
            else:
                return visitor.visitChildren(self)




    def incr(self):

        localctx = MathParser.IncrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_incr)
        try:
            self.state = 617
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 607
                self.match(MathParser.INCR)
                self.state = 608
                self.rvar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 609
                self.match(MathParser.DECR)
                self.state = 610
                self.rvar()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 611
                self.rvar()
                self.state = 612
                self.match(MathParser.INCR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 614
                self.rvar()
                self.state = 615
                self.match(MathParser.DECR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lvar(self):
            return self.getTypedRuleContext(MathParser.LvarContext,0)


        def ASSIGN(self):
            return self.getToken(MathParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_var_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_decl" ):
                listener.enterVar_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_decl" ):
                listener.exitVar_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVar_decl" ):
                return visitor.visitVar_decl(self)
            else:
                return visitor.visitChildren(self)




    def var_decl(self):

        localctx = MathParser.Var_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_var_decl)
        try:
            self.state = 624
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 619
                self.lvar()
                self.state = 620
                self.match(MathParser.ASSIGN)
                self.state = 621
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 623
                self.lvar()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def ASSIGN(self):
            return self.getToken(MathParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def array_el(self):
            return self.getTypedRuleContext(MathParser.Array_elContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign" ):
                listener.enterAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign" ):
                listener.exitAssign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssign" ):
                return visitor.visitAssign(self)
            else:
                return visitor.visitChildren(self)




    def assign(self):

        localctx = MathParser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_assign)
        try:
            self.state = 638
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 626
                self.rvar()
                self.state = 627
                self.match(MathParser.ASSIGN)
                self.state = 628
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 630
                self.deref()
                self.state = 631
                self.match(MathParser.ASSIGN)
                self.state = 632
                self.expr(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 634
                self.array_el()
                self.state = 635
                self.match(MathParser.ASSIGN)
                self.state = 636
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_elContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lvar(self):
            return self.getTypedRuleContext(MathParser.LvarContext,0)


        def INT(self):
            return self.getToken(MathParser.INT, 0)

        def getRuleIndex(self):
            return MathParser.RULE_array_el

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_el" ):
                listener.enterArray_el(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_el" ):
                listener.exitArray_el(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_el" ):
                return visitor.visitArray_el(self)
            else:
                return visitor.visitChildren(self)




    def array_el(self):

        localctx = MathParser.Array_elContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_array_el)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 640
            self.lvar()
            self.state = 641
            self.match(MathParser.T__6)
            self.state = 642
            self.match(MathParser.INT)
            self.state = 643
            self.match(MathParser.T__7)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DerefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STR(self):
            return self.getToken(MathParser.STR, 0)

        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_deref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeref" ):
                listener.enterDeref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeref" ):
                listener.exitDeref(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeref" ):
                return visitor.visitDeref(self)
            else:
                return visitor.visitChildren(self)




    def deref(self):

        localctx = MathParser.DerefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_deref)
        try:
            self.state = 649
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 645
                self.match(MathParser.STR)
                self.state = 646
                self.deref()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 647
                self.match(MathParser.STR)
                self.state = 648
                self.rvar()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LvarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._STR = None # Token
            self.ptr = list() # of Tokens
            self.name = None # Token

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def STR(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.STR)
            else:
                return self.getToken(MathParser.STR, i)

        def getRuleIndex(self):
            return MathParser.RULE_lvar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLvar" ):
                listener.enterLvar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLvar" ):
                listener.exitLvar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLvar" ):
                return visitor.visitLvar(self)
            else:
                return visitor.visitChildren(self)




    def lvar(self):

        localctx = MathParser.LvarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_lvar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==33:
                self.state = 651
                localctx._STR = self.match(MathParser.STR)
                localctx.ptr.append(localctx._STR)
                self.state = 656
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 657
            localctx.name = self.match(MathParser.VAR_NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RvarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def getRuleIndex(self):
            return MathParser.RULE_rvar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRvar" ):
                listener.enterRvar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRvar" ):
                listener.exitRvar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRvar" ):
                return visitor.visitRvar(self)
            else:
                return visitor.visitChildren(self)




    def rvar(self):

        localctx = MathParser.RvarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_rvar)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 659
            self.match(MathParser.VAR_NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self):
            return self.getTypedRuleContext(MathParser.TermContext,0)


        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def SUM(self):
            return self.getToken(MathParser.SUM, 0)

        def DIF(self):
            return self.getToken(MathParser.DIF, 0)

        def AND_OP(self):
            return self.getToken(MathParser.AND_OP, 0)

        def OR_OP(self):
            return self.getToken(MathParser.OR_OP, 0)

        def getRuleIndex(self):
            return MathParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MathParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 68
        self.enterRecursionRule(localctx, 68, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 662
            self.term(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 675
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 673
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
                    if la_ == 1:
                        localctx = MathParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 664
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 665
                        self.match(MathParser.SUM)
                        self.state = 666
                        self.term(0)
                        pass

                    elif la_ == 2:
                        localctx = MathParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 667
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 668
                        self.match(MathParser.DIF)
                        self.state = 669
                        self.term(0)
                        pass

                    elif la_ == 3:
                        localctx = MathParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 670
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 671
                        _la = self._input.LA(1)
                        if not(_la==44 or _la==45):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 672
                        self.term(0)
                        pass

             
                self.state = 677
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(MathParser.FactorContext,0)


        def NOT_OP(self):
            return self.getToken(MathParser.NOT_OP, 0)

        def term(self):
            return self.getTypedRuleContext(MathParser.TermContext,0)


        def STR(self):
            return self.getToken(MathParser.STR, 0)

        def DIV(self):
            return self.getToken(MathParser.DIV, 0)

        def MOD(self):
            return self.getToken(MathParser.MOD, 0)

        def GT(self):
            return self.getToken(MathParser.GT, 0)

        def LT(self):
            return self.getToken(MathParser.LT, 0)

        def EQ(self):
            return self.getToken(MathParser.EQ, 0)

        def GEQ(self):
            return self.getToken(MathParser.GEQ, 0)

        def LEQ(self):
            return self.getToken(MathParser.LEQ, 0)

        def NEQ(self):
            return self.getToken(MathParser.NEQ, 0)

        def INCR(self):
            return self.getToken(MathParser.INCR, 0)

        def DECR(self):
            return self.getToken(MathParser.DECR, 0)

        def getRuleIndex(self):
            return MathParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerm" ):
                return visitor.visitTerm(self)
            else:
                return visitor.visitChildren(self)



    def term(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MathParser.TermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 70
        self.enterRecursionRule(localctx, 70, self.RULE_term, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 682
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 10, 27, 28, 29, 30, 33, 36, 37, 48, 49, 50]:
                self.state = 679
                self.factor()
                pass
            elif token in [46]:
                self.state = 680
                self.match(MathParser.NOT_OP)
                self.state = 681
                self.factor()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 697
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,102,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 695
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                    if la_ == 1:
                        localctx = MathParser.TermContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_term)
                        self.state = 684
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 685
                        _la = self._input.LA(1)
                        if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 60129542144) != 0):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 686
                        self.factor()
                        pass

                    elif la_ == 2:
                        localctx = MathParser.TermContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_term)
                        self.state = 687
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 688
                        _la = self._input.LA(1)
                        if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 5772436045824) != 0):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 689
                        self.factor()
                        pass

                    elif la_ == 3:
                        localctx = MathParser.TermContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_term)
                        self.state = 690
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 691
                        _la = self._input.LA(1)
                        if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 11544872091648) != 0):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 692
                        self.factor()
                        pass

                    elif la_ == 4:
                        localctx = MathParser.TermContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_term)
                        self.state = 693
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 694
                        _la = self._input.LA(1)
                        if not(_la==49 or _la==50):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

             
                self.state = 699
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary(self):
            return self.getTypedRuleContext(MathParser.PrimaryContext,0)


        def DIF(self):
            return self.getToken(MathParser.DIF, 0)

        def factor(self):
            return self.getTypedRuleContext(MathParser.FactorContext,0)


        def SUM(self):
            return self.getToken(MathParser.SUM, 0)

        def INCR(self):
            return self.getToken(MathParser.INCR, 0)

        def DECR(self):
            return self.getToken(MathParser.DECR, 0)

        def getRuleIndex(self):
            return MathParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFactor" ):
                return visitor.visitFactor(self)
            else:
                return visitor.visitChildren(self)




    def factor(self):

        localctx = MathParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_factor)
        self._la = 0 # Token type
        try:
            self.state = 707
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 10, 27, 28, 29, 30, 33, 48]:
                self.enterOuterAlt(localctx, 1)
                self.state = 700
                self.primary()
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 2)
                self.state = 701
                self.match(MathParser.DIF)
                self.state = 702
                self.factor()
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 3)
                self.state = 703
                self.match(MathParser.SUM)
                self.state = 704
                self.factor()
                pass
            elif token in [49, 50]:
                self.enterOuterAlt(localctx, 4)
                self.state = 705
                _la = self._input.LA(1)
                if not(_la==49 or _la==50):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 706
                self.factor()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def rtype(self):
            return self.getTypedRuleContext(MathParser.RtypeContext,0)


        def ADDR(self):
            return self.getToken(MathParser.ADDR, 0)

        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def CAST(self):
            return self.getToken(MathParser.CAST, 0)

        def primary(self):
            return self.getTypedRuleContext(MathParser.PrimaryContext,0)


        def func_call(self):
            return self.getTypedRuleContext(MathParser.Func_callContext,0)


        def array_el(self):
            return self.getTypedRuleContext(MathParser.Array_elContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimary" ):
                return visitor.visitPrimary(self)
            else:
                return visitor.visitChildren(self)




    def primary(self):

        localctx = MathParser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_primary)
        try:
            self.state = 722
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 709
                self.rvar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 710
                self.rtype()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 711
                self.match(MathParser.ADDR)
                self.state = 712
                self.rvar()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 713
                self.deref()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 714
                self.match(MathParser.T__2)
                self.state = 715
                self.expr(0)
                self.state = 716
                self.match(MathParser.T__3)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 718
                self.match(MathParser.CAST)
                self.state = 719
                self.primary()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 720
                self.func_call()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 721
                self.array_el()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RtypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(MathParser.INT, 0)

        def FLOAT(self):
            return self.getToken(MathParser.FLOAT, 0)

        def CHAR(self):
            return self.getToken(MathParser.CHAR, 0)

        def getRuleIndex(self):
            return MathParser.RULE_rtype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRtype" ):
                listener.enterRtype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRtype" ):
                listener.exitRtype(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRtype" ):
                return visitor.visitRtype(self)
            else:
                return visitor.visitChildren(self)




    def rtype(self):

        localctx = MathParser.RtypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_rtype)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 1879048192) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[34] = self.expr_sempred
        self._predicates[35] = self.term_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def term_sempred(self, localctx:TermContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 1)
         




