# Generated from Math.g4 by ANTLR 4.11.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,58,762,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        1,0,5,0,82,8,0,10,0,12,0,85,9,0,1,0,1,0,1,0,5,0,90,8,0,10,0,12,0,
        93,9,0,1,0,3,0,96,8,0,1,0,1,0,4,0,100,8,0,11,0,12,0,101,1,0,3,0,
        105,8,0,5,0,107,8,0,10,0,12,0,110,9,0,1,0,1,0,1,1,1,1,4,1,116,8,
        1,11,1,12,1,117,1,1,3,1,121,8,1,1,1,1,1,4,1,125,8,1,11,1,12,1,126,
        1,1,3,1,130,8,1,1,1,1,1,4,1,134,8,1,11,1,12,1,135,1,1,3,1,139,8,
        1,1,1,1,1,4,1,143,8,1,11,1,12,1,144,1,1,3,1,148,8,1,1,1,3,1,151,
        8,1,1,2,3,2,154,8,2,1,2,1,2,1,2,1,2,5,2,160,8,2,10,2,12,2,163,9,
        2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,3,3,172,8,3,1,3,1,3,1,3,1,3,1,3,3,
        3,179,8,3,1,3,1,3,1,3,1,3,5,3,185,8,3,10,3,12,3,188,9,3,1,3,3,3,
        191,8,3,1,3,3,3,194,8,3,1,4,1,4,1,4,1,4,1,4,1,4,3,4,202,8,4,1,5,
        1,5,1,5,1,5,3,5,208,8,5,1,5,1,5,3,5,212,8,5,1,5,1,5,1,5,5,5,217,
        8,5,10,5,12,5,220,9,5,1,5,3,5,223,8,5,1,5,1,5,1,5,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,3,6,235,8,6,1,7,1,7,1,7,5,7,240,8,7,10,7,12,7,243,
        9,7,1,8,3,8,246,8,8,1,8,1,8,3,8,250,8,8,1,8,5,8,253,8,8,10,8,12,
        8,256,9,8,1,8,1,8,1,8,3,8,261,8,8,1,8,3,8,264,8,8,1,8,1,8,5,8,268,
        8,8,10,8,12,8,271,9,8,1,8,3,8,274,8,8,1,8,1,8,1,8,3,8,279,8,8,3,
        8,281,8,8,1,9,3,9,284,8,9,1,9,1,9,3,9,288,8,9,1,9,5,9,291,8,9,10,
        9,12,9,294,9,9,1,9,1,9,1,9,3,9,299,8,9,1,9,1,9,1,9,1,10,3,10,305,
        8,10,1,10,1,10,3,10,309,8,10,1,10,5,10,312,8,10,10,10,12,10,315,
        9,10,1,10,1,10,1,10,3,10,320,8,10,1,10,1,10,1,11,1,11,1,11,5,11,
        327,8,11,10,11,12,11,330,9,11,1,12,1,12,1,12,1,12,1,12,3,12,337,
        8,12,1,13,1,13,1,13,3,13,342,8,13,1,13,1,13,1,14,1,14,1,14,4,14,
        349,8,14,11,14,12,14,350,1,14,3,14,354,8,14,1,14,1,14,4,14,358,8,
        14,11,14,12,14,359,1,14,3,14,363,8,14,1,14,1,14,1,14,5,14,368,8,
        14,10,14,12,14,371,9,14,1,14,3,14,374,8,14,1,14,1,14,5,14,378,8,
        14,10,14,12,14,381,9,14,1,14,3,14,384,8,14,1,14,1,14,5,14,388,8,
        14,10,14,12,14,391,9,14,1,14,3,14,394,8,14,1,14,1,14,4,14,398,8,
        14,11,14,12,14,399,1,14,3,14,403,8,14,1,14,1,14,1,14,4,14,408,8,
        14,11,14,12,14,409,1,14,3,14,413,8,14,5,14,415,8,14,10,14,12,14,
        418,9,14,1,14,1,14,1,15,1,15,3,15,424,8,15,1,15,1,15,1,15,5,15,429,
        8,15,10,15,12,15,432,9,15,1,16,1,16,1,16,4,16,437,8,16,11,16,12,
        16,438,1,16,3,16,442,8,16,1,16,1,16,4,16,446,8,16,11,16,12,16,447,
        1,16,3,16,451,8,16,1,16,1,16,1,16,5,16,456,8,16,10,16,12,16,459,
        9,16,1,16,3,16,462,8,16,1,16,1,16,5,16,466,8,16,10,16,12,16,469,
        9,16,1,16,3,16,472,8,16,1,16,1,16,5,16,476,8,16,10,16,12,16,479,
        9,16,1,16,3,16,482,8,16,1,16,1,16,4,16,486,8,16,11,16,12,16,487,
        1,16,3,16,491,8,16,1,16,1,16,1,16,1,16,1,16,4,16,498,8,16,11,16,
        12,16,499,1,16,3,16,503,8,16,5,16,505,8,16,10,16,12,16,508,9,16,
        1,16,1,16,1,17,1,17,1,17,5,17,515,8,17,10,17,12,17,518,9,17,1,18,
        1,18,1,18,5,18,523,8,18,10,18,12,18,526,9,18,1,19,3,19,529,8,19,
        1,19,1,19,5,19,533,8,19,10,19,12,19,536,9,19,1,19,1,19,1,19,3,19,
        541,8,19,1,19,1,19,1,19,1,19,1,19,1,19,5,19,549,8,19,10,19,12,19,
        552,9,19,1,19,1,19,1,19,1,19,3,19,558,8,19,1,19,1,19,5,19,562,8,
        19,10,19,12,19,565,9,19,1,19,1,19,1,19,1,19,3,19,571,8,19,1,20,1,
        20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,3,21,585,8,
        21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,
        24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,3,
        25,612,8,25,1,26,1,26,3,26,616,8,26,1,27,1,27,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,3,27,628,8,27,1,28,1,28,1,28,1,28,1,28,3,28,
        635,8,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
        1,29,3,29,649,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
        1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,671,
        8,30,1,31,1,31,1,31,1,31,3,31,677,8,31,1,32,5,32,680,8,32,10,32,
        12,32,683,9,32,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,
        1,34,1,34,1,34,1,34,1,34,1,34,3,34,701,8,34,1,35,1,35,1,35,1,35,
        1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,5,35,715,8,35,10,35,12,35,
        718,9,35,1,36,1,36,1,36,1,36,3,36,724,8,36,1,36,1,36,1,36,1,36,1,
        36,5,36,731,8,36,10,36,12,36,734,9,36,1,37,1,37,1,37,1,37,1,37,1,
        37,1,37,3,37,743,8,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
        38,1,38,1,38,1,38,1,38,3,38,758,8,38,1,39,1,39,1,39,1,328,2,70,72,
        40,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
        44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,0,7,2,0,1,
        1,56,56,3,0,39,39,41,41,43,43,3,0,38,38,40,40,42,42,1,0,44,45,1,
        0,33,35,1,0,49,50,1,0,28,30,878,0,83,1,0,0,0,2,150,1,0,0,0,4,153,
        1,0,0,0,6,193,1,0,0,0,8,201,1,0,0,0,10,203,1,0,0,0,12,234,1,0,0,
        0,14,236,1,0,0,0,16,280,1,0,0,0,18,283,1,0,0,0,20,304,1,0,0,0,22,
        323,1,0,0,0,24,336,1,0,0,0,26,338,1,0,0,0,28,345,1,0,0,0,30,421,
        1,0,0,0,32,433,1,0,0,0,34,511,1,0,0,0,36,519,1,0,0,0,38,570,1,0,
        0,0,40,572,1,0,0,0,42,578,1,0,0,0,44,586,1,0,0,0,46,589,1,0,0,0,
        48,595,1,0,0,0,50,611,1,0,0,0,52,615,1,0,0,0,54,627,1,0,0,0,56,634,
        1,0,0,0,58,648,1,0,0,0,60,670,1,0,0,0,62,676,1,0,0,0,64,681,1,0,
        0,0,66,686,1,0,0,0,68,700,1,0,0,0,70,702,1,0,0,0,72,723,1,0,0,0,
        74,742,1,0,0,0,76,757,1,0,0,0,78,759,1,0,0,0,80,82,3,40,20,0,81,
        80,1,0,0,0,82,85,1,0,0,0,83,81,1,0,0,0,83,84,1,0,0,0,84,108,1,0,
        0,0,85,83,1,0,0,0,86,107,3,2,1,0,87,95,3,18,9,0,88,90,5,1,0,0,89,
        88,1,0,0,0,90,93,1,0,0,0,91,89,1,0,0,0,91,92,1,0,0,0,92,96,1,0,0,
        0,93,91,1,0,0,0,94,96,5,56,0,0,95,91,1,0,0,0,95,94,1,0,0,0,96,107,
        1,0,0,0,97,104,3,20,10,0,98,100,5,1,0,0,99,98,1,0,0,0,100,101,1,
        0,0,0,101,99,1,0,0,0,101,102,1,0,0,0,102,105,1,0,0,0,103,105,5,56,
        0,0,104,99,1,0,0,0,104,103,1,0,0,0,105,107,1,0,0,0,106,86,1,0,0,
        0,106,87,1,0,0,0,106,97,1,0,0,0,107,110,1,0,0,0,108,106,1,0,0,0,
        108,109,1,0,0,0,109,111,1,0,0,0,110,108,1,0,0,0,111,112,5,0,0,1,
        112,1,1,0,0,0,113,120,3,4,2,0,114,116,5,1,0,0,115,114,1,0,0,0,116,
        117,1,0,0,0,117,115,1,0,0,0,117,118,1,0,0,0,118,121,1,0,0,0,119,
        121,5,56,0,0,120,115,1,0,0,0,120,119,1,0,0,0,121,151,1,0,0,0,122,
        129,3,38,19,0,123,125,5,1,0,0,124,123,1,0,0,0,125,126,1,0,0,0,126,
        124,1,0,0,0,126,127,1,0,0,0,127,130,1,0,0,0,128,130,5,56,0,0,129,
        124,1,0,0,0,129,128,1,0,0,0,130,151,1,0,0,0,131,138,3,70,35,0,132,
        134,5,1,0,0,133,132,1,0,0,0,134,135,1,0,0,0,135,133,1,0,0,0,135,
        136,1,0,0,0,136,139,1,0,0,0,137,139,5,56,0,0,138,133,1,0,0,0,138,
        137,1,0,0,0,139,151,1,0,0,0,140,147,3,58,29,0,141,143,5,1,0,0,142,
        141,1,0,0,0,143,144,1,0,0,0,144,142,1,0,0,0,144,145,1,0,0,0,145,
        148,1,0,0,0,146,148,5,56,0,0,147,142,1,0,0,0,147,146,1,0,0,0,148,
        151,1,0,0,0,149,151,3,32,16,0,150,113,1,0,0,0,150,122,1,0,0,0,150,
        131,1,0,0,0,150,140,1,0,0,0,150,149,1,0,0,0,151,3,1,0,0,0,152,154,
        5,11,0,0,153,152,1,0,0,0,153,154,1,0,0,0,154,155,1,0,0,0,155,161,
        5,25,0,0,156,157,3,56,28,0,157,158,5,2,0,0,158,160,1,0,0,0,159,156,
        1,0,0,0,160,163,1,0,0,0,161,159,1,0,0,0,161,162,1,0,0,0,162,164,
        1,0,0,0,163,161,1,0,0,0,164,165,3,56,28,0,165,5,1,0,0,0,166,167,
        5,21,0,0,167,171,5,3,0,0,168,172,3,66,33,0,169,172,3,78,39,0,170,
        172,5,32,0,0,171,168,1,0,0,0,171,169,1,0,0,0,171,170,1,0,0,0,172,
        173,1,0,0,0,173,194,5,4,0,0,174,175,5,21,0,0,175,178,5,3,0,0,176,
        179,5,31,0,0,177,179,5,32,0,0,178,176,1,0,0,0,178,177,1,0,0,0,179,
        190,1,0,0,0,180,186,5,2,0,0,181,182,3,8,4,0,182,183,5,2,0,0,183,
        185,1,0,0,0,184,181,1,0,0,0,185,188,1,0,0,0,186,184,1,0,0,0,186,
        187,1,0,0,0,187,189,1,0,0,0,188,186,1,0,0,0,189,191,3,8,4,0,190,
        180,1,0,0,0,190,191,1,0,0,0,191,192,1,0,0,0,192,194,5,4,0,0,193,
        166,1,0,0,0,193,174,1,0,0,0,194,7,1,0,0,0,195,202,3,66,33,0,196,
        202,3,78,39,0,197,202,3,60,30,0,198,202,3,62,31,0,199,202,3,70,35,
        0,200,202,5,32,0,0,201,195,1,0,0,0,201,196,1,0,0,0,201,197,1,0,0,
        0,201,198,1,0,0,0,201,199,1,0,0,0,201,200,1,0,0,0,202,9,1,0,0,0,
        203,204,5,23,0,0,204,207,5,3,0,0,205,208,5,31,0,0,206,208,5,32,0,
        0,207,205,1,0,0,0,207,206,1,0,0,0,208,209,1,0,0,0,209,218,5,2,0,
        0,210,212,5,48,0,0,211,210,1,0,0,0,211,212,1,0,0,0,212,213,1,0,0,
        0,213,214,3,12,6,0,214,215,5,2,0,0,215,217,1,0,0,0,216,211,1,0,0,
        0,217,220,1,0,0,0,218,216,1,0,0,0,218,219,1,0,0,0,219,222,1,0,0,
        0,220,218,1,0,0,0,221,223,5,48,0,0,222,221,1,0,0,0,222,223,1,0,0,
        0,223,224,1,0,0,0,224,225,3,12,6,0,225,226,5,4,0,0,226,11,1,0,0,
        0,227,235,3,66,33,0,228,235,3,62,31,0,229,235,3,60,30,0,230,231,
        5,48,0,0,231,235,3,66,33,0,232,233,5,48,0,0,233,235,3,62,31,0,234,
        227,1,0,0,0,234,228,1,0,0,0,234,229,1,0,0,0,234,230,1,0,0,0,234,
        232,1,0,0,0,235,13,1,0,0,0,236,241,3,16,8,0,237,238,5,2,0,0,238,
        240,3,16,8,0,239,237,1,0,0,0,240,243,1,0,0,0,241,239,1,0,0,0,241,
        242,1,0,0,0,242,15,1,0,0,0,243,241,1,0,0,0,244,246,5,11,0,0,245,
        244,1,0,0,0,245,246,1,0,0,0,246,247,1,0,0,0,247,249,5,25,0,0,248,
        250,5,48,0,0,249,248,1,0,0,0,249,250,1,0,0,0,250,254,1,0,0,0,251,
        253,5,33,0,0,252,251,1,0,0,0,253,256,1,0,0,0,254,252,1,0,0,0,254,
        255,1,0,0,0,255,257,1,0,0,0,256,254,1,0,0,0,257,260,5,27,0,0,258,
        259,5,47,0,0,259,261,3,70,35,0,260,258,1,0,0,0,260,261,1,0,0,0,261,
        281,1,0,0,0,262,264,5,11,0,0,263,262,1,0,0,0,263,264,1,0,0,0,264,
        265,1,0,0,0,265,269,5,25,0,0,266,268,5,33,0,0,267,266,1,0,0,0,268,
        271,1,0,0,0,269,267,1,0,0,0,269,270,1,0,0,0,270,273,1,0,0,0,271,
        269,1,0,0,0,272,274,5,48,0,0,273,272,1,0,0,0,273,274,1,0,0,0,274,
        275,1,0,0,0,275,278,5,27,0,0,276,277,5,47,0,0,277,279,3,70,35,0,
        278,276,1,0,0,0,278,279,1,0,0,0,279,281,1,0,0,0,280,245,1,0,0,0,
        280,263,1,0,0,0,281,17,1,0,0,0,282,284,5,11,0,0,283,282,1,0,0,0,
        283,284,1,0,0,0,284,287,1,0,0,0,285,288,5,25,0,0,286,288,5,26,0,
        0,287,285,1,0,0,0,287,286,1,0,0,0,288,292,1,0,0,0,289,291,5,33,0,
        0,290,289,1,0,0,0,291,294,1,0,0,0,292,290,1,0,0,0,292,293,1,0,0,
        0,293,295,1,0,0,0,294,292,1,0,0,0,295,296,5,27,0,0,296,298,5,3,0,
        0,297,299,3,14,7,0,298,297,1,0,0,0,298,299,1,0,0,0,299,300,1,0,0,
        0,300,301,5,4,0,0,301,302,3,28,14,0,302,19,1,0,0,0,303,305,5,11,
        0,0,304,303,1,0,0,0,304,305,1,0,0,0,305,308,1,0,0,0,306,309,5,25,
        0,0,307,309,5,26,0,0,308,306,1,0,0,0,308,307,1,0,0,0,309,313,1,0,
        0,0,310,312,5,33,0,0,311,310,1,0,0,0,312,315,1,0,0,0,313,311,1,0,
        0,0,313,314,1,0,0,0,314,316,1,0,0,0,315,313,1,0,0,0,316,317,5,27,
        0,0,317,319,5,3,0,0,318,320,3,14,7,0,319,318,1,0,0,0,319,320,1,0,
        0,0,320,321,1,0,0,0,321,322,5,4,0,0,322,21,1,0,0,0,323,328,3,24,
        12,0,324,325,5,2,0,0,325,327,3,24,12,0,326,324,1,0,0,0,327,330,1,
        0,0,0,328,329,1,0,0,0,328,326,1,0,0,0,329,23,1,0,0,0,330,328,1,0,
        0,0,331,337,3,66,33,0,332,337,3,62,31,0,333,337,3,26,13,0,334,337,
        3,78,39,0,335,337,3,70,35,0,336,331,1,0,0,0,336,332,1,0,0,0,336,
        333,1,0,0,0,336,334,1,0,0,0,336,335,1,0,0,0,337,25,1,0,0,0,338,339,
        5,27,0,0,339,341,5,3,0,0,340,342,3,22,11,0,341,340,1,0,0,0,341,342,
        1,0,0,0,342,343,1,0,0,0,343,344,5,4,0,0,344,27,1,0,0,0,345,416,5,
        5,0,0,346,353,3,6,3,0,347,349,5,1,0,0,348,347,1,0,0,0,349,350,1,
        0,0,0,350,348,1,0,0,0,350,351,1,0,0,0,351,354,1,0,0,0,352,354,5,
        56,0,0,353,348,1,0,0,0,353,352,1,0,0,0,354,415,1,0,0,0,355,362,3,
        10,5,0,356,358,5,1,0,0,357,356,1,0,0,0,358,359,1,0,0,0,359,357,1,
        0,0,0,359,360,1,0,0,0,360,363,1,0,0,0,361,363,5,56,0,0,362,357,1,
        0,0,0,362,361,1,0,0,0,363,415,1,0,0,0,364,415,3,30,15,0,365,373,
        3,42,21,0,366,368,5,1,0,0,367,366,1,0,0,0,368,371,1,0,0,0,369,367,
        1,0,0,0,369,370,1,0,0,0,370,374,1,0,0,0,371,369,1,0,0,0,372,374,
        5,56,0,0,373,369,1,0,0,0,373,372,1,0,0,0,374,415,1,0,0,0,375,383,
        3,46,23,0,376,378,5,1,0,0,377,376,1,0,0,0,378,381,1,0,0,0,379,377,
        1,0,0,0,379,380,1,0,0,0,380,384,1,0,0,0,381,379,1,0,0,0,382,384,
        5,56,0,0,383,379,1,0,0,0,383,382,1,0,0,0,384,415,1,0,0,0,385,393,
        3,48,24,0,386,388,5,1,0,0,387,386,1,0,0,0,388,391,1,0,0,0,389,387,
        1,0,0,0,389,390,1,0,0,0,390,394,1,0,0,0,391,389,1,0,0,0,392,394,
        5,56,0,0,393,389,1,0,0,0,393,392,1,0,0,0,394,415,1,0,0,0,395,402,
        3,58,29,0,396,398,5,1,0,0,397,396,1,0,0,0,398,399,1,0,0,0,399,397,
        1,0,0,0,399,400,1,0,0,0,400,403,1,0,0,0,401,403,5,56,0,0,402,397,
        1,0,0,0,402,401,1,0,0,0,403,415,1,0,0,0,404,415,3,2,1,0,405,412,
        3,68,34,0,406,408,5,1,0,0,407,406,1,0,0,0,408,409,1,0,0,0,409,407,
        1,0,0,0,409,410,1,0,0,0,410,413,1,0,0,0,411,413,5,56,0,0,412,407,
        1,0,0,0,412,411,1,0,0,0,413,415,1,0,0,0,414,346,1,0,0,0,414,355,
        1,0,0,0,414,364,1,0,0,0,414,365,1,0,0,0,414,375,1,0,0,0,414,385,
        1,0,0,0,414,395,1,0,0,0,414,404,1,0,0,0,414,405,1,0,0,0,415,418,
        1,0,0,0,416,414,1,0,0,0,416,417,1,0,0,0,417,419,1,0,0,0,418,416,
        1,0,0,0,419,420,5,6,0,0,420,29,1,0,0,0,421,423,5,22,0,0,422,424,
        3,70,35,0,423,422,1,0,0,0,423,424,1,0,0,0,424,425,1,0,0,0,425,430,
        5,1,0,0,426,429,3,2,1,0,427,429,3,30,15,0,428,426,1,0,0,0,428,427,
        1,0,0,0,429,432,1,0,0,0,430,428,1,0,0,0,430,431,1,0,0,0,431,31,1,
        0,0,0,432,430,1,0,0,0,433,506,5,5,0,0,434,441,3,6,3,0,435,437,5,
        1,0,0,436,435,1,0,0,0,437,438,1,0,0,0,438,436,1,0,0,0,438,439,1,
        0,0,0,439,442,1,0,0,0,440,442,5,56,0,0,441,436,1,0,0,0,441,440,1,
        0,0,0,442,505,1,0,0,0,443,450,3,10,5,0,444,446,5,1,0,0,445,444,1,
        0,0,0,446,447,1,0,0,0,447,445,1,0,0,0,447,448,1,0,0,0,448,451,1,
        0,0,0,449,451,5,56,0,0,450,445,1,0,0,0,450,449,1,0,0,0,451,505,1,
        0,0,0,452,505,3,30,15,0,453,461,3,42,21,0,454,456,5,1,0,0,455,454,
        1,0,0,0,456,459,1,0,0,0,457,455,1,0,0,0,457,458,1,0,0,0,458,462,
        1,0,0,0,459,457,1,0,0,0,460,462,5,56,0,0,461,457,1,0,0,0,461,460,
        1,0,0,0,462,505,1,0,0,0,463,471,3,46,23,0,464,466,5,1,0,0,465,464,
        1,0,0,0,466,469,1,0,0,0,467,465,1,0,0,0,467,468,1,0,0,0,468,472,
        1,0,0,0,469,467,1,0,0,0,470,472,5,56,0,0,471,467,1,0,0,0,471,470,
        1,0,0,0,472,505,1,0,0,0,473,481,3,48,24,0,474,476,5,1,0,0,475,474,
        1,0,0,0,476,479,1,0,0,0,477,475,1,0,0,0,477,478,1,0,0,0,478,482,
        1,0,0,0,479,477,1,0,0,0,480,482,5,56,0,0,481,477,1,0,0,0,481,480,
        1,0,0,0,482,505,1,0,0,0,483,490,3,58,29,0,484,486,5,1,0,0,485,484,
        1,0,0,0,486,487,1,0,0,0,487,485,1,0,0,0,487,488,1,0,0,0,488,491,
        1,0,0,0,489,491,5,56,0,0,490,485,1,0,0,0,490,489,1,0,0,0,491,505,
        1,0,0,0,492,505,3,36,18,0,493,505,3,34,17,0,494,505,3,2,1,0,495,
        502,3,68,34,0,496,498,5,1,0,0,497,496,1,0,0,0,498,499,1,0,0,0,499,
        497,1,0,0,0,499,500,1,0,0,0,500,503,1,0,0,0,501,503,5,56,0,0,502,
        497,1,0,0,0,502,501,1,0,0,0,503,505,1,0,0,0,504,434,1,0,0,0,504,
        443,1,0,0,0,504,452,1,0,0,0,504,453,1,0,0,0,504,463,1,0,0,0,504,
        473,1,0,0,0,504,483,1,0,0,0,504,492,1,0,0,0,504,493,1,0,0,0,504,
        494,1,0,0,0,504,495,1,0,0,0,505,508,1,0,0,0,506,504,1,0,0,0,506,
        507,1,0,0,0,507,509,1,0,0,0,508,506,1,0,0,0,509,510,5,6,0,0,510,
        33,1,0,0,0,511,512,5,17,0,0,512,516,7,0,0,0,513,515,3,2,1,0,514,
        513,1,0,0,0,515,518,1,0,0,0,516,514,1,0,0,0,516,517,1,0,0,0,517,
        35,1,0,0,0,518,516,1,0,0,0,519,520,5,16,0,0,520,524,7,0,0,0,521,
        523,3,2,1,0,522,521,1,0,0,0,523,526,1,0,0,0,524,522,1,0,0,0,524,
        525,1,0,0,0,525,37,1,0,0,0,526,524,1,0,0,0,527,529,5,11,0,0,528,
        527,1,0,0,0,528,529,1,0,0,0,529,530,1,0,0,0,530,534,5,25,0,0,531,
        533,5,33,0,0,532,531,1,0,0,0,533,536,1,0,0,0,534,532,1,0,0,0,534,
        535,1,0,0,0,535,537,1,0,0,0,536,534,1,0,0,0,537,538,5,27,0,0,538,
        540,5,7,0,0,539,541,5,28,0,0,540,539,1,0,0,0,540,541,1,0,0,0,541,
        542,1,0,0,0,542,543,5,8,0,0,543,544,5,47,0,0,544,550,5,5,0,0,545,
        546,3,78,39,0,546,547,5,2,0,0,547,549,1,0,0,0,548,545,1,0,0,0,549,
        552,1,0,0,0,550,548,1,0,0,0,550,551,1,0,0,0,551,553,1,0,0,0,552,
        550,1,0,0,0,553,554,3,78,39,0,554,555,5,6,0,0,555,571,1,0,0,0,556,
        558,5,11,0,0,557,556,1,0,0,0,557,558,1,0,0,0,558,559,1,0,0,0,559,
        563,5,25,0,0,560,562,5,33,0,0,561,560,1,0,0,0,562,565,1,0,0,0,563,
        561,1,0,0,0,563,564,1,0,0,0,564,566,1,0,0,0,565,563,1,0,0,0,566,
        567,5,27,0,0,567,568,5,7,0,0,568,569,5,28,0,0,569,571,5,8,0,0,570,
        528,1,0,0,0,570,557,1,0,0,0,571,39,1,0,0,0,572,573,5,24,0,0,573,
        574,5,38,0,0,574,575,5,27,0,0,575,576,5,9,0,0,576,577,5,40,0,0,577,
        41,1,0,0,0,578,579,5,12,0,0,579,580,5,3,0,0,580,581,3,52,26,0,581,
        582,5,4,0,0,582,584,3,32,16,0,583,585,3,44,22,0,584,583,1,0,0,0,
        584,585,1,0,0,0,585,43,1,0,0,0,586,587,5,13,0,0,587,588,3,32,16,
        0,588,45,1,0,0,0,589,590,5,15,0,0,590,591,5,3,0,0,591,592,3,52,26,
        0,592,593,5,4,0,0,593,594,3,32,16,0,594,47,1,0,0,0,595,596,5,14,
        0,0,596,597,5,3,0,0,597,598,3,50,25,0,598,599,5,1,0,0,599,600,3,
        52,26,0,600,601,5,1,0,0,601,602,3,54,27,0,602,603,5,4,0,0,603,604,
        3,32,16,0,604,49,1,0,0,0,605,606,5,25,0,0,606,607,3,64,32,0,607,
        608,5,47,0,0,608,609,3,70,35,0,609,612,1,0,0,0,610,612,3,58,29,0,
        611,605,1,0,0,0,611,610,1,0,0,0,612,51,1,0,0,0,613,616,3,68,34,0,
        614,616,3,70,35,0,615,613,1,0,0,0,615,614,1,0,0,0,616,53,1,0,0,0,
        617,618,5,49,0,0,618,628,3,66,33,0,619,620,5,50,0,0,620,628,3,66,
        33,0,621,622,3,66,33,0,622,623,5,49,0,0,623,628,1,0,0,0,624,625,
        3,66,33,0,625,626,5,50,0,0,626,628,1,0,0,0,627,617,1,0,0,0,627,619,
        1,0,0,0,627,621,1,0,0,0,627,624,1,0,0,0,628,55,1,0,0,0,629,630,3,
        64,32,0,630,631,5,47,0,0,631,632,3,70,35,0,632,635,1,0,0,0,633,635,
        3,64,32,0,634,629,1,0,0,0,634,633,1,0,0,0,635,57,1,0,0,0,636,637,
        3,66,33,0,637,638,5,47,0,0,638,639,3,70,35,0,639,649,1,0,0,0,640,
        641,3,62,31,0,641,642,5,47,0,0,642,643,3,70,35,0,643,649,1,0,0,0,
        644,645,3,60,30,0,645,646,5,47,0,0,646,647,3,70,35,0,647,649,1,0,
        0,0,648,636,1,0,0,0,648,640,1,0,0,0,648,644,1,0,0,0,649,59,1,0,0,
        0,650,651,3,64,32,0,651,652,5,7,0,0,652,653,5,28,0,0,653,654,5,8,
        0,0,654,671,1,0,0,0,655,656,3,64,32,0,656,657,5,7,0,0,657,658,3,
        70,35,0,658,659,5,8,0,0,659,671,1,0,0,0,660,661,3,62,31,0,661,662,
        5,7,0,0,662,663,5,28,0,0,663,664,5,8,0,0,664,671,1,0,0,0,665,666,
        3,62,31,0,666,667,5,7,0,0,667,668,3,70,35,0,668,669,5,8,0,0,669,
        671,1,0,0,0,670,650,1,0,0,0,670,655,1,0,0,0,670,660,1,0,0,0,670,
        665,1,0,0,0,671,61,1,0,0,0,672,673,5,33,0,0,673,677,3,62,31,0,674,
        675,5,33,0,0,675,677,3,66,33,0,676,672,1,0,0,0,676,674,1,0,0,0,677,
        63,1,0,0,0,678,680,5,33,0,0,679,678,1,0,0,0,680,683,1,0,0,0,681,
        679,1,0,0,0,681,682,1,0,0,0,682,684,1,0,0,0,683,681,1,0,0,0,684,
        685,5,27,0,0,685,65,1,0,0,0,686,687,5,27,0,0,687,67,1,0,0,0,688,
        689,3,70,35,0,689,690,7,1,0,0,690,691,3,70,35,0,691,701,1,0,0,0,
        692,693,3,70,35,0,693,694,7,2,0,0,694,695,3,70,35,0,695,701,1,0,
        0,0,696,697,3,70,35,0,697,698,7,3,0,0,698,699,3,70,35,0,699,701,
        1,0,0,0,700,688,1,0,0,0,700,692,1,0,0,0,700,696,1,0,0,0,701,69,1,
        0,0,0,702,703,6,35,-1,0,703,704,3,72,36,0,704,716,1,0,0,0,705,706,
        10,3,0,0,706,707,5,36,0,0,707,715,3,72,36,0,708,709,10,2,0,0,709,
        710,5,37,0,0,710,715,3,72,36,0,711,712,10,1,0,0,712,713,7,3,0,0,
        713,715,3,72,36,0,714,705,1,0,0,0,714,708,1,0,0,0,714,711,1,0,0,
        0,715,718,1,0,0,0,716,714,1,0,0,0,716,717,1,0,0,0,717,71,1,0,0,0,
        718,716,1,0,0,0,719,720,6,36,-1,0,720,724,3,74,37,0,721,722,5,46,
        0,0,722,724,3,74,37,0,723,719,1,0,0,0,723,721,1,0,0,0,724,732,1,
        0,0,0,725,726,10,3,0,0,726,727,7,4,0,0,727,731,3,74,37,0,728,729,
        10,1,0,0,729,731,7,5,0,0,730,725,1,0,0,0,730,728,1,0,0,0,731,734,
        1,0,0,0,732,730,1,0,0,0,732,733,1,0,0,0,733,73,1,0,0,0,734,732,1,
        0,0,0,735,743,3,76,38,0,736,737,5,37,0,0,737,743,3,74,37,0,738,739,
        5,36,0,0,739,743,3,74,37,0,740,741,7,5,0,0,741,743,3,74,37,0,742,
        735,1,0,0,0,742,736,1,0,0,0,742,738,1,0,0,0,742,740,1,0,0,0,743,
        75,1,0,0,0,744,758,3,66,33,0,745,758,3,78,39,0,746,747,5,48,0,0,
        747,758,3,66,33,0,748,758,3,62,31,0,749,750,5,3,0,0,750,751,3,70,
        35,0,751,752,5,4,0,0,752,758,1,0,0,0,753,754,5,10,0,0,754,758,3,
        76,38,0,755,758,3,26,13,0,756,758,3,60,30,0,757,744,1,0,0,0,757,
        745,1,0,0,0,757,746,1,0,0,0,757,748,1,0,0,0,757,749,1,0,0,0,757,
        753,1,0,0,0,757,755,1,0,0,0,757,756,1,0,0,0,758,77,1,0,0,0,759,760,
        7,6,0,0,760,79,1,0,0,0,111,83,91,95,101,104,106,108,117,120,126,
        129,135,138,144,147,150,153,161,171,178,186,190,193,201,207,211,
        218,222,234,241,245,249,254,260,263,269,273,278,280,283,287,292,
        298,304,308,313,319,328,336,341,350,353,359,362,369,373,379,383,
        389,393,399,402,409,412,414,416,423,428,430,438,441,447,450,457,
        461,467,471,477,481,487,490,499,502,504,506,516,524,528,534,540,
        550,557,563,570,584,611,615,627,634,648,670,676,681,700,714,716,
        723,730,732,742,757
    ]

class MathParser ( Parser ):

    grammarFileName = "Math.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "','", "'('", "')'", "'{'", "'}'", 
                     "'['", "']'", "'.h'", "<INVALID>", "'const'", "'if'", 
                     "'else'", "'for'", "'while'", "'break'", "'continue'", 
                     "'switch'", "'case'", "'default'", "'printf'", "'return'", 
                     "'scanf'", "'#include'", "<INVALID>", "'void'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'*'", "'/'", "'%'", "'+'", "'-'", "'<'", 
                     "'<='", "'>'", "'>='", "'=='", "'!='", "'||'", "'&&'", 
                     "'!'", "'='", "'&'", "'++'", "'--'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "CAST", "CONST", "IF", "ELSE", 
                      "FOR", "WHILE", "BREAK", "CONTINUE", "SWITCH", "CASE", 
                      "DEFAULT", "PRINTF", "RETURN", "SCANF", "INCLUDE", 
                      "TYPE", "VOID", "VAR_NAME", "INT", "FLOAT", "CHAR", 
                      "SCANF_STRING", "STRING", "STR", "DIV", "MOD", "SUM", 
                      "DIF", "LT", "LEQ", "GT", "GEQ", "EQ", "NEQ", "OR_OP", 
                      "AND_OP", "NOT_OP", "ASSIGN", "ADDR", "INCR", "DECR", 
                      "SP", "NEWLINE", "WS", "UNICODE_WS", "LN", "DELIM", 
                      "COMMENT", "LCOMMENT" ]

    RULE_math = 0
    RULE_instr = 1
    RULE_declr = 2
    RULE_printf = 3
    RULE_printf_arg = 4
    RULE_scanf = 5
    RULE_scanf_arg = 6
    RULE_param_list = 7
    RULE_param_declr = 8
    RULE_func_defn = 9
    RULE_func_decl = 10
    RULE_arg_list = 11
    RULE_func_arg = 12
    RULE_func_call = 13
    RULE_func_scope = 14
    RULE_return_instr = 15
    RULE_scope = 16
    RULE_cont_instr = 17
    RULE_break_instr = 18
    RULE_array_decl = 19
    RULE_incl_stat = 20
    RULE_if_cond = 21
    RULE_else_cond = 22
    RULE_while_loop = 23
    RULE_for_loop = 24
    RULE_init = 25
    RULE_cond = 26
    RULE_incr = 27
    RULE_var_decl = 28
    RULE_assign = 29
    RULE_array_el = 30
    RULE_deref = 31
    RULE_lvar = 32
    RULE_rvar = 33
    RULE_comp = 34
    RULE_expr = 35
    RULE_term = 36
    RULE_factor = 37
    RULE_primary = 38
    RULE_rtype = 39

    ruleNames =  [ "math", "instr", "declr", "printf", "printf_arg", "scanf", 
                   "scanf_arg", "param_list", "param_declr", "func_defn", 
                   "func_decl", "arg_list", "func_arg", "func_call", "func_scope", 
                   "return_instr", "scope", "cont_instr", "break_instr", 
                   "array_decl", "incl_stat", "if_cond", "else_cond", "while_loop", 
                   "for_loop", "init", "cond", "incr", "var_decl", "assign", 
                   "array_el", "deref", "lvar", "rvar", "comp", "expr", 
                   "term", "factor", "primary", "rtype" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    CAST=10
    CONST=11
    IF=12
    ELSE=13
    FOR=14
    WHILE=15
    BREAK=16
    CONTINUE=17
    SWITCH=18
    CASE=19
    DEFAULT=20
    PRINTF=21
    RETURN=22
    SCANF=23
    INCLUDE=24
    TYPE=25
    VOID=26
    VAR_NAME=27
    INT=28
    FLOAT=29
    CHAR=30
    SCANF_STRING=31
    STRING=32
    STR=33
    DIV=34
    MOD=35
    SUM=36
    DIF=37
    LT=38
    LEQ=39
    GT=40
    GEQ=41
    EQ=42
    NEQ=43
    OR_OP=44
    AND_OP=45
    NOT_OP=46
    ASSIGN=47
    ADDR=48
    INCR=49
    DECR=50
    SP=51
    NEWLINE=52
    WS=53
    UNICODE_WS=54
    LN=55
    DELIM=56
    COMMENT=57
    LCOMMENT=58

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class MathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(MathParser.EOF, 0)

        def incl_stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Incl_statContext)
            else:
                return self.getTypedRuleContext(MathParser.Incl_statContext,i)


        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.InstrContext)
            else:
                return self.getTypedRuleContext(MathParser.InstrContext,i)


        def func_defn(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Func_defnContext)
            else:
                return self.getTypedRuleContext(MathParser.Func_defnContext,i)


        def func_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Func_declContext)
            else:
                return self.getTypedRuleContext(MathParser.Func_declContext,i)


        def DELIM(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.DELIM)
            else:
                return self.getToken(MathParser.DELIM, i)

        def getRuleIndex(self):
            return MathParser.RULE_math

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMath" ):
                listener.enterMath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMath" ):
                listener.exitMath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMath" ):
                return visitor.visitMath(self)
            else:
                return visitor.visitChildren(self)




    def math(self):

        localctx = MathParser.MathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_math)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 83
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 80
                self.incl_stat()
                self.state = 85
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 108
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 2040910443449384) != 0:
                self.state = 106
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
                if la_ == 1:
                    self.state = 86
                    self.instr()
                    pass

                elif la_ == 2:
                    self.state = 87
                    self.func_defn()
                    self.state = 95
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [-1, 1, 3, 5, 10, 11, 25, 26, 27, 28, 29, 30, 33, 36, 37, 46, 48, 49, 50]:
                        self.state = 91
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 88
                            self.match(MathParser.T__0)
                            self.state = 93
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [56]:
                        self.state = 94
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 3:
                    self.state = 97
                    self.func_decl()
                    self.state = 104
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 99 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 98
                            self.match(MathParser.T__0)
                            self.state = 101 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [56]:
                        self.state = 103
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass


                self.state = 110
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 111
            self.match(MathParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declr(self):
            return self.getTypedRuleContext(MathParser.DeclrContext,0)


        def DELIM(self):
            return self.getToken(MathParser.DELIM, 0)

        def array_decl(self):
            return self.getTypedRuleContext(MathParser.Array_declContext,0)


        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def assign(self):
            return self.getTypedRuleContext(MathParser.AssignContext,0)


        def scope(self):
            return self.getTypedRuleContext(MathParser.ScopeContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstr" ):
                listener.enterInstr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstr" ):
                listener.exitInstr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstr" ):
                return visitor.visitInstr(self)
            else:
                return visitor.visitChildren(self)




    def instr(self):

        localctx = MathParser.InstrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_instr)
        self._la = 0 # Token type
        try:
            self.state = 150
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 113
                self.declr()
                self.state = 120
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1]:
                    self.state = 115 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 114
                        self.match(MathParser.T__0)
                        self.state = 117 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1):
                            break

                    pass
                elif token in [56]:
                    self.state = 119
                    self.match(MathParser.DELIM)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 122
                self.array_decl()
                self.state = 129
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1]:
                    self.state = 124 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 123
                        self.match(MathParser.T__0)
                        self.state = 126 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1):
                            break

                    pass
                elif token in [56]:
                    self.state = 128
                    self.match(MathParser.DELIM)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 131
                self.expr(0)
                self.state = 138
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1]:
                    self.state = 133 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 132
                        self.match(MathParser.T__0)
                        self.state = 135 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1):
                            break

                    pass
                elif token in [56]:
                    self.state = 137
                    self.match(MathParser.DELIM)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 140
                self.assign()
                self.state = 147
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1]:
                    self.state = 142 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 141
                        self.match(MathParser.T__0)
                        self.state = 144 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1):
                            break

                    pass
                elif token in [56]:
                    self.state = 146
                    self.match(MathParser.DELIM)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 149
                self.scope()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(MathParser.TYPE, 0)

        def var_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Var_declContext)
            else:
                return self.getTypedRuleContext(MathParser.Var_declContext,i)


        def CONST(self):
            return self.getToken(MathParser.CONST, 0)

        def getRuleIndex(self):
            return MathParser.RULE_declr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclr" ):
                listener.enterDeclr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclr" ):
                listener.exitDeclr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclr" ):
                return visitor.visitDeclr(self)
            else:
                return visitor.visitChildren(self)




    def declr(self):

        localctx = MathParser.DeclrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_declr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 153
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 152
                self.match(MathParser.CONST)


            self.state = 155
            self.match(MathParser.TYPE)
            self.state = 161
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 156
                    self.var_decl()
                    self.state = 157
                    self.match(MathParser.T__1) 
                self.state = 163
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

            self.state = 164
            self.var_decl()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrintfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.print_val = None # Token
            self.format_string = None # Token
            self._printf_arg = None # Printf_argContext
            self.vars_ = list() # of Printf_argContexts

        def PRINTF(self):
            return self.getToken(MathParser.PRINTF, 0)

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def rtype(self):
            return self.getTypedRuleContext(MathParser.RtypeContext,0)


        def STRING(self):
            return self.getToken(MathParser.STRING, 0)

        def SCANF_STRING(self):
            return self.getToken(MathParser.SCANF_STRING, 0)

        def printf_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Printf_argContext)
            else:
                return self.getTypedRuleContext(MathParser.Printf_argContext,i)


        def getRuleIndex(self):
            return MathParser.RULE_printf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintf" ):
                listener.enterPrintf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintf" ):
                listener.exitPrintf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrintf" ):
                return visitor.visitPrintf(self)
            else:
                return visitor.visitChildren(self)




    def printf(self):

        localctx = MathParser.PrintfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_printf)
        self._la = 0 # Token type
        try:
            self.state = 193
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 166
                self.match(MathParser.PRINTF)
                self.state = 167
                self.match(MathParser.T__2)
                self.state = 171
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [27]:
                    self.state = 168
                    self.rvar()
                    pass
                elif token in [28, 29, 30]:
                    self.state = 169
                    self.rtype()
                    pass
                elif token in [32]:
                    self.state = 170
                    localctx.print_val = self.match(MathParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 173
                self.match(MathParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 174
                self.match(MathParser.PRINTF)
                self.state = 175
                self.match(MathParser.T__2)
                self.state = 178
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [31]:
                    self.state = 176
                    localctx.format_string = self.match(MathParser.SCANF_STRING)
                    pass
                elif token in [32]:
                    self.state = 177
                    localctx.format_string = self.match(MathParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 190
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 180
                    self.match(MathParser.T__1)
                    self.state = 186
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,20,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 181
                            localctx._printf_arg = self.printf_arg()
                            localctx.vars_.append(localctx._printf_arg)
                            self.state = 182
                            self.match(MathParser.T__1) 
                        self.state = 188
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

                    self.state = 189
                    localctx._printf_arg = self.printf_arg()
                    localctx.vars_.append(localctx._printf_arg)


                self.state = 192
                self.match(MathParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Printf_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def rtype(self):
            return self.getTypedRuleContext(MathParser.RtypeContext,0)


        def array_el(self):
            return self.getTypedRuleContext(MathParser.Array_elContext,0)


        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def STRING(self):
            return self.getToken(MathParser.STRING, 0)

        def getRuleIndex(self):
            return MathParser.RULE_printf_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintf_arg" ):
                listener.enterPrintf_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintf_arg" ):
                listener.exitPrintf_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrintf_arg" ):
                return visitor.visitPrintf_arg(self)
            else:
                return visitor.visitChildren(self)




    def printf_arg(self):

        localctx = MathParser.Printf_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_printf_arg)
        try:
            self.state = 201
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 195
                self.rvar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 196
                self.rtype()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 197
                self.array_el()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 198
                self.deref()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 199
                self.expr(0)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 200
                self.match(MathParser.STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScanfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.format_string = None # Token
            self._scanf_arg = None # Scanf_argContext
            self.vars_ = list() # of Scanf_argContexts

        def SCANF(self):
            return self.getToken(MathParser.SCANF, 0)

        def scanf_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Scanf_argContext)
            else:
                return self.getTypedRuleContext(MathParser.Scanf_argContext,i)


        def SCANF_STRING(self):
            return self.getToken(MathParser.SCANF_STRING, 0)

        def STRING(self):
            return self.getToken(MathParser.STRING, 0)

        def ADDR(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.ADDR)
            else:
                return self.getToken(MathParser.ADDR, i)

        def getRuleIndex(self):
            return MathParser.RULE_scanf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScanf" ):
                listener.enterScanf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScanf" ):
                listener.exitScanf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScanf" ):
                return visitor.visitScanf(self)
            else:
                return visitor.visitChildren(self)




    def scanf(self):

        localctx = MathParser.ScanfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_scanf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 203
            self.match(MathParser.SCANF)
            self.state = 204
            self.match(MathParser.T__2)
            self.state = 207
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [31]:
                self.state = 205
                localctx.format_string = self.match(MathParser.SCANF_STRING)
                pass
            elif token in [32]:
                self.state = 206
                localctx.format_string = self.match(MathParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 209
            self.match(MathParser.T__1)
            self.state = 218
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 211
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                    if la_ == 1:
                        self.state = 210
                        self.match(MathParser.ADDR)


                    self.state = 213
                    localctx._scanf_arg = self.scanf_arg()
                    localctx.vars_.append(localctx._scanf_arg)
                    self.state = 214
                    self.match(MathParser.T__1) 
                self.state = 220
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

            self.state = 222
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 221
                self.match(MathParser.ADDR)


            self.state = 224
            localctx._scanf_arg = self.scanf_arg()
            localctx.vars_.append(localctx._scanf_arg)
            self.state = 225
            self.match(MathParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Scanf_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def array_el(self):
            return self.getTypedRuleContext(MathParser.Array_elContext,0)


        def ADDR(self):
            return self.getToken(MathParser.ADDR, 0)

        def getRuleIndex(self):
            return MathParser.RULE_scanf_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScanf_arg" ):
                listener.enterScanf_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScanf_arg" ):
                listener.exitScanf_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScanf_arg" ):
                return visitor.visitScanf_arg(self)
            else:
                return visitor.visitChildren(self)




    def scanf_arg(self):

        localctx = MathParser.Scanf_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_scanf_arg)
        try:
            self.state = 234
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 227
                self.rvar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 228
                self.deref()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 229
                self.array_el()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 230
                self.match(MathParser.ADDR)
                self.state = 231
                self.rvar()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 232
                self.match(MathParser.ADDR)
                self.state = 233
                self.deref()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._param_declr = None # Param_declrContext
            self.params = list() # of Param_declrContexts

        def param_declr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Param_declrContext)
            else:
                return self.getTypedRuleContext(MathParser.Param_declrContext,i)


        def getRuleIndex(self):
            return MathParser.RULE_param_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_list" ):
                listener.enterParam_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_list" ):
                listener.exitParam_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_list" ):
                return visitor.visitParam_list(self)
            else:
                return visitor.visitChildren(self)




    def param_list(self):

        localctx = MathParser.Param_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_param_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 236
            localctx._param_declr = self.param_declr()
            localctx.params.append(localctx._param_declr)
            self.state = 241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2:
                self.state = 237
                self.match(MathParser.T__1)
                self.state = 238
                localctx._param_declr = self.param_declr()
                localctx.params.append(localctx._param_declr)
                self.state = 243
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_declrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.const = None # Token
            self.type_ = None # Token
            self.reference = None # Token
            self._STR = None # Token
            self.ptr = list() # of Tokens
            self.var = None # Token
            self.default = None # ExprContext

        def TYPE(self):
            return self.getToken(MathParser.TYPE, 0)

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def ASSIGN(self):
            return self.getToken(MathParser.ASSIGN, 0)

        def CONST(self):
            return self.getToken(MathParser.CONST, 0)

        def ADDR(self):
            return self.getToken(MathParser.ADDR, 0)

        def STR(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.STR)
            else:
                return self.getToken(MathParser.STR, i)

        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_param_declr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_declr" ):
                listener.enterParam_declr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_declr" ):
                listener.exitParam_declr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_declr" ):
                return visitor.visitParam_declr(self)
            else:
                return visitor.visitChildren(self)




    def param_declr(self):

        localctx = MathParser.Param_declrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_param_declr)
        self._la = 0 # Token type
        try:
            self.state = 280
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 245
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 244
                    localctx.const = self.match(MathParser.CONST)


                self.state = 247
                localctx.type_ = self.match(MathParser.TYPE)
                self.state = 249
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==48:
                    self.state = 248
                    localctx.reference = self.match(MathParser.ADDR)


                self.state = 254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==33:
                    self.state = 251
                    localctx._STR = self.match(MathParser.STR)
                    localctx.ptr.append(localctx._STR)
                    self.state = 256
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 257
                localctx.var = self.match(MathParser.VAR_NAME)
                self.state = 260
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47:
                    self.state = 258
                    self.match(MathParser.ASSIGN)
                    self.state = 259
                    localctx.default = self.expr(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 263
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 262
                    localctx.const = self.match(MathParser.CONST)


                self.state = 265
                localctx.type_ = self.match(MathParser.TYPE)
                self.state = 269
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==33:
                    self.state = 266
                    localctx._STR = self.match(MathParser.STR)
                    localctx.ptr.append(localctx._STR)
                    self.state = 271
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 273
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==48:
                    self.state = 272
                    localctx.reference = self.match(MathParser.ADDR)


                self.state = 275
                localctx.var = self.match(MathParser.VAR_NAME)
                self.state = 278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47:
                    self.state = 276
                    self.match(MathParser.ASSIGN)
                    self.state = 277
                    localctx.default = self.expr(0)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_defnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.const = None # Token
            self.type_ = None # Token
            self._STR = None # Token
            self.ptr = list() # of Tokens
            self.name = None # Token
            self.params = None # Param_listContext

        def func_scope(self):
            return self.getTypedRuleContext(MathParser.Func_scopeContext,0)


        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def TYPE(self):
            return self.getToken(MathParser.TYPE, 0)

        def VOID(self):
            return self.getToken(MathParser.VOID, 0)

        def CONST(self):
            return self.getToken(MathParser.CONST, 0)

        def STR(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.STR)
            else:
                return self.getToken(MathParser.STR, i)

        def param_list(self):
            return self.getTypedRuleContext(MathParser.Param_listContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_func_defn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_defn" ):
                listener.enterFunc_defn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_defn" ):
                listener.exitFunc_defn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_defn" ):
                return visitor.visitFunc_defn(self)
            else:
                return visitor.visitChildren(self)




    def func_defn(self):

        localctx = MathParser.Func_defnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_func_defn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 282
                localctx.const = self.match(MathParser.CONST)


            self.state = 287
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25]:
                self.state = 285
                localctx.type_ = self.match(MathParser.TYPE)
                pass
            elif token in [26]:
                self.state = 286
                localctx.type_ = self.match(MathParser.VOID)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==33:
                self.state = 289
                localctx._STR = self.match(MathParser.STR)
                localctx.ptr.append(localctx._STR)
                self.state = 294
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 295
            localctx.name = self.match(MathParser.VAR_NAME)
            self.state = 296
            self.match(MathParser.T__2)
            self.state = 298
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11 or _la==25:
                self.state = 297
                localctx.params = self.param_list()


            self.state = 300
            self.match(MathParser.T__3)
            self.state = 301
            self.func_scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.const = None # Token
            self.type_ = None # Token
            self._STR = None # Token
            self.ptr = list() # of Tokens
            self.name = None # Token
            self.params = None # Param_listContext

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def TYPE(self):
            return self.getToken(MathParser.TYPE, 0)

        def VOID(self):
            return self.getToken(MathParser.VOID, 0)

        def CONST(self):
            return self.getToken(MathParser.CONST, 0)

        def STR(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.STR)
            else:
                return self.getToken(MathParser.STR, i)

        def param_list(self):
            return self.getTypedRuleContext(MathParser.Param_listContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_func_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_decl" ):
                listener.enterFunc_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_decl" ):
                listener.exitFunc_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_decl" ):
                return visitor.visitFunc_decl(self)
            else:
                return visitor.visitChildren(self)




    def func_decl(self):

        localctx = MathParser.Func_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_func_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 303
                localctx.const = self.match(MathParser.CONST)


            self.state = 308
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25]:
                self.state = 306
                localctx.type_ = self.match(MathParser.TYPE)
                pass
            elif token in [26]:
                self.state = 307
                localctx.type_ = self.match(MathParser.VOID)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==33:
                self.state = 310
                localctx._STR = self.match(MathParser.STR)
                localctx.ptr.append(localctx._STR)
                self.state = 315
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 316
            localctx.name = self.match(MathParser.VAR_NAME)
            self.state = 317
            self.match(MathParser.T__2)
            self.state = 319
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11 or _la==25:
                self.state = 318
                localctx.params = self.param_list()


            self.state = 321
            self.match(MathParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arg_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._func_arg = None # Func_argContext
            self.args = list() # of Func_argContexts

        def func_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Func_argContext)
            else:
                return self.getTypedRuleContext(MathParser.Func_argContext,i)


        def getRuleIndex(self):
            return MathParser.RULE_arg_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArg_list" ):
                listener.enterArg_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArg_list" ):
                listener.exitArg_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArg_list" ):
                return visitor.visitArg_list(self)
            else:
                return visitor.visitChildren(self)




    def arg_list(self):

        localctx = MathParser.Arg_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_arg_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 323
            localctx._func_arg = self.func_arg()
            localctx.args.append(localctx._func_arg)
            self.state = 328
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 324
                    self.match(MathParser.T__1)
                    self.state = 325
                    localctx._func_arg = self.func_arg()
                    localctx.args.append(localctx._func_arg) 
                self.state = 330
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def func_call(self):
            return self.getTypedRuleContext(MathParser.Func_callContext,0)


        def rtype(self):
            return self.getTypedRuleContext(MathParser.RtypeContext,0)


        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_func_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_arg" ):
                listener.enterFunc_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_arg" ):
                listener.exitFunc_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_arg" ):
                return visitor.visitFunc_arg(self)
            else:
                return visitor.visitChildren(self)




    def func_arg(self):

        localctx = MathParser.Func_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_func_arg)
        try:
            self.state = 336
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 331
                self.rvar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 332
                self.deref()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 333
                self.func_call()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 334
                self.rtype()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 335
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self.args = None # Arg_listContext

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def arg_list(self):
            return self.getTypedRuleContext(MathParser.Arg_listContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_call" ):
                listener.enterFunc_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_call" ):
                listener.exitFunc_call(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_call" ):
                return visitor.visitFunc_call(self)
            else:
                return visitor.visitChildren(self)




    def func_call(self):

        localctx = MathParser.Func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_func_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 338
            localctx.name = self.match(MathParser.VAR_NAME)
            self.state = 339
            self.match(MathParser.T__2)
            self.state = 341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 2040910342784008) != 0:
                self.state = 340
                localctx.args = self.arg_list()


            self.state = 343
            self.match(MathParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_scopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def printf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.PrintfContext)
            else:
                return self.getTypedRuleContext(MathParser.PrintfContext,i)


        def scanf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.ScanfContext)
            else:
                return self.getTypedRuleContext(MathParser.ScanfContext,i)


        def return_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Return_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Return_instrContext,i)


        def if_cond(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.If_condContext)
            else:
                return self.getTypedRuleContext(MathParser.If_condContext,i)


        def while_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.While_loopContext)
            else:
                return self.getTypedRuleContext(MathParser.While_loopContext,i)


        def for_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.For_loopContext)
            else:
                return self.getTypedRuleContext(MathParser.For_loopContext,i)


        def assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.AssignContext)
            else:
                return self.getTypedRuleContext(MathParser.AssignContext,i)


        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.InstrContext)
            else:
                return self.getTypedRuleContext(MathParser.InstrContext,i)


        def comp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.CompContext)
            else:
                return self.getTypedRuleContext(MathParser.CompContext,i)


        def DELIM(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.DELIM)
            else:
                return self.getToken(MathParser.DELIM, i)

        def getRuleIndex(self):
            return MathParser.RULE_func_scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_scope" ):
                listener.enterFunc_scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_scope" ):
                listener.exitFunc_scope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_scope" ):
                return visitor.visitFunc_scope(self)
            else:
                return visitor.visitChildren(self)




    def func_scope(self):

        localctx = MathParser.Func_scopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_func_scope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            self.match(MathParser.T__4)
            self.state = 416
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 2040910391073832) != 0:
                self.state = 414
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                if la_ == 1:
                    self.state = 346
                    self.printf()
                    self.state = 353
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 348 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 347
                            self.match(MathParser.T__0)
                            self.state = 350 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [56]:
                        self.state = 352
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 2:
                    self.state = 355
                    self.scanf()
                    self.state = 362
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 357 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 356
                            self.match(MathParser.T__0)
                            self.state = 359 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [56]:
                        self.state = 361
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 3:
                    self.state = 364
                    self.return_instr()
                    pass

                elif la_ == 4:
                    self.state = 365
                    self.if_cond()
                    self.state = 373
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 10, 11, 12, 14, 15, 21, 22, 23, 25, 27, 28, 29, 30, 33, 36, 37, 46, 48, 49, 50]:
                        self.state = 369
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 366
                            self.match(MathParser.T__0)
                            self.state = 371
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [56]:
                        self.state = 372
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 5:
                    self.state = 375
                    self.while_loop()
                    self.state = 383
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 10, 11, 12, 14, 15, 21, 22, 23, 25, 27, 28, 29, 30, 33, 36, 37, 46, 48, 49, 50]:
                        self.state = 379
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 376
                            self.match(MathParser.T__0)
                            self.state = 381
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [56]:
                        self.state = 382
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 6:
                    self.state = 385
                    self.for_loop()
                    self.state = 393
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 10, 11, 12, 14, 15, 21, 22, 23, 25, 27, 28, 29, 30, 33, 36, 37, 46, 48, 49, 50]:
                        self.state = 389
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 386
                            self.match(MathParser.T__0)
                            self.state = 391
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [56]:
                        self.state = 392
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 7:
                    self.state = 395
                    self.assign()
                    self.state = 402
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 397 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 396
                            self.match(MathParser.T__0)
                            self.state = 399 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [56]:
                        self.state = 401
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 8:
                    self.state = 404
                    self.instr()
                    pass

                elif la_ == 9:
                    self.state = 405
                    self.comp()
                    self.state = 412
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 407 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 406
                            self.match(MathParser.T__0)
                            self.state = 409 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [56]:
                        self.state = 411
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass


                self.state = 418
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 419
            self.match(MathParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ret_val = None # ExprContext

        def RETURN(self):
            return self.getToken(MathParser.RETURN, 0)

        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.InstrContext)
            else:
                return self.getTypedRuleContext(MathParser.InstrContext,i)


        def return_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Return_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Return_instrContext,i)


        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_return_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_instr" ):
                listener.enterReturn_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_instr" ):
                listener.exitReturn_instr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_instr" ):
                return visitor.visitReturn_instr(self)
            else:
                return visitor.visitChildren(self)




    def return_instr(self):

        localctx = MathParser.Return_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_return_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            self.match(MathParser.RETURN)
            self.state = 423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 2040910342784008) != 0:
                self.state = 422
                localctx.ret_val = self.expr(0)


            self.state = 425
            self.match(MathParser.T__0)
            self.state = 430
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 428
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [3, 5, 10, 11, 25, 27, 28, 29, 30, 33, 36, 37, 46, 48, 49, 50]:
                        self.state = 426
                        self.instr()
                        pass
                    elif token in [22]:
                        self.state = 427
                        self.return_instr()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 432
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def printf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.PrintfContext)
            else:
                return self.getTypedRuleContext(MathParser.PrintfContext,i)


        def scanf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.ScanfContext)
            else:
                return self.getTypedRuleContext(MathParser.ScanfContext,i)


        def return_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Return_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Return_instrContext,i)


        def if_cond(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.If_condContext)
            else:
                return self.getTypedRuleContext(MathParser.If_condContext,i)


        def while_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.While_loopContext)
            else:
                return self.getTypedRuleContext(MathParser.While_loopContext,i)


        def for_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.For_loopContext)
            else:
                return self.getTypedRuleContext(MathParser.For_loopContext,i)


        def assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.AssignContext)
            else:
                return self.getTypedRuleContext(MathParser.AssignContext,i)


        def break_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Break_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Break_instrContext,i)


        def cont_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Cont_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Cont_instrContext,i)


        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.InstrContext)
            else:
                return self.getTypedRuleContext(MathParser.InstrContext,i)


        def comp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.CompContext)
            else:
                return self.getTypedRuleContext(MathParser.CompContext,i)


        def DELIM(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.DELIM)
            else:
                return self.getToken(MathParser.DELIM, i)

        def getRuleIndex(self):
            return MathParser.RULE_scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScope" ):
                listener.enterScope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScope" ):
                listener.exitScope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScope" ):
                return visitor.visitScope(self)
            else:
                return visitor.visitChildren(self)




    def scope(self):

        localctx = MathParser.ScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_scope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 433
            self.match(MathParser.T__4)
            self.state = 506
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 2040910391270440) != 0:
                self.state = 504
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                if la_ == 1:
                    self.state = 434
                    self.printf()
                    self.state = 441
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 436 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 435
                            self.match(MathParser.T__0)
                            self.state = 438 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [56]:
                        self.state = 440
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 2:
                    self.state = 443
                    self.scanf()
                    self.state = 450
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 445 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 444
                            self.match(MathParser.T__0)
                            self.state = 447 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [56]:
                        self.state = 449
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 3:
                    self.state = 452
                    self.return_instr()
                    pass

                elif la_ == 4:
                    self.state = 453
                    self.if_cond()
                    self.state = 461
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 10, 11, 12, 14, 15, 16, 17, 21, 22, 23, 25, 27, 28, 29, 30, 33, 36, 37, 46, 48, 49, 50]:
                        self.state = 457
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 454
                            self.match(MathParser.T__0)
                            self.state = 459
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [56]:
                        self.state = 460
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 5:
                    self.state = 463
                    self.while_loop()
                    self.state = 471
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 10, 11, 12, 14, 15, 16, 17, 21, 22, 23, 25, 27, 28, 29, 30, 33, 36, 37, 46, 48, 49, 50]:
                        self.state = 467
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 464
                            self.match(MathParser.T__0)
                            self.state = 469
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [56]:
                        self.state = 470
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 6:
                    self.state = 473
                    self.for_loop()
                    self.state = 481
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 10, 11, 12, 14, 15, 16, 17, 21, 22, 23, 25, 27, 28, 29, 30, 33, 36, 37, 46, 48, 49, 50]:
                        self.state = 477
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 474
                            self.match(MathParser.T__0)
                            self.state = 479
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [56]:
                        self.state = 480
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 7:
                    self.state = 483
                    self.assign()
                    self.state = 490
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 485 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 484
                            self.match(MathParser.T__0)
                            self.state = 487 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [56]:
                        self.state = 489
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 8:
                    self.state = 492
                    self.break_instr()
                    pass

                elif la_ == 9:
                    self.state = 493
                    self.cont_instr()
                    pass

                elif la_ == 10:
                    self.state = 494
                    self.instr()
                    pass

                elif la_ == 11:
                    self.state = 495
                    self.comp()
                    self.state = 502
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 497 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 496
                            self.match(MathParser.T__0)
                            self.state = 499 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [56]:
                        self.state = 501
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass


                self.state = 508
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 509
            self.match(MathParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cont_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(MathParser.CONTINUE, 0)

        def DELIM(self):
            return self.getToken(MathParser.DELIM, 0)

        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.InstrContext)
            else:
                return self.getTypedRuleContext(MathParser.InstrContext,i)


        def getRuleIndex(self):
            return MathParser.RULE_cont_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCont_instr" ):
                listener.enterCont_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCont_instr" ):
                listener.exitCont_instr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCont_instr" ):
                return visitor.visitCont_instr(self)
            else:
                return visitor.visitChildren(self)




    def cont_instr(self):

        localctx = MathParser.Cont_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_cont_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 511
            self.match(MathParser.CONTINUE)
            self.state = 512
            _la = self._input.LA(1)
            if not(_la==1 or _la==56):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 516
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,85,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 513
                    self.instr() 
                self.state = 518
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Break_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(MathParser.BREAK, 0)

        def DELIM(self):
            return self.getToken(MathParser.DELIM, 0)

        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.InstrContext)
            else:
                return self.getTypedRuleContext(MathParser.InstrContext,i)


        def getRuleIndex(self):
            return MathParser.RULE_break_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_instr" ):
                listener.enterBreak_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_instr" ):
                listener.exitBreak_instr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreak_instr" ):
                return visitor.visitBreak_instr(self)
            else:
                return visitor.visitChildren(self)




    def break_instr(self):

        localctx = MathParser.Break_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_break_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 519
            self.match(MathParser.BREAK)
            self.state = 520
            _la = self._input.LA(1)
            if not(_la==1 or _la==56):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 524
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,86,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 521
                    self.instr() 
                self.state = 526
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.const = None # Token
            self.type_ = None # Token
            self._STR = None # Token
            self.ptr = list() # of Tokens
            self.name = None # Token
            self.size = None # Token
            self._rtype = None # RtypeContext
            self.values = list() # of RtypeContexts

        def ASSIGN(self):
            return self.getToken(MathParser.ASSIGN, 0)

        def TYPE(self):
            return self.getToken(MathParser.TYPE, 0)

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def rtype(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.RtypeContext)
            else:
                return self.getTypedRuleContext(MathParser.RtypeContext,i)


        def CONST(self):
            return self.getToken(MathParser.CONST, 0)

        def STR(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.STR)
            else:
                return self.getToken(MathParser.STR, i)

        def INT(self):
            return self.getToken(MathParser.INT, 0)

        def getRuleIndex(self):
            return MathParser.RULE_array_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_decl" ):
                listener.enterArray_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_decl" ):
                listener.exitArray_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_decl" ):
                return visitor.visitArray_decl(self)
            else:
                return visitor.visitChildren(self)




    def array_decl(self):

        localctx = MathParser.Array_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_array_decl)
        self._la = 0 # Token type
        try:
            self.state = 570
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 527
                    localctx.const = self.match(MathParser.CONST)


                self.state = 530
                localctx.type_ = self.match(MathParser.TYPE)
                self.state = 534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==33:
                    self.state = 531
                    localctx._STR = self.match(MathParser.STR)
                    localctx.ptr.append(localctx._STR)
                    self.state = 536
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 537
                localctx.name = self.match(MathParser.VAR_NAME)
                self.state = 538
                self.match(MathParser.T__6)
                self.state = 540
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==28:
                    self.state = 539
                    localctx.size = self.match(MathParser.INT)


                self.state = 542
                self.match(MathParser.T__7)
                self.state = 543
                self.match(MathParser.ASSIGN)
                self.state = 544
                self.match(MathParser.T__4)
                self.state = 550
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 545
                        localctx._rtype = self.rtype()
                        localctx.values.append(localctx._rtype)
                        self.state = 546
                        self.match(MathParser.T__1) 
                    self.state = 552
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

                self.state = 553
                localctx._rtype = self.rtype()
                localctx.values.append(localctx._rtype)
                self.state = 554
                self.match(MathParser.T__5)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 557
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 556
                    localctx.const = self.match(MathParser.CONST)


                self.state = 559
                localctx.type_ = self.match(MathParser.TYPE)
                self.state = 563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==33:
                    self.state = 560
                    localctx._STR = self.match(MathParser.STR)
                    localctx.ptr.append(localctx._STR)
                    self.state = 565
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 566
                localctx.name = self.match(MathParser.VAR_NAME)
                self.state = 567
                self.match(MathParser.T__6)
                self.state = 568
                localctx.size = self.match(MathParser.INT)
                self.state = 569
                self.match(MathParser.T__7)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Incl_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.library = None # Token

        def INCLUDE(self):
            return self.getToken(MathParser.INCLUDE, 0)

        def LT(self):
            return self.getToken(MathParser.LT, 0)

        def GT(self):
            return self.getToken(MathParser.GT, 0)

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def getRuleIndex(self):
            return MathParser.RULE_incl_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncl_stat" ):
                listener.enterIncl_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncl_stat" ):
                listener.exitIncl_stat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncl_stat" ):
                return visitor.visitIncl_stat(self)
            else:
                return visitor.visitChildren(self)




    def incl_stat(self):

        localctx = MathParser.Incl_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_incl_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 572
            self.match(MathParser.INCLUDE)
            self.state = 573
            self.match(MathParser.LT)
            self.state = 574
            localctx.library = self.match(MathParser.VAR_NAME)
            self.state = 575
            self.match(MathParser.T__8)
            self.state = 576
            self.match(MathParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_condContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # CondContext

        def IF(self):
            return self.getToken(MathParser.IF, 0)

        def scope(self):
            return self.getTypedRuleContext(MathParser.ScopeContext,0)


        def cond(self):
            return self.getTypedRuleContext(MathParser.CondContext,0)


        def else_cond(self):
            return self.getTypedRuleContext(MathParser.Else_condContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_if_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_cond" ):
                listener.enterIf_cond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_cond" ):
                listener.exitIf_cond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_cond" ):
                return visitor.visitIf_cond(self)
            else:
                return visitor.visitChildren(self)




    def if_cond(self):

        localctx = MathParser.If_condContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_if_cond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 578
            self.match(MathParser.IF)
            self.state = 579
            self.match(MathParser.T__2)
            self.state = 580
            localctx.condition = self.cond()
            self.state = 581
            self.match(MathParser.T__3)
            self.state = 582
            self.scope()
            self.state = 584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 583
                self.else_cond()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_condContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(MathParser.ELSE, 0)

        def scope(self):
            return self.getTypedRuleContext(MathParser.ScopeContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_else_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_cond" ):
                listener.enterElse_cond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_cond" ):
                listener.exitElse_cond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_cond" ):
                return visitor.visitElse_cond(self)
            else:
                return visitor.visitChildren(self)




    def else_cond(self):

        localctx = MathParser.Else_condContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_else_cond)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            self.match(MathParser.ELSE)
            self.state = 587
            self.scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # CondContext

        def WHILE(self):
            return self.getToken(MathParser.WHILE, 0)

        def scope(self):
            return self.getTypedRuleContext(MathParser.ScopeContext,0)


        def cond(self):
            return self.getTypedRuleContext(MathParser.CondContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_while_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_loop" ):
                listener.enterWhile_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_loop" ):
                listener.exitWhile_loop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_loop" ):
                return visitor.visitWhile_loop(self)
            else:
                return visitor.visitChildren(self)




    def while_loop(self):

        localctx = MathParser.While_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_while_loop)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589
            self.match(MathParser.WHILE)
            self.state = 590
            self.match(MathParser.T__2)
            self.state = 591
            localctx.condition = self.cond()
            self.state = 592
            self.match(MathParser.T__3)
            self.state = 593
            self.scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.initialization = None # InitContext
            self.condition = None # CondContext
            self.increment = None # IncrContext

        def FOR(self):
            return self.getToken(MathParser.FOR, 0)

        def scope(self):
            return self.getTypedRuleContext(MathParser.ScopeContext,0)


        def init(self):
            return self.getTypedRuleContext(MathParser.InitContext,0)


        def cond(self):
            return self.getTypedRuleContext(MathParser.CondContext,0)


        def incr(self):
            return self.getTypedRuleContext(MathParser.IncrContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_for_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_loop" ):
                listener.enterFor_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_loop" ):
                listener.exitFor_loop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_loop" ):
                return visitor.visitFor_loop(self)
            else:
                return visitor.visitChildren(self)




    def for_loop(self):

        localctx = MathParser.For_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_for_loop)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 595
            self.match(MathParser.FOR)
            self.state = 596
            self.match(MathParser.T__2)
            self.state = 597
            localctx.initialization = self.init()
            self.state = 598
            self.match(MathParser.T__0)
            self.state = 599
            localctx.condition = self.cond()
            self.state = 600
            self.match(MathParser.T__0)
            self.state = 601
            localctx.increment = self.incr()
            self.state = 602
            self.match(MathParser.T__3)
            self.state = 603
            self.scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(MathParser.TYPE, 0)

        def lvar(self):
            return self.getTypedRuleContext(MathParser.LvarContext,0)


        def ASSIGN(self):
            return self.getToken(MathParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def assign(self):
            return self.getTypedRuleContext(MathParser.AssignContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_init

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInit" ):
                listener.enterInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInit" ):
                listener.exitInit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInit" ):
                return visitor.visitInit(self)
            else:
                return visitor.visitChildren(self)




    def init(self):

        localctx = MathParser.InitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_init)
        try:
            self.state = 611
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25]:
                self.enterOuterAlt(localctx, 1)
                self.state = 605
                self.match(MathParser.TYPE)
                self.state = 606
                self.lvar()
                self.state = 607
                self.match(MathParser.ASSIGN)
                self.state = 608
                self.expr(0)
                pass
            elif token in [27, 33]:
                self.enterOuterAlt(localctx, 2)
                self.state = 610
                self.assign()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp(self):
            return self.getTypedRuleContext(MathParser.CompContext,0)


        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCond" ):
                listener.enterCond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCond" ):
                listener.exitCond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCond" ):
                return visitor.visitCond(self)
            else:
                return visitor.visitChildren(self)




    def cond(self):

        localctx = MathParser.CondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_cond)
        try:
            self.state = 615
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 613
                self.comp()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 614
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCR(self):
            return self.getToken(MathParser.INCR, 0)

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def DECR(self):
            return self.getToken(MathParser.DECR, 0)

        def getRuleIndex(self):
            return MathParser.RULE_incr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncr" ):
                listener.enterIncr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncr" ):
                listener.exitIncr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncr" ):
                return visitor.visitIncr(self)
            else:
                return visitor.visitChildren(self)




    def incr(self):

        localctx = MathParser.IncrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_incr)
        try:
            self.state = 627
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 617
                self.match(MathParser.INCR)
                self.state = 618
                self.rvar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 619
                self.match(MathParser.DECR)
                self.state = 620
                self.rvar()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 621
                self.rvar()
                self.state = 622
                self.match(MathParser.INCR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 624
                self.rvar()
                self.state = 625
                self.match(MathParser.DECR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lvar(self):
            return self.getTypedRuleContext(MathParser.LvarContext,0)


        def ASSIGN(self):
            return self.getToken(MathParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_var_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_decl" ):
                listener.enterVar_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_decl" ):
                listener.exitVar_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVar_decl" ):
                return visitor.visitVar_decl(self)
            else:
                return visitor.visitChildren(self)




    def var_decl(self):

        localctx = MathParser.Var_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_var_decl)
        try:
            self.state = 634
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 629
                self.lvar()
                self.state = 630
                self.match(MathParser.ASSIGN)
                self.state = 631
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 633
                self.lvar()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def ASSIGN(self):
            return self.getToken(MathParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def array_el(self):
            return self.getTypedRuleContext(MathParser.Array_elContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign" ):
                listener.enterAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign" ):
                listener.exitAssign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssign" ):
                return visitor.visitAssign(self)
            else:
                return visitor.visitChildren(self)




    def assign(self):

        localctx = MathParser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_assign)
        try:
            self.state = 648
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 636
                self.rvar()
                self.state = 637
                self.match(MathParser.ASSIGN)
                self.state = 638
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 640
                self.deref()
                self.state = 641
                self.match(MathParser.ASSIGN)
                self.state = 642
                self.expr(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 644
                self.array_el()
                self.state = 645
                self.match(MathParser.ASSIGN)
                self.state = 646
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_elContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.index = None # Token

        def lvar(self):
            return self.getTypedRuleContext(MathParser.LvarContext,0)


        def INT(self):
            return self.getToken(MathParser.INT, 0)

        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_array_el

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_el" ):
                listener.enterArray_el(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_el" ):
                listener.exitArray_el(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_el" ):
                return visitor.visitArray_el(self)
            else:
                return visitor.visitChildren(self)




    def array_el(self):

        localctx = MathParser.Array_elContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_array_el)
        try:
            self.state = 670
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 650
                self.lvar()
                self.state = 651
                self.match(MathParser.T__6)
                self.state = 652
                localctx.index = self.match(MathParser.INT)
                self.state = 653
                self.match(MathParser.T__7)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 655
                self.lvar()
                self.state = 656
                self.match(MathParser.T__6)
                self.state = 657
                self.expr(0)
                self.state = 658
                self.match(MathParser.T__7)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 660
                self.deref()
                self.state = 661
                self.match(MathParser.T__6)
                self.state = 662
                localctx.index = self.match(MathParser.INT)
                self.state = 663
                self.match(MathParser.T__7)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 665
                self.deref()
                self.state = 666
                self.match(MathParser.T__6)
                self.state = 667
                self.expr(0)
                self.state = 668
                self.match(MathParser.T__7)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DerefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STR(self):
            return self.getToken(MathParser.STR, 0)

        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_deref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeref" ):
                listener.enterDeref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeref" ):
                listener.exitDeref(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeref" ):
                return visitor.visitDeref(self)
            else:
                return visitor.visitChildren(self)




    def deref(self):

        localctx = MathParser.DerefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_deref)
        try:
            self.state = 676
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 672
                self.match(MathParser.STR)
                self.state = 673
                self.deref()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 674
                self.match(MathParser.STR)
                self.state = 675
                self.rvar()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LvarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._STR = None # Token
            self.ptr = list() # of Tokens
            self.name = None # Token

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def STR(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.STR)
            else:
                return self.getToken(MathParser.STR, i)

        def getRuleIndex(self):
            return MathParser.RULE_lvar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLvar" ):
                listener.enterLvar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLvar" ):
                listener.exitLvar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLvar" ):
                return visitor.visitLvar(self)
            else:
                return visitor.visitChildren(self)




    def lvar(self):

        localctx = MathParser.LvarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_lvar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==33:
                self.state = 678
                localctx._STR = self.match(MathParser.STR)
                localctx.ptr.append(localctx._STR)
                self.state = 683
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 684
            localctx.name = self.match(MathParser.VAR_NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RvarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def getRuleIndex(self):
            return MathParser.RULE_rvar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRvar" ):
                listener.enterRvar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRvar" ):
                listener.exitRvar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRvar" ):
                return visitor.visitRvar(self)
            else:
                return visitor.visitChildren(self)




    def rvar(self):

        localctx = MathParser.RvarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_rvar)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 686
            self.match(MathParser.VAR_NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.ExprContext)
            else:
                return self.getTypedRuleContext(MathParser.ExprContext,i)


        def GEQ(self):
            return self.getToken(MathParser.GEQ, 0)

        def LEQ(self):
            return self.getToken(MathParser.LEQ, 0)

        def NEQ(self):
            return self.getToken(MathParser.NEQ, 0)

        def GT(self):
            return self.getToken(MathParser.GT, 0)

        def LT(self):
            return self.getToken(MathParser.LT, 0)

        def EQ(self):
            return self.getToken(MathParser.EQ, 0)

        def AND_OP(self):
            return self.getToken(MathParser.AND_OP, 0)

        def OR_OP(self):
            return self.getToken(MathParser.OR_OP, 0)

        def getRuleIndex(self):
            return MathParser.RULE_comp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp" ):
                listener.enterComp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp" ):
                listener.exitComp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp" ):
                return visitor.visitComp(self)
            else:
                return visitor.visitChildren(self)




    def comp(self):

        localctx = MathParser.CompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_comp)
        self._la = 0 # Token type
        try:
            self.state = 700
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 688
                self.expr(0)
                self.state = 689
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 11544872091648) != 0):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 690
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 692
                self.expr(0)
                self.state = 693
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 5772436045824) != 0):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 694
                self.expr(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 696
                self.expr(0)
                self.state = 697
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==44 or _la==45):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 698
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self):
            return self.getTypedRuleContext(MathParser.TermContext,0)


        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def SUM(self):
            return self.getToken(MathParser.SUM, 0)

        def DIF(self):
            return self.getToken(MathParser.DIF, 0)

        def AND_OP(self):
            return self.getToken(MathParser.AND_OP, 0)

        def OR_OP(self):
            return self.getToken(MathParser.OR_OP, 0)

        def getRuleIndex(self):
            return MathParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MathParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 70
        self.enterRecursionRule(localctx, 70, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self.term(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 716
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 714
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                    if la_ == 1:
                        localctx = MathParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 705
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 706
                        self.match(MathParser.SUM)
                        self.state = 707
                        self.term(0)
                        pass

                    elif la_ == 2:
                        localctx = MathParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 708
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 709
                        self.match(MathParser.DIF)
                        self.state = 710
                        self.term(0)
                        pass

                    elif la_ == 3:
                        localctx = MathParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 711
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 712
                        _la = self._input.LA(1)
                        if not(_la==44 or _la==45):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 713
                        self.term(0)
                        pass

             
                self.state = 718
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(MathParser.FactorContext,0)


        def NOT_OP(self):
            return self.getToken(MathParser.NOT_OP, 0)

        def term(self):
            return self.getTypedRuleContext(MathParser.TermContext,0)


        def STR(self):
            return self.getToken(MathParser.STR, 0)

        def DIV(self):
            return self.getToken(MathParser.DIV, 0)

        def MOD(self):
            return self.getToken(MathParser.MOD, 0)

        def INCR(self):
            return self.getToken(MathParser.INCR, 0)

        def DECR(self):
            return self.getToken(MathParser.DECR, 0)

        def getRuleIndex(self):
            return MathParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerm" ):
                return visitor.visitTerm(self)
            else:
                return visitor.visitChildren(self)



    def term(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MathParser.TermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 72
        self.enterRecursionRule(localctx, 72, self.RULE_term, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 723
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 10, 27, 28, 29, 30, 33, 36, 37, 48, 49, 50]:
                self.state = 720
                self.factor()
                pass
            elif token in [46]:
                self.state = 721
                self.match(MathParser.NOT_OP)
                self.state = 722
                self.factor()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 732
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,108,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 730
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                    if la_ == 1:
                        localctx = MathParser.TermContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_term)
                        self.state = 725
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 726
                        _la = self._input.LA(1)
                        if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 60129542144) != 0):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 727
                        self.factor()
                        pass

                    elif la_ == 2:
                        localctx = MathParser.TermContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_term)
                        self.state = 728
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 729
                        _la = self._input.LA(1)
                        if not(_la==49 or _la==50):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

             
                self.state = 734
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary(self):
            return self.getTypedRuleContext(MathParser.PrimaryContext,0)


        def DIF(self):
            return self.getToken(MathParser.DIF, 0)

        def factor(self):
            return self.getTypedRuleContext(MathParser.FactorContext,0)


        def SUM(self):
            return self.getToken(MathParser.SUM, 0)

        def INCR(self):
            return self.getToken(MathParser.INCR, 0)

        def DECR(self):
            return self.getToken(MathParser.DECR, 0)

        def getRuleIndex(self):
            return MathParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFactor" ):
                return visitor.visitFactor(self)
            else:
                return visitor.visitChildren(self)




    def factor(self):

        localctx = MathParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_factor)
        self._la = 0 # Token type
        try:
            self.state = 742
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 10, 27, 28, 29, 30, 33, 48]:
                self.enterOuterAlt(localctx, 1)
                self.state = 735
                self.primary()
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 2)
                self.state = 736
                self.match(MathParser.DIF)
                self.state = 737
                self.factor()
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 3)
                self.state = 738
                self.match(MathParser.SUM)
                self.state = 739
                self.factor()
                pass
            elif token in [49, 50]:
                self.enterOuterAlt(localctx, 4)
                self.state = 740
                _la = self._input.LA(1)
                if not(_la==49 or _la==50):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 741
                self.factor()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def rtype(self):
            return self.getTypedRuleContext(MathParser.RtypeContext,0)


        def ADDR(self):
            return self.getToken(MathParser.ADDR, 0)

        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def CAST(self):
            return self.getToken(MathParser.CAST, 0)

        def primary(self):
            return self.getTypedRuleContext(MathParser.PrimaryContext,0)


        def func_call(self):
            return self.getTypedRuleContext(MathParser.Func_callContext,0)


        def array_el(self):
            return self.getTypedRuleContext(MathParser.Array_elContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimary" ):
                return visitor.visitPrimary(self)
            else:
                return visitor.visitChildren(self)




    def primary(self):

        localctx = MathParser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_primary)
        try:
            self.state = 757
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 744
                self.rvar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 745
                self.rtype()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 746
                self.match(MathParser.ADDR)
                self.state = 747
                self.rvar()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 748
                self.deref()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 749
                self.match(MathParser.T__2)
                self.state = 750
                self.expr(0)
                self.state = 751
                self.match(MathParser.T__3)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 753
                self.match(MathParser.CAST)
                self.state = 754
                self.primary()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 755
                self.func_call()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 756
                self.array_el()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RtypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(MathParser.INT, 0)

        def FLOAT(self):
            return self.getToken(MathParser.FLOAT, 0)

        def CHAR(self):
            return self.getToken(MathParser.CHAR, 0)

        def getRuleIndex(self):
            return MathParser.RULE_rtype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRtype" ):
                listener.enterRtype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRtype" ):
                listener.exitRtype(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRtype" ):
                return visitor.visitRtype(self)
            else:
                return visitor.visitChildren(self)




    def rtype(self):

        localctx = MathParser.RtypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_rtype)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 1879048192) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[35] = self.expr_sempred
        self._predicates[36] = self.term_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def term_sempred(self, localctx:TermContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 1)
         




