# Generated from Math.g4 by ANTLR 4.11.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,58,766,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        1,0,5,0,82,8,0,10,0,12,0,85,9,0,1,0,1,0,1,0,5,0,90,8,0,10,0,12,0,
        93,9,0,1,0,3,0,96,8,0,1,0,1,0,4,0,100,8,0,11,0,12,0,101,1,0,3,0,
        105,8,0,5,0,107,8,0,10,0,12,0,110,9,0,1,0,1,0,1,1,1,1,4,1,116,8,
        1,11,1,12,1,117,1,1,3,1,121,8,1,1,1,1,1,4,1,125,8,1,11,1,12,1,126,
        1,1,3,1,130,8,1,1,1,1,1,4,1,134,8,1,11,1,12,1,135,1,1,3,1,139,8,
        1,1,1,1,1,4,1,143,8,1,11,1,12,1,144,1,1,3,1,148,8,1,1,1,3,1,151,
        8,1,1,2,3,2,154,8,2,1,2,1,2,1,2,1,2,5,2,160,8,2,10,2,12,2,163,9,
        2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,3,3,172,8,3,1,3,1,3,1,3,1,3,1,3,3,
        3,179,8,3,1,3,1,3,1,3,1,3,5,3,185,8,3,10,3,12,3,188,9,3,1,3,3,3,
        191,8,3,1,3,3,3,194,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,203,8,4,
        1,5,1,5,1,5,1,5,3,5,209,8,5,1,5,1,5,3,5,213,8,5,1,5,1,5,1,5,5,5,
        218,8,5,10,5,12,5,221,9,5,1,5,3,5,224,8,5,1,5,1,5,1,5,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,3,6,236,8,6,1,7,1,7,1,7,5,7,241,8,7,10,7,12,7,
        244,9,7,1,8,3,8,247,8,8,1,8,1,8,3,8,251,8,8,1,8,5,8,254,8,8,10,8,
        12,8,257,9,8,1,8,1,8,1,8,3,8,262,8,8,1,8,3,8,265,8,8,1,8,1,8,5,8,
        269,8,8,10,8,12,8,272,9,8,1,8,3,8,275,8,8,1,8,1,8,1,8,3,8,280,8,
        8,3,8,282,8,8,1,9,3,9,285,8,9,1,9,1,9,3,9,289,8,9,1,9,5,9,292,8,
        9,10,9,12,9,295,9,9,1,9,1,9,1,9,3,9,300,8,9,1,9,1,9,1,9,1,10,3,10,
        306,8,10,1,10,1,10,3,10,310,8,10,1,10,5,10,313,8,10,10,10,12,10,
        316,9,10,1,10,1,10,1,10,3,10,321,8,10,1,10,1,10,1,11,1,11,1,11,5,
        11,328,8,11,10,11,12,11,331,9,11,1,12,1,12,1,12,1,12,1,12,3,12,338,
        8,12,1,13,1,13,1,13,3,13,343,8,13,1,13,1,13,1,14,1,14,1,14,4,14,
        350,8,14,11,14,12,14,351,1,14,3,14,355,8,14,1,14,1,14,4,14,359,8,
        14,11,14,12,14,360,1,14,3,14,364,8,14,1,14,1,14,1,14,5,14,369,8,
        14,10,14,12,14,372,9,14,1,14,3,14,375,8,14,1,14,1,14,5,14,379,8,
        14,10,14,12,14,382,9,14,1,14,3,14,385,8,14,1,14,1,14,5,14,389,8,
        14,10,14,12,14,392,9,14,1,14,3,14,395,8,14,1,14,1,14,4,14,399,8,
        14,11,14,12,14,400,1,14,3,14,404,8,14,1,14,1,14,1,14,4,14,409,8,
        14,11,14,12,14,410,1,14,3,14,414,8,14,5,14,416,8,14,10,14,12,14,
        419,9,14,1,14,1,14,1,15,1,15,3,15,425,8,15,1,15,1,15,1,15,5,15,430,
        8,15,10,15,12,15,433,9,15,1,16,1,16,1,16,4,16,438,8,16,11,16,12,
        16,439,1,16,3,16,443,8,16,1,16,1,16,4,16,447,8,16,11,16,12,16,448,
        1,16,3,16,452,8,16,1,16,1,16,1,16,5,16,457,8,16,10,16,12,16,460,
        9,16,1,16,3,16,463,8,16,1,16,1,16,5,16,467,8,16,10,16,12,16,470,
        9,16,1,16,3,16,473,8,16,1,16,1,16,5,16,477,8,16,10,16,12,16,480,
        9,16,1,16,3,16,483,8,16,1,16,1,16,4,16,487,8,16,11,16,12,16,488,
        1,16,3,16,492,8,16,1,16,1,16,1,16,1,16,1,16,4,16,499,8,16,11,16,
        12,16,500,1,16,3,16,504,8,16,5,16,506,8,16,10,16,12,16,509,9,16,
        1,16,1,16,1,17,1,17,1,17,5,17,516,8,17,10,17,12,17,519,9,17,1,18,
        1,18,1,18,5,18,524,8,18,10,18,12,18,527,9,18,1,19,3,19,530,8,19,
        1,19,1,19,5,19,534,8,19,10,19,12,19,537,9,19,1,19,1,19,1,19,3,19,
        542,8,19,1,19,1,19,1,19,1,19,1,19,1,19,5,19,550,8,19,10,19,12,19,
        553,9,19,1,19,1,19,1,19,1,19,3,19,559,8,19,1,19,1,19,5,19,563,8,
        19,10,19,12,19,566,9,19,1,19,1,19,1,19,1,19,3,19,572,8,19,1,20,1,
        20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,3,21,586,8,
        21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,
        24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,3,
        25,613,8,25,1,26,1,26,3,26,617,8,26,1,27,1,27,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,3,27,629,8,27,1,28,1,28,1,28,1,28,1,28,3,28,
        636,8,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
        1,29,3,29,650,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
        1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,672,
        8,30,1,31,1,31,1,31,1,31,3,31,678,8,31,1,32,5,32,681,8,32,10,32,
        12,32,684,9,32,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,
        1,34,1,34,1,34,1,34,1,34,1,34,3,34,702,8,34,1,35,1,35,1,35,1,35,
        1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,5,35,716,8,35,10,35,12,35,
        719,9,35,1,36,1,36,1,36,1,36,3,36,725,8,36,1,36,1,36,1,36,1,36,1,
        36,1,36,1,36,1,36,5,36,735,8,36,10,36,12,36,738,9,36,1,37,1,37,1,
        37,1,37,1,37,1,37,1,37,3,37,747,8,37,1,38,1,38,1,38,1,38,1,38,1,
        38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,762,8,38,1,39,1,39,1,
        39,1,329,2,70,72,40,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
        34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
        78,0,8,2,0,1,1,56,56,1,0,44,45,3,0,39,39,41,41,43,43,3,0,38,38,40,
        40,42,42,1,0,33,35,1,0,38,43,1,0,49,50,1,0,28,30,884,0,83,1,0,0,
        0,2,150,1,0,0,0,4,153,1,0,0,0,6,193,1,0,0,0,8,202,1,0,0,0,10,204,
        1,0,0,0,12,235,1,0,0,0,14,237,1,0,0,0,16,281,1,0,0,0,18,284,1,0,
        0,0,20,305,1,0,0,0,22,324,1,0,0,0,24,337,1,0,0,0,26,339,1,0,0,0,
        28,346,1,0,0,0,30,422,1,0,0,0,32,434,1,0,0,0,34,512,1,0,0,0,36,520,
        1,0,0,0,38,571,1,0,0,0,40,573,1,0,0,0,42,579,1,0,0,0,44,587,1,0,
        0,0,46,590,1,0,0,0,48,596,1,0,0,0,50,612,1,0,0,0,52,616,1,0,0,0,
        54,628,1,0,0,0,56,635,1,0,0,0,58,649,1,0,0,0,60,671,1,0,0,0,62,677,
        1,0,0,0,64,682,1,0,0,0,66,687,1,0,0,0,68,701,1,0,0,0,70,703,1,0,
        0,0,72,724,1,0,0,0,74,746,1,0,0,0,76,761,1,0,0,0,78,763,1,0,0,0,
        80,82,3,40,20,0,81,80,1,0,0,0,82,85,1,0,0,0,83,81,1,0,0,0,83,84,
        1,0,0,0,84,108,1,0,0,0,85,83,1,0,0,0,86,107,3,2,1,0,87,95,3,18,9,
        0,88,90,5,1,0,0,89,88,1,0,0,0,90,93,1,0,0,0,91,89,1,0,0,0,91,92,
        1,0,0,0,92,96,1,0,0,0,93,91,1,0,0,0,94,96,5,56,0,0,95,91,1,0,0,0,
        95,94,1,0,0,0,96,107,1,0,0,0,97,104,3,20,10,0,98,100,5,1,0,0,99,
        98,1,0,0,0,100,101,1,0,0,0,101,99,1,0,0,0,101,102,1,0,0,0,102,105,
        1,0,0,0,103,105,5,56,0,0,104,99,1,0,0,0,104,103,1,0,0,0,105,107,
        1,0,0,0,106,86,1,0,0,0,106,87,1,0,0,0,106,97,1,0,0,0,107,110,1,0,
        0,0,108,106,1,0,0,0,108,109,1,0,0,0,109,111,1,0,0,0,110,108,1,0,
        0,0,111,112,5,0,0,1,112,1,1,0,0,0,113,120,3,4,2,0,114,116,5,1,0,
        0,115,114,1,0,0,0,116,117,1,0,0,0,117,115,1,0,0,0,117,118,1,0,0,
        0,118,121,1,0,0,0,119,121,5,56,0,0,120,115,1,0,0,0,120,119,1,0,0,
        0,121,151,1,0,0,0,122,129,3,38,19,0,123,125,5,1,0,0,124,123,1,0,
        0,0,125,126,1,0,0,0,126,124,1,0,0,0,126,127,1,0,0,0,127,130,1,0,
        0,0,128,130,5,56,0,0,129,124,1,0,0,0,129,128,1,0,0,0,130,151,1,0,
        0,0,131,138,3,70,35,0,132,134,5,1,0,0,133,132,1,0,0,0,134,135,1,
        0,0,0,135,133,1,0,0,0,135,136,1,0,0,0,136,139,1,0,0,0,137,139,5,
        56,0,0,138,133,1,0,0,0,138,137,1,0,0,0,139,151,1,0,0,0,140,147,3,
        58,29,0,141,143,5,1,0,0,142,141,1,0,0,0,143,144,1,0,0,0,144,142,
        1,0,0,0,144,145,1,0,0,0,145,148,1,0,0,0,146,148,5,56,0,0,147,142,
        1,0,0,0,147,146,1,0,0,0,148,151,1,0,0,0,149,151,3,32,16,0,150,113,
        1,0,0,0,150,122,1,0,0,0,150,131,1,0,0,0,150,140,1,0,0,0,150,149,
        1,0,0,0,151,3,1,0,0,0,152,154,5,11,0,0,153,152,1,0,0,0,153,154,1,
        0,0,0,154,155,1,0,0,0,155,161,5,25,0,0,156,157,3,56,28,0,157,158,
        5,2,0,0,158,160,1,0,0,0,159,156,1,0,0,0,160,163,1,0,0,0,161,159,
        1,0,0,0,161,162,1,0,0,0,162,164,1,0,0,0,163,161,1,0,0,0,164,165,
        3,56,28,0,165,5,1,0,0,0,166,167,5,21,0,0,167,171,5,3,0,0,168,172,
        3,66,33,0,169,172,3,78,39,0,170,172,5,32,0,0,171,168,1,0,0,0,171,
        169,1,0,0,0,171,170,1,0,0,0,172,173,1,0,0,0,173,194,5,4,0,0,174,
        175,5,21,0,0,175,178,5,3,0,0,176,179,5,31,0,0,177,179,5,32,0,0,178,
        176,1,0,0,0,178,177,1,0,0,0,179,190,1,0,0,0,180,186,5,2,0,0,181,
        182,3,8,4,0,182,183,5,2,0,0,183,185,1,0,0,0,184,181,1,0,0,0,185,
        188,1,0,0,0,186,184,1,0,0,0,186,187,1,0,0,0,187,189,1,0,0,0,188,
        186,1,0,0,0,189,191,3,8,4,0,190,180,1,0,0,0,190,191,1,0,0,0,191,
        192,1,0,0,0,192,194,5,4,0,0,193,166,1,0,0,0,193,174,1,0,0,0,194,
        7,1,0,0,0,195,203,3,66,33,0,196,203,3,78,39,0,197,203,3,60,30,0,
        198,203,3,62,31,0,199,203,3,68,34,0,200,203,3,70,35,0,201,203,5,
        32,0,0,202,195,1,0,0,0,202,196,1,0,0,0,202,197,1,0,0,0,202,198,1,
        0,0,0,202,199,1,0,0,0,202,200,1,0,0,0,202,201,1,0,0,0,203,9,1,0,
        0,0,204,205,5,23,0,0,205,208,5,3,0,0,206,209,5,31,0,0,207,209,5,
        32,0,0,208,206,1,0,0,0,208,207,1,0,0,0,209,210,1,0,0,0,210,219,5,
        2,0,0,211,213,5,48,0,0,212,211,1,0,0,0,212,213,1,0,0,0,213,214,1,
        0,0,0,214,215,3,12,6,0,215,216,5,2,0,0,216,218,1,0,0,0,217,212,1,
        0,0,0,218,221,1,0,0,0,219,217,1,0,0,0,219,220,1,0,0,0,220,223,1,
        0,0,0,221,219,1,0,0,0,222,224,5,48,0,0,223,222,1,0,0,0,223,224,1,
        0,0,0,224,225,1,0,0,0,225,226,3,12,6,0,226,227,5,4,0,0,227,11,1,
        0,0,0,228,236,3,66,33,0,229,236,3,62,31,0,230,236,3,60,30,0,231,
        232,5,48,0,0,232,236,3,66,33,0,233,234,5,48,0,0,234,236,3,62,31,
        0,235,228,1,0,0,0,235,229,1,0,0,0,235,230,1,0,0,0,235,231,1,0,0,
        0,235,233,1,0,0,0,236,13,1,0,0,0,237,242,3,16,8,0,238,239,5,2,0,
        0,239,241,3,16,8,0,240,238,1,0,0,0,241,244,1,0,0,0,242,240,1,0,0,
        0,242,243,1,0,0,0,243,15,1,0,0,0,244,242,1,0,0,0,245,247,5,11,0,
        0,246,245,1,0,0,0,246,247,1,0,0,0,247,248,1,0,0,0,248,250,5,25,0,
        0,249,251,5,48,0,0,250,249,1,0,0,0,250,251,1,0,0,0,251,255,1,0,0,
        0,252,254,5,33,0,0,253,252,1,0,0,0,254,257,1,0,0,0,255,253,1,0,0,
        0,255,256,1,0,0,0,256,258,1,0,0,0,257,255,1,0,0,0,258,261,5,27,0,
        0,259,260,5,47,0,0,260,262,3,70,35,0,261,259,1,0,0,0,261,262,1,0,
        0,0,262,282,1,0,0,0,263,265,5,11,0,0,264,263,1,0,0,0,264,265,1,0,
        0,0,265,266,1,0,0,0,266,270,5,25,0,0,267,269,5,33,0,0,268,267,1,
        0,0,0,269,272,1,0,0,0,270,268,1,0,0,0,270,271,1,0,0,0,271,274,1,
        0,0,0,272,270,1,0,0,0,273,275,5,48,0,0,274,273,1,0,0,0,274,275,1,
        0,0,0,275,276,1,0,0,0,276,279,5,27,0,0,277,278,5,47,0,0,278,280,
        3,70,35,0,279,277,1,0,0,0,279,280,1,0,0,0,280,282,1,0,0,0,281,246,
        1,0,0,0,281,264,1,0,0,0,282,17,1,0,0,0,283,285,5,11,0,0,284,283,
        1,0,0,0,284,285,1,0,0,0,285,288,1,0,0,0,286,289,5,25,0,0,287,289,
        5,26,0,0,288,286,1,0,0,0,288,287,1,0,0,0,289,293,1,0,0,0,290,292,
        5,33,0,0,291,290,1,0,0,0,292,295,1,0,0,0,293,291,1,0,0,0,293,294,
        1,0,0,0,294,296,1,0,0,0,295,293,1,0,0,0,296,297,5,27,0,0,297,299,
        5,3,0,0,298,300,3,14,7,0,299,298,1,0,0,0,299,300,1,0,0,0,300,301,
        1,0,0,0,301,302,5,4,0,0,302,303,3,28,14,0,303,19,1,0,0,0,304,306,
        5,11,0,0,305,304,1,0,0,0,305,306,1,0,0,0,306,309,1,0,0,0,307,310,
        5,25,0,0,308,310,5,26,0,0,309,307,1,0,0,0,309,308,1,0,0,0,310,314,
        1,0,0,0,311,313,5,33,0,0,312,311,1,0,0,0,313,316,1,0,0,0,314,312,
        1,0,0,0,314,315,1,0,0,0,315,317,1,0,0,0,316,314,1,0,0,0,317,318,
        5,27,0,0,318,320,5,3,0,0,319,321,3,14,7,0,320,319,1,0,0,0,320,321,
        1,0,0,0,321,322,1,0,0,0,322,323,5,4,0,0,323,21,1,0,0,0,324,329,3,
        24,12,0,325,326,5,2,0,0,326,328,3,24,12,0,327,325,1,0,0,0,328,331,
        1,0,0,0,329,330,1,0,0,0,329,327,1,0,0,0,330,23,1,0,0,0,331,329,1,
        0,0,0,332,338,3,66,33,0,333,338,3,62,31,0,334,338,3,26,13,0,335,
        338,3,78,39,0,336,338,3,70,35,0,337,332,1,0,0,0,337,333,1,0,0,0,
        337,334,1,0,0,0,337,335,1,0,0,0,337,336,1,0,0,0,338,25,1,0,0,0,339,
        340,5,27,0,0,340,342,5,3,0,0,341,343,3,22,11,0,342,341,1,0,0,0,342,
        343,1,0,0,0,343,344,1,0,0,0,344,345,5,4,0,0,345,27,1,0,0,0,346,417,
        5,5,0,0,347,354,3,6,3,0,348,350,5,1,0,0,349,348,1,0,0,0,350,351,
        1,0,0,0,351,349,1,0,0,0,351,352,1,0,0,0,352,355,1,0,0,0,353,355,
        5,56,0,0,354,349,1,0,0,0,354,353,1,0,0,0,355,416,1,0,0,0,356,363,
        3,10,5,0,357,359,5,1,0,0,358,357,1,0,0,0,359,360,1,0,0,0,360,358,
        1,0,0,0,360,361,1,0,0,0,361,364,1,0,0,0,362,364,5,56,0,0,363,358,
        1,0,0,0,363,362,1,0,0,0,364,416,1,0,0,0,365,416,3,30,15,0,366,374,
        3,42,21,0,367,369,5,1,0,0,368,367,1,0,0,0,369,372,1,0,0,0,370,368,
        1,0,0,0,370,371,1,0,0,0,371,375,1,0,0,0,372,370,1,0,0,0,373,375,
        5,56,0,0,374,370,1,0,0,0,374,373,1,0,0,0,375,416,1,0,0,0,376,384,
        3,46,23,0,377,379,5,1,0,0,378,377,1,0,0,0,379,382,1,0,0,0,380,378,
        1,0,0,0,380,381,1,0,0,0,381,385,1,0,0,0,382,380,1,0,0,0,383,385,
        5,56,0,0,384,380,1,0,0,0,384,383,1,0,0,0,385,416,1,0,0,0,386,394,
        3,48,24,0,387,389,5,1,0,0,388,387,1,0,0,0,389,392,1,0,0,0,390,388,
        1,0,0,0,390,391,1,0,0,0,391,395,1,0,0,0,392,390,1,0,0,0,393,395,
        5,56,0,0,394,390,1,0,0,0,394,393,1,0,0,0,395,416,1,0,0,0,396,403,
        3,58,29,0,397,399,5,1,0,0,398,397,1,0,0,0,399,400,1,0,0,0,400,398,
        1,0,0,0,400,401,1,0,0,0,401,404,1,0,0,0,402,404,5,56,0,0,403,398,
        1,0,0,0,403,402,1,0,0,0,404,416,1,0,0,0,405,416,3,2,1,0,406,413,
        3,68,34,0,407,409,5,1,0,0,408,407,1,0,0,0,409,410,1,0,0,0,410,408,
        1,0,0,0,410,411,1,0,0,0,411,414,1,0,0,0,412,414,5,56,0,0,413,408,
        1,0,0,0,413,412,1,0,0,0,414,416,1,0,0,0,415,347,1,0,0,0,415,356,
        1,0,0,0,415,365,1,0,0,0,415,366,1,0,0,0,415,376,1,0,0,0,415,386,
        1,0,0,0,415,396,1,0,0,0,415,405,1,0,0,0,415,406,1,0,0,0,416,419,
        1,0,0,0,417,415,1,0,0,0,417,418,1,0,0,0,418,420,1,0,0,0,419,417,
        1,0,0,0,420,421,5,6,0,0,421,29,1,0,0,0,422,424,5,22,0,0,423,425,
        3,70,35,0,424,423,1,0,0,0,424,425,1,0,0,0,425,426,1,0,0,0,426,431,
        5,1,0,0,427,430,3,2,1,0,428,430,3,30,15,0,429,427,1,0,0,0,429,428,
        1,0,0,0,430,433,1,0,0,0,431,429,1,0,0,0,431,432,1,0,0,0,432,31,1,
        0,0,0,433,431,1,0,0,0,434,507,5,5,0,0,435,442,3,6,3,0,436,438,5,
        1,0,0,437,436,1,0,0,0,438,439,1,0,0,0,439,437,1,0,0,0,439,440,1,
        0,0,0,440,443,1,0,0,0,441,443,5,56,0,0,442,437,1,0,0,0,442,441,1,
        0,0,0,443,506,1,0,0,0,444,451,3,10,5,0,445,447,5,1,0,0,446,445,1,
        0,0,0,447,448,1,0,0,0,448,446,1,0,0,0,448,449,1,0,0,0,449,452,1,
        0,0,0,450,452,5,56,0,0,451,446,1,0,0,0,451,450,1,0,0,0,452,506,1,
        0,0,0,453,506,3,30,15,0,454,462,3,42,21,0,455,457,5,1,0,0,456,455,
        1,0,0,0,457,460,1,0,0,0,458,456,1,0,0,0,458,459,1,0,0,0,459,463,
        1,0,0,0,460,458,1,0,0,0,461,463,5,56,0,0,462,458,1,0,0,0,462,461,
        1,0,0,0,463,506,1,0,0,0,464,472,3,46,23,0,465,467,5,1,0,0,466,465,
        1,0,0,0,467,470,1,0,0,0,468,466,1,0,0,0,468,469,1,0,0,0,469,473,
        1,0,0,0,470,468,1,0,0,0,471,473,5,56,0,0,472,468,1,0,0,0,472,471,
        1,0,0,0,473,506,1,0,0,0,474,482,3,48,24,0,475,477,5,1,0,0,476,475,
        1,0,0,0,477,480,1,0,0,0,478,476,1,0,0,0,478,479,1,0,0,0,479,483,
        1,0,0,0,480,478,1,0,0,0,481,483,5,56,0,0,482,478,1,0,0,0,482,481,
        1,0,0,0,483,506,1,0,0,0,484,491,3,58,29,0,485,487,5,1,0,0,486,485,
        1,0,0,0,487,488,1,0,0,0,488,486,1,0,0,0,488,489,1,0,0,0,489,492,
        1,0,0,0,490,492,5,56,0,0,491,486,1,0,0,0,491,490,1,0,0,0,492,506,
        1,0,0,0,493,506,3,36,18,0,494,506,3,34,17,0,495,506,3,2,1,0,496,
        503,3,68,34,0,497,499,5,1,0,0,498,497,1,0,0,0,499,500,1,0,0,0,500,
        498,1,0,0,0,500,501,1,0,0,0,501,504,1,0,0,0,502,504,5,56,0,0,503,
        498,1,0,0,0,503,502,1,0,0,0,504,506,1,0,0,0,505,435,1,0,0,0,505,
        444,1,0,0,0,505,453,1,0,0,0,505,454,1,0,0,0,505,464,1,0,0,0,505,
        474,1,0,0,0,505,484,1,0,0,0,505,493,1,0,0,0,505,494,1,0,0,0,505,
        495,1,0,0,0,505,496,1,0,0,0,506,509,1,0,0,0,507,505,1,0,0,0,507,
        508,1,0,0,0,508,510,1,0,0,0,509,507,1,0,0,0,510,511,5,6,0,0,511,
        33,1,0,0,0,512,513,5,17,0,0,513,517,7,0,0,0,514,516,3,2,1,0,515,
        514,1,0,0,0,516,519,1,0,0,0,517,515,1,0,0,0,517,518,1,0,0,0,518,
        35,1,0,0,0,519,517,1,0,0,0,520,521,5,16,0,0,521,525,7,0,0,0,522,
        524,3,2,1,0,523,522,1,0,0,0,524,527,1,0,0,0,525,523,1,0,0,0,525,
        526,1,0,0,0,526,37,1,0,0,0,527,525,1,0,0,0,528,530,5,11,0,0,529,
        528,1,0,0,0,529,530,1,0,0,0,530,531,1,0,0,0,531,535,5,25,0,0,532,
        534,5,33,0,0,533,532,1,0,0,0,534,537,1,0,0,0,535,533,1,0,0,0,535,
        536,1,0,0,0,536,538,1,0,0,0,537,535,1,0,0,0,538,539,5,27,0,0,539,
        541,5,7,0,0,540,542,5,28,0,0,541,540,1,0,0,0,541,542,1,0,0,0,542,
        543,1,0,0,0,543,544,5,8,0,0,544,545,5,47,0,0,545,551,5,5,0,0,546,
        547,3,78,39,0,547,548,5,2,0,0,548,550,1,0,0,0,549,546,1,0,0,0,550,
        553,1,0,0,0,551,549,1,0,0,0,551,552,1,0,0,0,552,554,1,0,0,0,553,
        551,1,0,0,0,554,555,3,78,39,0,555,556,5,6,0,0,556,572,1,0,0,0,557,
        559,5,11,0,0,558,557,1,0,0,0,558,559,1,0,0,0,559,560,1,0,0,0,560,
        564,5,25,0,0,561,563,5,33,0,0,562,561,1,0,0,0,563,566,1,0,0,0,564,
        562,1,0,0,0,564,565,1,0,0,0,565,567,1,0,0,0,566,564,1,0,0,0,567,
        568,5,27,0,0,568,569,5,7,0,0,569,570,5,28,0,0,570,572,5,8,0,0,571,
        529,1,0,0,0,571,558,1,0,0,0,572,39,1,0,0,0,573,574,5,24,0,0,574,
        575,5,38,0,0,575,576,5,27,0,0,576,577,5,9,0,0,577,578,5,40,0,0,578,
        41,1,0,0,0,579,580,5,12,0,0,580,581,5,3,0,0,581,582,3,52,26,0,582,
        583,5,4,0,0,583,585,3,32,16,0,584,586,3,44,22,0,585,584,1,0,0,0,
        585,586,1,0,0,0,586,43,1,0,0,0,587,588,5,13,0,0,588,589,3,32,16,
        0,589,45,1,0,0,0,590,591,5,15,0,0,591,592,5,3,0,0,592,593,3,52,26,
        0,593,594,5,4,0,0,594,595,3,32,16,0,595,47,1,0,0,0,596,597,5,14,
        0,0,597,598,5,3,0,0,598,599,3,50,25,0,599,600,5,1,0,0,600,601,3,
        52,26,0,601,602,5,1,0,0,602,603,3,54,27,0,603,604,5,4,0,0,604,605,
        3,32,16,0,605,49,1,0,0,0,606,607,5,25,0,0,607,608,3,64,32,0,608,
        609,5,47,0,0,609,610,3,70,35,0,610,613,1,0,0,0,611,613,3,58,29,0,
        612,606,1,0,0,0,612,611,1,0,0,0,613,51,1,0,0,0,614,617,3,68,34,0,
        615,617,3,70,35,0,616,614,1,0,0,0,616,615,1,0,0,0,617,53,1,0,0,0,
        618,619,5,49,0,0,619,629,3,66,33,0,620,621,5,50,0,0,621,629,3,66,
        33,0,622,623,3,66,33,0,623,624,5,49,0,0,624,629,1,0,0,0,625,626,
        3,66,33,0,626,627,5,50,0,0,627,629,1,0,0,0,628,618,1,0,0,0,628,620,
        1,0,0,0,628,622,1,0,0,0,628,625,1,0,0,0,629,55,1,0,0,0,630,631,3,
        64,32,0,631,632,5,47,0,0,632,633,3,70,35,0,633,636,1,0,0,0,634,636,
        3,64,32,0,635,630,1,0,0,0,635,634,1,0,0,0,636,57,1,0,0,0,637,638,
        3,66,33,0,638,639,5,47,0,0,639,640,3,70,35,0,640,650,1,0,0,0,641,
        642,3,62,31,0,642,643,5,47,0,0,643,644,3,70,35,0,644,650,1,0,0,0,
        645,646,3,60,30,0,646,647,5,47,0,0,647,648,3,70,35,0,648,650,1,0,
        0,0,649,637,1,0,0,0,649,641,1,0,0,0,649,645,1,0,0,0,650,59,1,0,0,
        0,651,652,3,64,32,0,652,653,5,7,0,0,653,654,5,28,0,0,654,655,5,8,
        0,0,655,672,1,0,0,0,656,657,3,64,32,0,657,658,5,7,0,0,658,659,3,
        70,35,0,659,660,5,8,0,0,660,672,1,0,0,0,661,662,3,62,31,0,662,663,
        5,7,0,0,663,664,5,28,0,0,664,665,5,8,0,0,665,672,1,0,0,0,666,667,
        3,62,31,0,667,668,5,7,0,0,668,669,3,70,35,0,669,670,5,8,0,0,670,
        672,1,0,0,0,671,651,1,0,0,0,671,656,1,0,0,0,671,661,1,0,0,0,671,
        666,1,0,0,0,672,61,1,0,0,0,673,674,5,33,0,0,674,678,3,62,31,0,675,
        676,5,33,0,0,676,678,3,66,33,0,677,673,1,0,0,0,677,675,1,0,0,0,678,
        63,1,0,0,0,679,681,5,33,0,0,680,679,1,0,0,0,681,684,1,0,0,0,682,
        680,1,0,0,0,682,683,1,0,0,0,683,685,1,0,0,0,684,682,1,0,0,0,685,
        686,5,27,0,0,686,65,1,0,0,0,687,688,5,27,0,0,688,67,1,0,0,0,689,
        690,3,70,35,0,690,691,7,1,0,0,691,692,3,70,35,0,692,702,1,0,0,0,
        693,694,3,70,35,0,694,695,7,2,0,0,695,696,3,70,35,0,696,702,1,0,
        0,0,697,698,3,70,35,0,698,699,7,3,0,0,699,700,3,70,35,0,700,702,
        1,0,0,0,701,689,1,0,0,0,701,693,1,0,0,0,701,697,1,0,0,0,702,69,1,
        0,0,0,703,704,6,35,-1,0,704,705,3,72,36,0,705,717,1,0,0,0,706,707,
        10,3,0,0,707,708,5,36,0,0,708,716,3,72,36,0,709,710,10,2,0,0,710,
        711,5,37,0,0,711,716,3,72,36,0,712,713,10,1,0,0,713,714,7,1,0,0,
        714,716,3,72,36,0,715,706,1,0,0,0,715,709,1,0,0,0,715,712,1,0,0,
        0,716,719,1,0,0,0,717,715,1,0,0,0,717,718,1,0,0,0,718,71,1,0,0,0,
        719,717,1,0,0,0,720,721,6,36,-1,0,721,725,3,74,37,0,722,723,5,46,
        0,0,723,725,3,74,37,0,724,720,1,0,0,0,724,722,1,0,0,0,725,736,1,
        0,0,0,726,727,10,4,0,0,727,728,7,4,0,0,728,735,3,74,37,0,729,730,
        10,3,0,0,730,731,7,5,0,0,731,735,3,74,37,0,732,733,10,1,0,0,733,
        735,7,6,0,0,734,726,1,0,0,0,734,729,1,0,0,0,734,732,1,0,0,0,735,
        738,1,0,0,0,736,734,1,0,0,0,736,737,1,0,0,0,737,73,1,0,0,0,738,736,
        1,0,0,0,739,747,3,76,38,0,740,741,5,37,0,0,741,747,3,74,37,0,742,
        743,5,36,0,0,743,747,3,74,37,0,744,745,7,6,0,0,745,747,3,74,37,0,
        746,739,1,0,0,0,746,740,1,0,0,0,746,742,1,0,0,0,746,744,1,0,0,0,
        747,75,1,0,0,0,748,762,3,66,33,0,749,762,3,78,39,0,750,751,5,48,
        0,0,751,762,3,66,33,0,752,762,3,62,31,0,753,754,5,3,0,0,754,755,
        3,70,35,0,755,756,5,4,0,0,756,762,1,0,0,0,757,758,5,10,0,0,758,762,
        3,76,38,0,759,762,3,26,13,0,760,762,3,60,30,0,761,748,1,0,0,0,761,
        749,1,0,0,0,761,750,1,0,0,0,761,752,1,0,0,0,761,753,1,0,0,0,761,
        757,1,0,0,0,761,759,1,0,0,0,761,760,1,0,0,0,762,77,1,0,0,0,763,764,
        7,7,0,0,764,79,1,0,0,0,111,83,91,95,101,104,106,108,117,120,126,
        129,135,138,144,147,150,153,161,171,178,186,190,193,202,208,212,
        219,223,235,242,246,250,255,261,264,270,274,279,281,284,288,293,
        299,305,309,314,320,329,337,342,351,354,360,363,370,374,380,384,
        390,394,400,403,410,413,415,417,424,429,431,439,442,448,451,458,
        462,468,472,478,482,488,491,500,503,505,507,517,525,529,535,541,
        551,558,564,571,585,612,616,628,635,649,671,677,682,701,715,717,
        724,734,736,746,761
    ]

class MathParser ( Parser ):

    grammarFileName = "Math.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "','", "'('", "')'", "'{'", "'}'", 
                     "'['", "']'", "'.h'", "<INVALID>", "'const'", "'if'", 
                     "'else'", "'for'", "'while'", "'break'", "'continue'", 
                     "'switch'", "'case'", "'default'", "'printf'", "'return'", 
                     "'scanf'", "'#include'", "<INVALID>", "'void'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'*'", "'/'", "'%'", "'+'", "'-'", "'<'", 
                     "'<='", "'>'", "'>='", "'=='", "'!='", "'||'", "'&&'", 
                     "'!'", "'='", "'&'", "'++'", "'--'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "CAST", "CONST", "IF", "ELSE", 
                      "FOR", "WHILE", "BREAK", "CONTINUE", "SWITCH", "CASE", 
                      "DEFAULT", "PRINTF", "RETURN", "SCANF", "INCLUDE", 
                      "TYPE", "VOID", "VAR_NAME", "INT", "FLOAT", "CHAR", 
                      "SCANF_STRING", "STRING", "STR", "DIV", "MOD", "SUM", 
                      "DIF", "LT", "LEQ", "GT", "GEQ", "EQ", "NEQ", "OR_OP", 
                      "AND_OP", "NOT_OP", "ASSIGN", "ADDR", "INCR", "DECR", 
                      "SP", "NEWLINE", "WS", "UNICODE_WS", "LN", "DELIM", 
                      "COMMENT", "LCOMMENT" ]

    RULE_math = 0
    RULE_instr = 1
    RULE_declr = 2
    RULE_printf = 3
    RULE_printf_arg = 4
    RULE_scanf = 5
    RULE_scanf_arg = 6
    RULE_param_list = 7
    RULE_param_declr = 8
    RULE_func_defn = 9
    RULE_func_decl = 10
    RULE_arg_list = 11
    RULE_func_arg = 12
    RULE_func_call = 13
    RULE_func_scope = 14
    RULE_return_instr = 15
    RULE_scope = 16
    RULE_cont_instr = 17
    RULE_break_instr = 18
    RULE_array_decl = 19
    RULE_incl_stat = 20
    RULE_if_cond = 21
    RULE_else_cond = 22
    RULE_while_loop = 23
    RULE_for_loop = 24
    RULE_init = 25
    RULE_cond = 26
    RULE_incr = 27
    RULE_var_decl = 28
    RULE_assign = 29
    RULE_array_el = 30
    RULE_deref = 31
    RULE_lvar = 32
    RULE_rvar = 33
    RULE_comp = 34
    RULE_expr = 35
    RULE_term = 36
    RULE_factor = 37
    RULE_primary = 38
    RULE_rtype = 39

    ruleNames =  [ "math", "instr", "declr", "printf", "printf_arg", "scanf", 
                   "scanf_arg", "param_list", "param_declr", "func_defn", 
                   "func_decl", "arg_list", "func_arg", "func_call", "func_scope", 
                   "return_instr", "scope", "cont_instr", "break_instr", 
                   "array_decl", "incl_stat", "if_cond", "else_cond", "while_loop", 
                   "for_loop", "init", "cond", "incr", "var_decl", "assign", 
                   "array_el", "deref", "lvar", "rvar", "comp", "expr", 
                   "term", "factor", "primary", "rtype" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    CAST=10
    CONST=11
    IF=12
    ELSE=13
    FOR=14
    WHILE=15
    BREAK=16
    CONTINUE=17
    SWITCH=18
    CASE=19
    DEFAULT=20
    PRINTF=21
    RETURN=22
    SCANF=23
    INCLUDE=24
    TYPE=25
    VOID=26
    VAR_NAME=27
    INT=28
    FLOAT=29
    CHAR=30
    SCANF_STRING=31
    STRING=32
    STR=33
    DIV=34
    MOD=35
    SUM=36
    DIF=37
    LT=38
    LEQ=39
    GT=40
    GEQ=41
    EQ=42
    NEQ=43
    OR_OP=44
    AND_OP=45
    NOT_OP=46
    ASSIGN=47
    ADDR=48
    INCR=49
    DECR=50
    SP=51
    NEWLINE=52
    WS=53
    UNICODE_WS=54
    LN=55
    DELIM=56
    COMMENT=57
    LCOMMENT=58

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class MathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(MathParser.EOF, 0)

        def incl_stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Incl_statContext)
            else:
                return self.getTypedRuleContext(MathParser.Incl_statContext,i)


        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.InstrContext)
            else:
                return self.getTypedRuleContext(MathParser.InstrContext,i)


        def func_defn(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Func_defnContext)
            else:
                return self.getTypedRuleContext(MathParser.Func_defnContext,i)


        def func_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Func_declContext)
            else:
                return self.getTypedRuleContext(MathParser.Func_declContext,i)


        def DELIM(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.DELIM)
            else:
                return self.getToken(MathParser.DELIM, i)

        def getRuleIndex(self):
            return MathParser.RULE_math

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMath" ):
                listener.enterMath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMath" ):
                listener.exitMath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMath" ):
                return visitor.visitMath(self)
            else:
                return visitor.visitChildren(self)




    def math(self):

        localctx = MathParser.MathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_math)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 83
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 80
                self.incl_stat()
                self.state = 85
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 108
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 2040910443449384) != 0:
                self.state = 106
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
                if la_ == 1:
                    self.state = 86
                    self.instr()
                    pass

                elif la_ == 2:
                    self.state = 87
                    self.func_defn()
                    self.state = 95
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [-1, 1, 3, 5, 10, 11, 25, 26, 27, 28, 29, 30, 33, 36, 37, 46, 48, 49, 50]:
                        self.state = 91
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 88
                            self.match(MathParser.T__0)
                            self.state = 93
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [56]:
                        self.state = 94
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 3:
                    self.state = 97
                    self.func_decl()
                    self.state = 104
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 99 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 98
                            self.match(MathParser.T__0)
                            self.state = 101 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [56]:
                        self.state = 103
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass


                self.state = 110
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 111
            self.match(MathParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declr(self):
            return self.getTypedRuleContext(MathParser.DeclrContext,0)


        def DELIM(self):
            return self.getToken(MathParser.DELIM, 0)

        def array_decl(self):
            return self.getTypedRuleContext(MathParser.Array_declContext,0)


        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def assign(self):
            return self.getTypedRuleContext(MathParser.AssignContext,0)


        def scope(self):
            return self.getTypedRuleContext(MathParser.ScopeContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstr" ):
                listener.enterInstr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstr" ):
                listener.exitInstr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstr" ):
                return visitor.visitInstr(self)
            else:
                return visitor.visitChildren(self)




    def instr(self):

        localctx = MathParser.InstrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_instr)
        self._la = 0 # Token type
        try:
            self.state = 150
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 113
                self.declr()
                self.state = 120
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1]:
                    self.state = 115 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 114
                        self.match(MathParser.T__0)
                        self.state = 117 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1):
                            break

                    pass
                elif token in [56]:
                    self.state = 119
                    self.match(MathParser.DELIM)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 122
                self.array_decl()
                self.state = 129
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1]:
                    self.state = 124 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 123
                        self.match(MathParser.T__0)
                        self.state = 126 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1):
                            break

                    pass
                elif token in [56]:
                    self.state = 128
                    self.match(MathParser.DELIM)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 131
                self.expr(0)
                self.state = 138
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1]:
                    self.state = 133 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 132
                        self.match(MathParser.T__0)
                        self.state = 135 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1):
                            break

                    pass
                elif token in [56]:
                    self.state = 137
                    self.match(MathParser.DELIM)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 140
                self.assign()
                self.state = 147
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1]:
                    self.state = 142 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 141
                        self.match(MathParser.T__0)
                        self.state = 144 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1):
                            break

                    pass
                elif token in [56]:
                    self.state = 146
                    self.match(MathParser.DELIM)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 149
                self.scope()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(MathParser.TYPE, 0)

        def var_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Var_declContext)
            else:
                return self.getTypedRuleContext(MathParser.Var_declContext,i)


        def CONST(self):
            return self.getToken(MathParser.CONST, 0)

        def getRuleIndex(self):
            return MathParser.RULE_declr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclr" ):
                listener.enterDeclr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclr" ):
                listener.exitDeclr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclr" ):
                return visitor.visitDeclr(self)
            else:
                return visitor.visitChildren(self)




    def declr(self):

        localctx = MathParser.DeclrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_declr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 153
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 152
                self.match(MathParser.CONST)


            self.state = 155
            self.match(MathParser.TYPE)
            self.state = 161
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 156
                    self.var_decl()
                    self.state = 157
                    self.match(MathParser.T__1) 
                self.state = 163
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

            self.state = 164
            self.var_decl()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrintfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.print_val = None # Token
            self.format_string = None # Token
            self._printf_arg = None # Printf_argContext
            self.vars_ = list() # of Printf_argContexts

        def PRINTF(self):
            return self.getToken(MathParser.PRINTF, 0)

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def rtype(self):
            return self.getTypedRuleContext(MathParser.RtypeContext,0)


        def STRING(self):
            return self.getToken(MathParser.STRING, 0)

        def SCANF_STRING(self):
            return self.getToken(MathParser.SCANF_STRING, 0)

        def printf_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Printf_argContext)
            else:
                return self.getTypedRuleContext(MathParser.Printf_argContext,i)


        def getRuleIndex(self):
            return MathParser.RULE_printf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintf" ):
                listener.enterPrintf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintf" ):
                listener.exitPrintf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrintf" ):
                return visitor.visitPrintf(self)
            else:
                return visitor.visitChildren(self)




    def printf(self):

        localctx = MathParser.PrintfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_printf)
        self._la = 0 # Token type
        try:
            self.state = 193
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 166
                self.match(MathParser.PRINTF)
                self.state = 167
                self.match(MathParser.T__2)
                self.state = 171
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [27]:
                    self.state = 168
                    self.rvar()
                    pass
                elif token in [28, 29, 30]:
                    self.state = 169
                    self.rtype()
                    pass
                elif token in [32]:
                    self.state = 170
                    localctx.print_val = self.match(MathParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 173
                self.match(MathParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 174
                self.match(MathParser.PRINTF)
                self.state = 175
                self.match(MathParser.T__2)
                self.state = 178
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [31]:
                    self.state = 176
                    localctx.format_string = self.match(MathParser.SCANF_STRING)
                    pass
                elif token in [32]:
                    self.state = 177
                    localctx.format_string = self.match(MathParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 190
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 180
                    self.match(MathParser.T__1)
                    self.state = 186
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,20,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 181
                            localctx._printf_arg = self.printf_arg()
                            localctx.vars_.append(localctx._printf_arg)
                            self.state = 182
                            self.match(MathParser.T__1) 
                        self.state = 188
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

                    self.state = 189
                    localctx._printf_arg = self.printf_arg()
                    localctx.vars_.append(localctx._printf_arg)


                self.state = 192
                self.match(MathParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Printf_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def rtype(self):
            return self.getTypedRuleContext(MathParser.RtypeContext,0)


        def array_el(self):
            return self.getTypedRuleContext(MathParser.Array_elContext,0)


        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def comp(self):
            return self.getTypedRuleContext(MathParser.CompContext,0)


        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def STRING(self):
            return self.getToken(MathParser.STRING, 0)

        def getRuleIndex(self):
            return MathParser.RULE_printf_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintf_arg" ):
                listener.enterPrintf_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintf_arg" ):
                listener.exitPrintf_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrintf_arg" ):
                return visitor.visitPrintf_arg(self)
            else:
                return visitor.visitChildren(self)




    def printf_arg(self):

        localctx = MathParser.Printf_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_printf_arg)
        try:
            self.state = 202
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 195
                self.rvar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 196
                self.rtype()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 197
                self.array_el()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 198
                self.deref()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 199
                self.comp()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 200
                self.expr(0)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 201
                self.match(MathParser.STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScanfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.format_string = None # Token
            self._scanf_arg = None # Scanf_argContext
            self.vars_ = list() # of Scanf_argContexts

        def SCANF(self):
            return self.getToken(MathParser.SCANF, 0)

        def scanf_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Scanf_argContext)
            else:
                return self.getTypedRuleContext(MathParser.Scanf_argContext,i)


        def SCANF_STRING(self):
            return self.getToken(MathParser.SCANF_STRING, 0)

        def STRING(self):
            return self.getToken(MathParser.STRING, 0)

        def ADDR(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.ADDR)
            else:
                return self.getToken(MathParser.ADDR, i)

        def getRuleIndex(self):
            return MathParser.RULE_scanf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScanf" ):
                listener.enterScanf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScanf" ):
                listener.exitScanf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScanf" ):
                return visitor.visitScanf(self)
            else:
                return visitor.visitChildren(self)




    def scanf(self):

        localctx = MathParser.ScanfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_scanf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 204
            self.match(MathParser.SCANF)
            self.state = 205
            self.match(MathParser.T__2)
            self.state = 208
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [31]:
                self.state = 206
                localctx.format_string = self.match(MathParser.SCANF_STRING)
                pass
            elif token in [32]:
                self.state = 207
                localctx.format_string = self.match(MathParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 210
            self.match(MathParser.T__1)
            self.state = 219
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 212
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                    if la_ == 1:
                        self.state = 211
                        self.match(MathParser.ADDR)


                    self.state = 214
                    localctx._scanf_arg = self.scanf_arg()
                    localctx.vars_.append(localctx._scanf_arg)
                    self.state = 215
                    self.match(MathParser.T__1) 
                self.state = 221
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

            self.state = 223
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 222
                self.match(MathParser.ADDR)


            self.state = 225
            localctx._scanf_arg = self.scanf_arg()
            localctx.vars_.append(localctx._scanf_arg)
            self.state = 226
            self.match(MathParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Scanf_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def array_el(self):
            return self.getTypedRuleContext(MathParser.Array_elContext,0)


        def ADDR(self):
            return self.getToken(MathParser.ADDR, 0)

        def getRuleIndex(self):
            return MathParser.RULE_scanf_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScanf_arg" ):
                listener.enterScanf_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScanf_arg" ):
                listener.exitScanf_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScanf_arg" ):
                return visitor.visitScanf_arg(self)
            else:
                return visitor.visitChildren(self)




    def scanf_arg(self):

        localctx = MathParser.Scanf_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_scanf_arg)
        try:
            self.state = 235
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 228
                self.rvar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 229
                self.deref()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 230
                self.array_el()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 231
                self.match(MathParser.ADDR)
                self.state = 232
                self.rvar()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 233
                self.match(MathParser.ADDR)
                self.state = 234
                self.deref()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._param_declr = None # Param_declrContext
            self.params = list() # of Param_declrContexts

        def param_declr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Param_declrContext)
            else:
                return self.getTypedRuleContext(MathParser.Param_declrContext,i)


        def getRuleIndex(self):
            return MathParser.RULE_param_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_list" ):
                listener.enterParam_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_list" ):
                listener.exitParam_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_list" ):
                return visitor.visitParam_list(self)
            else:
                return visitor.visitChildren(self)




    def param_list(self):

        localctx = MathParser.Param_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_param_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 237
            localctx._param_declr = self.param_declr()
            localctx.params.append(localctx._param_declr)
            self.state = 242
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2:
                self.state = 238
                self.match(MathParser.T__1)
                self.state = 239
                localctx._param_declr = self.param_declr()
                localctx.params.append(localctx._param_declr)
                self.state = 244
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_declrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.const = None # Token
            self.type_ = None # Token
            self.reference = None # Token
            self._STR = None # Token
            self.ptr = list() # of Tokens
            self.var = None # Token
            self.default = None # ExprContext

        def TYPE(self):
            return self.getToken(MathParser.TYPE, 0)

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def ASSIGN(self):
            return self.getToken(MathParser.ASSIGN, 0)

        def CONST(self):
            return self.getToken(MathParser.CONST, 0)

        def ADDR(self):
            return self.getToken(MathParser.ADDR, 0)

        def STR(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.STR)
            else:
                return self.getToken(MathParser.STR, i)

        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_param_declr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_declr" ):
                listener.enterParam_declr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_declr" ):
                listener.exitParam_declr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_declr" ):
                return visitor.visitParam_declr(self)
            else:
                return visitor.visitChildren(self)




    def param_declr(self):

        localctx = MathParser.Param_declrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_param_declr)
        self._la = 0 # Token type
        try:
            self.state = 281
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 246
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 245
                    localctx.const = self.match(MathParser.CONST)


                self.state = 248
                localctx.type_ = self.match(MathParser.TYPE)
                self.state = 250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==48:
                    self.state = 249
                    localctx.reference = self.match(MathParser.ADDR)


                self.state = 255
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==33:
                    self.state = 252
                    localctx._STR = self.match(MathParser.STR)
                    localctx.ptr.append(localctx._STR)
                    self.state = 257
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 258
                localctx.var = self.match(MathParser.VAR_NAME)
                self.state = 261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47:
                    self.state = 259
                    self.match(MathParser.ASSIGN)
                    self.state = 260
                    localctx.default = self.expr(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 264
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 263
                    localctx.const = self.match(MathParser.CONST)


                self.state = 266
                localctx.type_ = self.match(MathParser.TYPE)
                self.state = 270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==33:
                    self.state = 267
                    localctx._STR = self.match(MathParser.STR)
                    localctx.ptr.append(localctx._STR)
                    self.state = 272
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 274
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==48:
                    self.state = 273
                    localctx.reference = self.match(MathParser.ADDR)


                self.state = 276
                localctx.var = self.match(MathParser.VAR_NAME)
                self.state = 279
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47:
                    self.state = 277
                    self.match(MathParser.ASSIGN)
                    self.state = 278
                    localctx.default = self.expr(0)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_defnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.const = None # Token
            self.type_ = None # Token
            self._STR = None # Token
            self.ptr = list() # of Tokens
            self.name = None # Token
            self.params = None # Param_listContext

        def func_scope(self):
            return self.getTypedRuleContext(MathParser.Func_scopeContext,0)


        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def TYPE(self):
            return self.getToken(MathParser.TYPE, 0)

        def VOID(self):
            return self.getToken(MathParser.VOID, 0)

        def CONST(self):
            return self.getToken(MathParser.CONST, 0)

        def STR(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.STR)
            else:
                return self.getToken(MathParser.STR, i)

        def param_list(self):
            return self.getTypedRuleContext(MathParser.Param_listContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_func_defn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_defn" ):
                listener.enterFunc_defn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_defn" ):
                listener.exitFunc_defn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_defn" ):
                return visitor.visitFunc_defn(self)
            else:
                return visitor.visitChildren(self)




    def func_defn(self):

        localctx = MathParser.Func_defnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_func_defn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 284
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 283
                localctx.const = self.match(MathParser.CONST)


            self.state = 288
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25]:
                self.state = 286
                localctx.type_ = self.match(MathParser.TYPE)
                pass
            elif token in [26]:
                self.state = 287
                localctx.type_ = self.match(MathParser.VOID)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==33:
                self.state = 290
                localctx._STR = self.match(MathParser.STR)
                localctx.ptr.append(localctx._STR)
                self.state = 295
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 296
            localctx.name = self.match(MathParser.VAR_NAME)
            self.state = 297
            self.match(MathParser.T__2)
            self.state = 299
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11 or _la==25:
                self.state = 298
                localctx.params = self.param_list()


            self.state = 301
            self.match(MathParser.T__3)
            self.state = 302
            self.func_scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.const = None # Token
            self.type_ = None # Token
            self._STR = None # Token
            self.ptr = list() # of Tokens
            self.name = None # Token
            self.params = None # Param_listContext

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def TYPE(self):
            return self.getToken(MathParser.TYPE, 0)

        def VOID(self):
            return self.getToken(MathParser.VOID, 0)

        def CONST(self):
            return self.getToken(MathParser.CONST, 0)

        def STR(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.STR)
            else:
                return self.getToken(MathParser.STR, i)

        def param_list(self):
            return self.getTypedRuleContext(MathParser.Param_listContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_func_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_decl" ):
                listener.enterFunc_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_decl" ):
                listener.exitFunc_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_decl" ):
                return visitor.visitFunc_decl(self)
            else:
                return visitor.visitChildren(self)




    def func_decl(self):

        localctx = MathParser.Func_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_func_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 304
                localctx.const = self.match(MathParser.CONST)


            self.state = 309
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25]:
                self.state = 307
                localctx.type_ = self.match(MathParser.TYPE)
                pass
            elif token in [26]:
                self.state = 308
                localctx.type_ = self.match(MathParser.VOID)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==33:
                self.state = 311
                localctx._STR = self.match(MathParser.STR)
                localctx.ptr.append(localctx._STR)
                self.state = 316
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 317
            localctx.name = self.match(MathParser.VAR_NAME)
            self.state = 318
            self.match(MathParser.T__2)
            self.state = 320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11 or _la==25:
                self.state = 319
                localctx.params = self.param_list()


            self.state = 322
            self.match(MathParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arg_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._func_arg = None # Func_argContext
            self.args = list() # of Func_argContexts

        def func_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Func_argContext)
            else:
                return self.getTypedRuleContext(MathParser.Func_argContext,i)


        def getRuleIndex(self):
            return MathParser.RULE_arg_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArg_list" ):
                listener.enterArg_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArg_list" ):
                listener.exitArg_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArg_list" ):
                return visitor.visitArg_list(self)
            else:
                return visitor.visitChildren(self)




    def arg_list(self):

        localctx = MathParser.Arg_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_arg_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 324
            localctx._func_arg = self.func_arg()
            localctx.args.append(localctx._func_arg)
            self.state = 329
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 325
                    self.match(MathParser.T__1)
                    self.state = 326
                    localctx._func_arg = self.func_arg()
                    localctx.args.append(localctx._func_arg) 
                self.state = 331
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def func_call(self):
            return self.getTypedRuleContext(MathParser.Func_callContext,0)


        def rtype(self):
            return self.getTypedRuleContext(MathParser.RtypeContext,0)


        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_func_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_arg" ):
                listener.enterFunc_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_arg" ):
                listener.exitFunc_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_arg" ):
                return visitor.visitFunc_arg(self)
            else:
                return visitor.visitChildren(self)




    def func_arg(self):

        localctx = MathParser.Func_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_func_arg)
        try:
            self.state = 337
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 332
                self.rvar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 333
                self.deref()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 334
                self.func_call()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 335
                self.rtype()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 336
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self.args = None # Arg_listContext

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def arg_list(self):
            return self.getTypedRuleContext(MathParser.Arg_listContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_call" ):
                listener.enterFunc_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_call" ):
                listener.exitFunc_call(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_call" ):
                return visitor.visitFunc_call(self)
            else:
                return visitor.visitChildren(self)




    def func_call(self):

        localctx = MathParser.Func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_func_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 339
            localctx.name = self.match(MathParser.VAR_NAME)
            self.state = 340
            self.match(MathParser.T__2)
            self.state = 342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 2040910342784008) != 0:
                self.state = 341
                localctx.args = self.arg_list()


            self.state = 344
            self.match(MathParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_scopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def printf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.PrintfContext)
            else:
                return self.getTypedRuleContext(MathParser.PrintfContext,i)


        def scanf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.ScanfContext)
            else:
                return self.getTypedRuleContext(MathParser.ScanfContext,i)


        def return_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Return_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Return_instrContext,i)


        def if_cond(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.If_condContext)
            else:
                return self.getTypedRuleContext(MathParser.If_condContext,i)


        def while_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.While_loopContext)
            else:
                return self.getTypedRuleContext(MathParser.While_loopContext,i)


        def for_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.For_loopContext)
            else:
                return self.getTypedRuleContext(MathParser.For_loopContext,i)


        def assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.AssignContext)
            else:
                return self.getTypedRuleContext(MathParser.AssignContext,i)


        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.InstrContext)
            else:
                return self.getTypedRuleContext(MathParser.InstrContext,i)


        def comp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.CompContext)
            else:
                return self.getTypedRuleContext(MathParser.CompContext,i)


        def DELIM(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.DELIM)
            else:
                return self.getToken(MathParser.DELIM, i)

        def getRuleIndex(self):
            return MathParser.RULE_func_scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_scope" ):
                listener.enterFunc_scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_scope" ):
                listener.exitFunc_scope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_scope" ):
                return visitor.visitFunc_scope(self)
            else:
                return visitor.visitChildren(self)




    def func_scope(self):

        localctx = MathParser.Func_scopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_func_scope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 346
            self.match(MathParser.T__4)
            self.state = 417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 2040910391073832) != 0:
                self.state = 415
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                if la_ == 1:
                    self.state = 347
                    self.printf()
                    self.state = 354
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 349 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 348
                            self.match(MathParser.T__0)
                            self.state = 351 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [56]:
                        self.state = 353
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 2:
                    self.state = 356
                    self.scanf()
                    self.state = 363
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 358 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 357
                            self.match(MathParser.T__0)
                            self.state = 360 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [56]:
                        self.state = 362
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 3:
                    self.state = 365
                    self.return_instr()
                    pass

                elif la_ == 4:
                    self.state = 366
                    self.if_cond()
                    self.state = 374
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 10, 11, 12, 14, 15, 21, 22, 23, 25, 27, 28, 29, 30, 33, 36, 37, 46, 48, 49, 50]:
                        self.state = 370
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 367
                            self.match(MathParser.T__0)
                            self.state = 372
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [56]:
                        self.state = 373
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 5:
                    self.state = 376
                    self.while_loop()
                    self.state = 384
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 10, 11, 12, 14, 15, 21, 22, 23, 25, 27, 28, 29, 30, 33, 36, 37, 46, 48, 49, 50]:
                        self.state = 380
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 377
                            self.match(MathParser.T__0)
                            self.state = 382
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [56]:
                        self.state = 383
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 6:
                    self.state = 386
                    self.for_loop()
                    self.state = 394
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 10, 11, 12, 14, 15, 21, 22, 23, 25, 27, 28, 29, 30, 33, 36, 37, 46, 48, 49, 50]:
                        self.state = 390
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 387
                            self.match(MathParser.T__0)
                            self.state = 392
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [56]:
                        self.state = 393
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 7:
                    self.state = 396
                    self.assign()
                    self.state = 403
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 398 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 397
                            self.match(MathParser.T__0)
                            self.state = 400 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [56]:
                        self.state = 402
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 8:
                    self.state = 405
                    self.instr()
                    pass

                elif la_ == 9:
                    self.state = 406
                    self.comp()
                    self.state = 413
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 408 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 407
                            self.match(MathParser.T__0)
                            self.state = 410 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [56]:
                        self.state = 412
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass


                self.state = 419
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 420
            self.match(MathParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ret_val = None # ExprContext

        def RETURN(self):
            return self.getToken(MathParser.RETURN, 0)

        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.InstrContext)
            else:
                return self.getTypedRuleContext(MathParser.InstrContext,i)


        def return_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Return_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Return_instrContext,i)


        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_return_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_instr" ):
                listener.enterReturn_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_instr" ):
                listener.exitReturn_instr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_instr" ):
                return visitor.visitReturn_instr(self)
            else:
                return visitor.visitChildren(self)




    def return_instr(self):

        localctx = MathParser.Return_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_return_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            self.match(MathParser.RETURN)
            self.state = 424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 2040910342784008) != 0:
                self.state = 423
                localctx.ret_val = self.expr(0)


            self.state = 426
            self.match(MathParser.T__0)
            self.state = 431
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 429
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [3, 5, 10, 11, 25, 27, 28, 29, 30, 33, 36, 37, 46, 48, 49, 50]:
                        self.state = 427
                        self.instr()
                        pass
                    elif token in [22]:
                        self.state = 428
                        self.return_instr()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 433
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def printf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.PrintfContext)
            else:
                return self.getTypedRuleContext(MathParser.PrintfContext,i)


        def scanf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.ScanfContext)
            else:
                return self.getTypedRuleContext(MathParser.ScanfContext,i)


        def return_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Return_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Return_instrContext,i)


        def if_cond(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.If_condContext)
            else:
                return self.getTypedRuleContext(MathParser.If_condContext,i)


        def while_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.While_loopContext)
            else:
                return self.getTypedRuleContext(MathParser.While_loopContext,i)


        def for_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.For_loopContext)
            else:
                return self.getTypedRuleContext(MathParser.For_loopContext,i)


        def assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.AssignContext)
            else:
                return self.getTypedRuleContext(MathParser.AssignContext,i)


        def break_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Break_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Break_instrContext,i)


        def cont_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Cont_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Cont_instrContext,i)


        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.InstrContext)
            else:
                return self.getTypedRuleContext(MathParser.InstrContext,i)


        def comp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.CompContext)
            else:
                return self.getTypedRuleContext(MathParser.CompContext,i)


        def DELIM(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.DELIM)
            else:
                return self.getToken(MathParser.DELIM, i)

        def getRuleIndex(self):
            return MathParser.RULE_scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScope" ):
                listener.enterScope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScope" ):
                listener.exitScope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScope" ):
                return visitor.visitScope(self)
            else:
                return visitor.visitChildren(self)




    def scope(self):

        localctx = MathParser.ScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_scope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 434
            self.match(MathParser.T__4)
            self.state = 507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 2040910391270440) != 0:
                self.state = 505
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                if la_ == 1:
                    self.state = 435
                    self.printf()
                    self.state = 442
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 437 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 436
                            self.match(MathParser.T__0)
                            self.state = 439 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [56]:
                        self.state = 441
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 2:
                    self.state = 444
                    self.scanf()
                    self.state = 451
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 446 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 445
                            self.match(MathParser.T__0)
                            self.state = 448 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [56]:
                        self.state = 450
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 3:
                    self.state = 453
                    self.return_instr()
                    pass

                elif la_ == 4:
                    self.state = 454
                    self.if_cond()
                    self.state = 462
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 10, 11, 12, 14, 15, 16, 17, 21, 22, 23, 25, 27, 28, 29, 30, 33, 36, 37, 46, 48, 49, 50]:
                        self.state = 458
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 455
                            self.match(MathParser.T__0)
                            self.state = 460
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [56]:
                        self.state = 461
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 5:
                    self.state = 464
                    self.while_loop()
                    self.state = 472
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 10, 11, 12, 14, 15, 16, 17, 21, 22, 23, 25, 27, 28, 29, 30, 33, 36, 37, 46, 48, 49, 50]:
                        self.state = 468
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 465
                            self.match(MathParser.T__0)
                            self.state = 470
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [56]:
                        self.state = 471
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 6:
                    self.state = 474
                    self.for_loop()
                    self.state = 482
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 10, 11, 12, 14, 15, 16, 17, 21, 22, 23, 25, 27, 28, 29, 30, 33, 36, 37, 46, 48, 49, 50]:
                        self.state = 478
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 475
                            self.match(MathParser.T__0)
                            self.state = 480
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [56]:
                        self.state = 481
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 7:
                    self.state = 484
                    self.assign()
                    self.state = 491
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 486 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 485
                            self.match(MathParser.T__0)
                            self.state = 488 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [56]:
                        self.state = 490
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 8:
                    self.state = 493
                    self.break_instr()
                    pass

                elif la_ == 9:
                    self.state = 494
                    self.cont_instr()
                    pass

                elif la_ == 10:
                    self.state = 495
                    self.instr()
                    pass

                elif la_ == 11:
                    self.state = 496
                    self.comp()
                    self.state = 503
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 498 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 497
                            self.match(MathParser.T__0)
                            self.state = 500 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [56]:
                        self.state = 502
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass


                self.state = 509
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 510
            self.match(MathParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cont_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(MathParser.CONTINUE, 0)

        def DELIM(self):
            return self.getToken(MathParser.DELIM, 0)

        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.InstrContext)
            else:
                return self.getTypedRuleContext(MathParser.InstrContext,i)


        def getRuleIndex(self):
            return MathParser.RULE_cont_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCont_instr" ):
                listener.enterCont_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCont_instr" ):
                listener.exitCont_instr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCont_instr" ):
                return visitor.visitCont_instr(self)
            else:
                return visitor.visitChildren(self)




    def cont_instr(self):

        localctx = MathParser.Cont_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_cont_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 512
            self.match(MathParser.CONTINUE)
            self.state = 513
            _la = self._input.LA(1)
            if not(_la==1 or _la==56):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 517
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,85,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 514
                    self.instr() 
                self.state = 519
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Break_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(MathParser.BREAK, 0)

        def DELIM(self):
            return self.getToken(MathParser.DELIM, 0)

        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.InstrContext)
            else:
                return self.getTypedRuleContext(MathParser.InstrContext,i)


        def getRuleIndex(self):
            return MathParser.RULE_break_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_instr" ):
                listener.enterBreak_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_instr" ):
                listener.exitBreak_instr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreak_instr" ):
                return visitor.visitBreak_instr(self)
            else:
                return visitor.visitChildren(self)




    def break_instr(self):

        localctx = MathParser.Break_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_break_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 520
            self.match(MathParser.BREAK)
            self.state = 521
            _la = self._input.LA(1)
            if not(_la==1 or _la==56):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 525
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,86,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 522
                    self.instr() 
                self.state = 527
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.const = None # Token
            self.type_ = None # Token
            self._STR = None # Token
            self.ptr = list() # of Tokens
            self.name = None # Token
            self.size = None # Token
            self._rtype = None # RtypeContext
            self.values = list() # of RtypeContexts

        def ASSIGN(self):
            return self.getToken(MathParser.ASSIGN, 0)

        def TYPE(self):
            return self.getToken(MathParser.TYPE, 0)

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def rtype(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.RtypeContext)
            else:
                return self.getTypedRuleContext(MathParser.RtypeContext,i)


        def CONST(self):
            return self.getToken(MathParser.CONST, 0)

        def STR(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.STR)
            else:
                return self.getToken(MathParser.STR, i)

        def INT(self):
            return self.getToken(MathParser.INT, 0)

        def getRuleIndex(self):
            return MathParser.RULE_array_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_decl" ):
                listener.enterArray_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_decl" ):
                listener.exitArray_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_decl" ):
                return visitor.visitArray_decl(self)
            else:
                return visitor.visitChildren(self)




    def array_decl(self):

        localctx = MathParser.Array_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_array_decl)
        self._la = 0 # Token type
        try:
            self.state = 571
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 529
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 528
                    localctx.const = self.match(MathParser.CONST)


                self.state = 531
                localctx.type_ = self.match(MathParser.TYPE)
                self.state = 535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==33:
                    self.state = 532
                    localctx._STR = self.match(MathParser.STR)
                    localctx.ptr.append(localctx._STR)
                    self.state = 537
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 538
                localctx.name = self.match(MathParser.VAR_NAME)
                self.state = 539
                self.match(MathParser.T__6)
                self.state = 541
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==28:
                    self.state = 540
                    localctx.size = self.match(MathParser.INT)


                self.state = 543
                self.match(MathParser.T__7)
                self.state = 544
                self.match(MathParser.ASSIGN)
                self.state = 545
                self.match(MathParser.T__4)
                self.state = 551
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 546
                        localctx._rtype = self.rtype()
                        localctx.values.append(localctx._rtype)
                        self.state = 547
                        self.match(MathParser.T__1) 
                    self.state = 553
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

                self.state = 554
                localctx._rtype = self.rtype()
                localctx.values.append(localctx._rtype)
                self.state = 555
                self.match(MathParser.T__5)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 558
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 557
                    localctx.const = self.match(MathParser.CONST)


                self.state = 560
                localctx.type_ = self.match(MathParser.TYPE)
                self.state = 564
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==33:
                    self.state = 561
                    localctx._STR = self.match(MathParser.STR)
                    localctx.ptr.append(localctx._STR)
                    self.state = 566
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 567
                localctx.name = self.match(MathParser.VAR_NAME)
                self.state = 568
                self.match(MathParser.T__6)
                self.state = 569
                localctx.size = self.match(MathParser.INT)
                self.state = 570
                self.match(MathParser.T__7)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Incl_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.library = None # Token

        def INCLUDE(self):
            return self.getToken(MathParser.INCLUDE, 0)

        def LT(self):
            return self.getToken(MathParser.LT, 0)

        def GT(self):
            return self.getToken(MathParser.GT, 0)

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def getRuleIndex(self):
            return MathParser.RULE_incl_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncl_stat" ):
                listener.enterIncl_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncl_stat" ):
                listener.exitIncl_stat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncl_stat" ):
                return visitor.visitIncl_stat(self)
            else:
                return visitor.visitChildren(self)




    def incl_stat(self):

        localctx = MathParser.Incl_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_incl_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 573
            self.match(MathParser.INCLUDE)
            self.state = 574
            self.match(MathParser.LT)
            self.state = 575
            localctx.library = self.match(MathParser.VAR_NAME)
            self.state = 576
            self.match(MathParser.T__8)
            self.state = 577
            self.match(MathParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_condContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # CondContext

        def IF(self):
            return self.getToken(MathParser.IF, 0)

        def scope(self):
            return self.getTypedRuleContext(MathParser.ScopeContext,0)


        def cond(self):
            return self.getTypedRuleContext(MathParser.CondContext,0)


        def else_cond(self):
            return self.getTypedRuleContext(MathParser.Else_condContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_if_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_cond" ):
                listener.enterIf_cond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_cond" ):
                listener.exitIf_cond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_cond" ):
                return visitor.visitIf_cond(self)
            else:
                return visitor.visitChildren(self)




    def if_cond(self):

        localctx = MathParser.If_condContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_if_cond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 579
            self.match(MathParser.IF)
            self.state = 580
            self.match(MathParser.T__2)
            self.state = 581
            localctx.condition = self.cond()
            self.state = 582
            self.match(MathParser.T__3)
            self.state = 583
            self.scope()
            self.state = 585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 584
                self.else_cond()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_condContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(MathParser.ELSE, 0)

        def scope(self):
            return self.getTypedRuleContext(MathParser.ScopeContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_else_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_cond" ):
                listener.enterElse_cond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_cond" ):
                listener.exitElse_cond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_cond" ):
                return visitor.visitElse_cond(self)
            else:
                return visitor.visitChildren(self)




    def else_cond(self):

        localctx = MathParser.Else_condContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_else_cond)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 587
            self.match(MathParser.ELSE)
            self.state = 588
            self.scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # CondContext

        def WHILE(self):
            return self.getToken(MathParser.WHILE, 0)

        def scope(self):
            return self.getTypedRuleContext(MathParser.ScopeContext,0)


        def cond(self):
            return self.getTypedRuleContext(MathParser.CondContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_while_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_loop" ):
                listener.enterWhile_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_loop" ):
                listener.exitWhile_loop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_loop" ):
                return visitor.visitWhile_loop(self)
            else:
                return visitor.visitChildren(self)




    def while_loop(self):

        localctx = MathParser.While_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_while_loop)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590
            self.match(MathParser.WHILE)
            self.state = 591
            self.match(MathParser.T__2)
            self.state = 592
            localctx.condition = self.cond()
            self.state = 593
            self.match(MathParser.T__3)
            self.state = 594
            self.scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.initialization = None # InitContext
            self.condition = None # CondContext
            self.increment = None # IncrContext

        def FOR(self):
            return self.getToken(MathParser.FOR, 0)

        def scope(self):
            return self.getTypedRuleContext(MathParser.ScopeContext,0)


        def init(self):
            return self.getTypedRuleContext(MathParser.InitContext,0)


        def cond(self):
            return self.getTypedRuleContext(MathParser.CondContext,0)


        def incr(self):
            return self.getTypedRuleContext(MathParser.IncrContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_for_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_loop" ):
                listener.enterFor_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_loop" ):
                listener.exitFor_loop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_loop" ):
                return visitor.visitFor_loop(self)
            else:
                return visitor.visitChildren(self)




    def for_loop(self):

        localctx = MathParser.For_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_for_loop)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596
            self.match(MathParser.FOR)
            self.state = 597
            self.match(MathParser.T__2)
            self.state = 598
            localctx.initialization = self.init()
            self.state = 599
            self.match(MathParser.T__0)
            self.state = 600
            localctx.condition = self.cond()
            self.state = 601
            self.match(MathParser.T__0)
            self.state = 602
            localctx.increment = self.incr()
            self.state = 603
            self.match(MathParser.T__3)
            self.state = 604
            self.scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(MathParser.TYPE, 0)

        def lvar(self):
            return self.getTypedRuleContext(MathParser.LvarContext,0)


        def ASSIGN(self):
            return self.getToken(MathParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def assign(self):
            return self.getTypedRuleContext(MathParser.AssignContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_init

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInit" ):
                listener.enterInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInit" ):
                listener.exitInit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInit" ):
                return visitor.visitInit(self)
            else:
                return visitor.visitChildren(self)




    def init(self):

        localctx = MathParser.InitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_init)
        try:
            self.state = 612
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25]:
                self.enterOuterAlt(localctx, 1)
                self.state = 606
                self.match(MathParser.TYPE)
                self.state = 607
                self.lvar()
                self.state = 608
                self.match(MathParser.ASSIGN)
                self.state = 609
                self.expr(0)
                pass
            elif token in [27, 33]:
                self.enterOuterAlt(localctx, 2)
                self.state = 611
                self.assign()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp(self):
            return self.getTypedRuleContext(MathParser.CompContext,0)


        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCond" ):
                listener.enterCond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCond" ):
                listener.exitCond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCond" ):
                return visitor.visitCond(self)
            else:
                return visitor.visitChildren(self)




    def cond(self):

        localctx = MathParser.CondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_cond)
        try:
            self.state = 616
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 614
                self.comp()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 615
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCR(self):
            return self.getToken(MathParser.INCR, 0)

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def DECR(self):
            return self.getToken(MathParser.DECR, 0)

        def getRuleIndex(self):
            return MathParser.RULE_incr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncr" ):
                listener.enterIncr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncr" ):
                listener.exitIncr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncr" ):
                return visitor.visitIncr(self)
            else:
                return visitor.visitChildren(self)




    def incr(self):

        localctx = MathParser.IncrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_incr)
        try:
            self.state = 628
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 618
                self.match(MathParser.INCR)
                self.state = 619
                self.rvar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 620
                self.match(MathParser.DECR)
                self.state = 621
                self.rvar()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 622
                self.rvar()
                self.state = 623
                self.match(MathParser.INCR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 625
                self.rvar()
                self.state = 626
                self.match(MathParser.DECR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lvar(self):
            return self.getTypedRuleContext(MathParser.LvarContext,0)


        def ASSIGN(self):
            return self.getToken(MathParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_var_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_decl" ):
                listener.enterVar_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_decl" ):
                listener.exitVar_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVar_decl" ):
                return visitor.visitVar_decl(self)
            else:
                return visitor.visitChildren(self)




    def var_decl(self):

        localctx = MathParser.Var_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_var_decl)
        try:
            self.state = 635
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 630
                self.lvar()
                self.state = 631
                self.match(MathParser.ASSIGN)
                self.state = 632
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 634
                self.lvar()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def ASSIGN(self):
            return self.getToken(MathParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def array_el(self):
            return self.getTypedRuleContext(MathParser.Array_elContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign" ):
                listener.enterAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign" ):
                listener.exitAssign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssign" ):
                return visitor.visitAssign(self)
            else:
                return visitor.visitChildren(self)




    def assign(self):

        localctx = MathParser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_assign)
        try:
            self.state = 649
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 637
                self.rvar()
                self.state = 638
                self.match(MathParser.ASSIGN)
                self.state = 639
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 641
                self.deref()
                self.state = 642
                self.match(MathParser.ASSIGN)
                self.state = 643
                self.expr(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 645
                self.array_el()
                self.state = 646
                self.match(MathParser.ASSIGN)
                self.state = 647
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_elContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.index = None # Token

        def lvar(self):
            return self.getTypedRuleContext(MathParser.LvarContext,0)


        def INT(self):
            return self.getToken(MathParser.INT, 0)

        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_array_el

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_el" ):
                listener.enterArray_el(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_el" ):
                listener.exitArray_el(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_el" ):
                return visitor.visitArray_el(self)
            else:
                return visitor.visitChildren(self)




    def array_el(self):

        localctx = MathParser.Array_elContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_array_el)
        try:
            self.state = 671
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 651
                self.lvar()
                self.state = 652
                self.match(MathParser.T__6)
                self.state = 653
                localctx.index = self.match(MathParser.INT)
                self.state = 654
                self.match(MathParser.T__7)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 656
                self.lvar()
                self.state = 657
                self.match(MathParser.T__6)
                self.state = 658
                self.expr(0)
                self.state = 659
                self.match(MathParser.T__7)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 661
                self.deref()
                self.state = 662
                self.match(MathParser.T__6)
                self.state = 663
                localctx.index = self.match(MathParser.INT)
                self.state = 664
                self.match(MathParser.T__7)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 666
                self.deref()
                self.state = 667
                self.match(MathParser.T__6)
                self.state = 668
                self.expr(0)
                self.state = 669
                self.match(MathParser.T__7)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DerefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STR(self):
            return self.getToken(MathParser.STR, 0)

        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_deref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeref" ):
                listener.enterDeref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeref" ):
                listener.exitDeref(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeref" ):
                return visitor.visitDeref(self)
            else:
                return visitor.visitChildren(self)




    def deref(self):

        localctx = MathParser.DerefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_deref)
        try:
            self.state = 677
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 673
                self.match(MathParser.STR)
                self.state = 674
                self.deref()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 675
                self.match(MathParser.STR)
                self.state = 676
                self.rvar()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LvarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._STR = None # Token
            self.ptr = list() # of Tokens
            self.name = None # Token

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def STR(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.STR)
            else:
                return self.getToken(MathParser.STR, i)

        def getRuleIndex(self):
            return MathParser.RULE_lvar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLvar" ):
                listener.enterLvar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLvar" ):
                listener.exitLvar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLvar" ):
                return visitor.visitLvar(self)
            else:
                return visitor.visitChildren(self)




    def lvar(self):

        localctx = MathParser.LvarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_lvar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 682
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==33:
                self.state = 679
                localctx._STR = self.match(MathParser.STR)
                localctx.ptr.append(localctx._STR)
                self.state = 684
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 685
            localctx.name = self.match(MathParser.VAR_NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RvarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def getRuleIndex(self):
            return MathParser.RULE_rvar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRvar" ):
                listener.enterRvar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRvar" ):
                listener.exitRvar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRvar" ):
                return visitor.visitRvar(self)
            else:
                return visitor.visitChildren(self)




    def rvar(self):

        localctx = MathParser.RvarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_rvar)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 687
            self.match(MathParser.VAR_NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.ExprContext)
            else:
                return self.getTypedRuleContext(MathParser.ExprContext,i)


        def AND_OP(self):
            return self.getToken(MathParser.AND_OP, 0)

        def OR_OP(self):
            return self.getToken(MathParser.OR_OP, 0)

        def GEQ(self):
            return self.getToken(MathParser.GEQ, 0)

        def LEQ(self):
            return self.getToken(MathParser.LEQ, 0)

        def NEQ(self):
            return self.getToken(MathParser.NEQ, 0)

        def GT(self):
            return self.getToken(MathParser.GT, 0)

        def LT(self):
            return self.getToken(MathParser.LT, 0)

        def EQ(self):
            return self.getToken(MathParser.EQ, 0)

        def getRuleIndex(self):
            return MathParser.RULE_comp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp" ):
                listener.enterComp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp" ):
                listener.exitComp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp" ):
                return visitor.visitComp(self)
            else:
                return visitor.visitChildren(self)




    def comp(self):

        localctx = MathParser.CompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_comp)
        self._la = 0 # Token type
        try:
            self.state = 701
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 689
                self.expr(0)
                self.state = 690
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==44 or _la==45):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 691
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 693
                self.expr(0)
                self.state = 694
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 11544872091648) != 0):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 695
                self.expr(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 697
                self.expr(0)
                self.state = 698
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 5772436045824) != 0):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 699
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self):
            return self.getTypedRuleContext(MathParser.TermContext,0)


        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def SUM(self):
            return self.getToken(MathParser.SUM, 0)

        def DIF(self):
            return self.getToken(MathParser.DIF, 0)

        def AND_OP(self):
            return self.getToken(MathParser.AND_OP, 0)

        def OR_OP(self):
            return self.getToken(MathParser.OR_OP, 0)

        def getRuleIndex(self):
            return MathParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MathParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 70
        self.enterRecursionRule(localctx, 70, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 704
            self.term(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 717
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 715
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                    if la_ == 1:
                        localctx = MathParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 706
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 707
                        self.match(MathParser.SUM)
                        self.state = 708
                        self.term(0)
                        pass

                    elif la_ == 2:
                        localctx = MathParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 709
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 710
                        self.match(MathParser.DIF)
                        self.state = 711
                        self.term(0)
                        pass

                    elif la_ == 3:
                        localctx = MathParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 712
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 713
                        _la = self._input.LA(1)
                        if not(_la==44 or _la==45):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 714
                        self.term(0)
                        pass

             
                self.state = 719
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(MathParser.FactorContext,0)


        def NOT_OP(self):
            return self.getToken(MathParser.NOT_OP, 0)

        def term(self):
            return self.getTypedRuleContext(MathParser.TermContext,0)


        def STR(self):
            return self.getToken(MathParser.STR, 0)

        def DIV(self):
            return self.getToken(MathParser.DIV, 0)

        def MOD(self):
            return self.getToken(MathParser.MOD, 0)

        def GT(self):
            return self.getToken(MathParser.GT, 0)

        def LT(self):
            return self.getToken(MathParser.LT, 0)

        def GEQ(self):
            return self.getToken(MathParser.GEQ, 0)

        def LEQ(self):
            return self.getToken(MathParser.LEQ, 0)

        def EQ(self):
            return self.getToken(MathParser.EQ, 0)

        def NEQ(self):
            return self.getToken(MathParser.NEQ, 0)

        def INCR(self):
            return self.getToken(MathParser.INCR, 0)

        def DECR(self):
            return self.getToken(MathParser.DECR, 0)

        def getRuleIndex(self):
            return MathParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerm" ):
                return visitor.visitTerm(self)
            else:
                return visitor.visitChildren(self)



    def term(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MathParser.TermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 72
        self.enterRecursionRule(localctx, 72, self.RULE_term, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 10, 27, 28, 29, 30, 33, 36, 37, 48, 49, 50]:
                self.state = 721
                self.factor()
                pass
            elif token in [46]:
                self.state = 722
                self.match(MathParser.NOT_OP)
                self.state = 723
                self.factor()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 736
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,108,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 734
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                    if la_ == 1:
                        localctx = MathParser.TermContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_term)
                        self.state = 726
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 727
                        _la = self._input.LA(1)
                        if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 60129542144) != 0):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 728
                        self.factor()
                        pass

                    elif la_ == 2:
                        localctx = MathParser.TermContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_term)
                        self.state = 729
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 730
                        _la = self._input.LA(1)
                        if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 17317308137472) != 0):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 731
                        self.factor()
                        pass

                    elif la_ == 3:
                        localctx = MathParser.TermContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_term)
                        self.state = 732
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 733
                        _la = self._input.LA(1)
                        if not(_la==49 or _la==50):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

             
                self.state = 738
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary(self):
            return self.getTypedRuleContext(MathParser.PrimaryContext,0)


        def DIF(self):
            return self.getToken(MathParser.DIF, 0)

        def factor(self):
            return self.getTypedRuleContext(MathParser.FactorContext,0)


        def SUM(self):
            return self.getToken(MathParser.SUM, 0)

        def INCR(self):
            return self.getToken(MathParser.INCR, 0)

        def DECR(self):
            return self.getToken(MathParser.DECR, 0)

        def getRuleIndex(self):
            return MathParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFactor" ):
                return visitor.visitFactor(self)
            else:
                return visitor.visitChildren(self)




    def factor(self):

        localctx = MathParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_factor)
        self._la = 0 # Token type
        try:
            self.state = 746
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 10, 27, 28, 29, 30, 33, 48]:
                self.enterOuterAlt(localctx, 1)
                self.state = 739
                self.primary()
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 2)
                self.state = 740
                self.match(MathParser.DIF)
                self.state = 741
                self.factor()
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 3)
                self.state = 742
                self.match(MathParser.SUM)
                self.state = 743
                self.factor()
                pass
            elif token in [49, 50]:
                self.enterOuterAlt(localctx, 4)
                self.state = 744
                _la = self._input.LA(1)
                if not(_la==49 or _la==50):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 745
                self.factor()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def rtype(self):
            return self.getTypedRuleContext(MathParser.RtypeContext,0)


        def ADDR(self):
            return self.getToken(MathParser.ADDR, 0)

        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def CAST(self):
            return self.getToken(MathParser.CAST, 0)

        def primary(self):
            return self.getTypedRuleContext(MathParser.PrimaryContext,0)


        def func_call(self):
            return self.getTypedRuleContext(MathParser.Func_callContext,0)


        def array_el(self):
            return self.getTypedRuleContext(MathParser.Array_elContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimary" ):
                return visitor.visitPrimary(self)
            else:
                return visitor.visitChildren(self)




    def primary(self):

        localctx = MathParser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_primary)
        try:
            self.state = 761
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 748
                self.rvar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 749
                self.rtype()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 750
                self.match(MathParser.ADDR)
                self.state = 751
                self.rvar()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 752
                self.deref()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 753
                self.match(MathParser.T__2)
                self.state = 754
                self.expr(0)
                self.state = 755
                self.match(MathParser.T__3)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 757
                self.match(MathParser.CAST)
                self.state = 758
                self.primary()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 759
                self.func_call()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 760
                self.array_el()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RtypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(MathParser.INT, 0)

        def FLOAT(self):
            return self.getToken(MathParser.FLOAT, 0)

        def CHAR(self):
            return self.getToken(MathParser.CHAR, 0)

        def getRuleIndex(self):
            return MathParser.RULE_rtype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRtype" ):
                listener.enterRtype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRtype" ):
                listener.exitRtype(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRtype" ):
                return visitor.visitRtype(self)
            else:
                return visitor.visitChildren(self)




    def rtype(self):

        localctx = MathParser.RtypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_rtype)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 763
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 1879048192) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[35] = self.expr_sempred
        self._predicates[36] = self.term_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def term_sempred(self, localctx:TermContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 1)
         




