# Generated from Math.g4 by ANTLR 4.11.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,58,714,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,0,5,0,80,
        8,0,10,0,12,0,83,9,0,1,0,1,0,1,0,5,0,88,8,0,10,0,12,0,91,9,0,1,0,
        3,0,94,8,0,1,0,1,0,4,0,98,8,0,11,0,12,0,99,1,0,3,0,103,8,0,5,0,105,
        8,0,10,0,12,0,108,9,0,1,0,1,0,1,1,1,1,4,1,114,8,1,11,1,12,1,115,
        1,1,3,1,119,8,1,1,1,1,1,4,1,123,8,1,11,1,12,1,124,1,1,3,1,128,8,
        1,1,1,1,1,4,1,132,8,1,11,1,12,1,133,1,1,3,1,137,8,1,1,1,1,1,4,1,
        141,8,1,11,1,12,1,142,1,1,3,1,146,8,1,1,1,3,1,149,8,1,1,2,3,2,152,
        8,2,1,2,1,2,1,2,1,2,5,2,158,8,2,10,2,12,2,161,9,2,1,2,1,2,1,3,1,
        3,1,3,1,3,1,3,3,3,170,8,3,1,3,1,3,1,3,1,3,1,3,3,3,177,8,3,1,3,1,
        3,1,3,1,3,5,3,183,8,3,10,3,12,3,186,9,3,1,3,3,3,189,8,3,1,3,3,3,
        192,8,3,1,4,1,4,1,4,1,4,1,4,3,4,199,8,4,1,5,1,5,1,5,1,5,3,5,205,
        8,5,1,5,1,5,3,5,209,8,5,1,5,1,5,1,5,5,5,214,8,5,10,5,12,5,217,9,
        5,1,5,3,5,220,8,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,232,
        8,6,1,7,1,7,1,7,5,7,237,8,7,10,7,12,7,240,9,7,1,8,3,8,243,8,8,1,
        8,1,8,3,8,247,8,8,1,8,5,8,250,8,8,10,8,12,8,253,9,8,1,8,1,8,1,8,
        3,8,258,8,8,1,8,3,8,261,8,8,1,8,1,8,5,8,265,8,8,10,8,12,8,268,9,
        8,1,8,3,8,271,8,8,1,8,1,8,1,8,3,8,276,8,8,3,8,278,8,8,1,9,3,9,281,
        8,9,1,9,1,9,3,9,285,8,9,1,9,5,9,288,8,9,10,9,12,9,291,9,9,1,9,1,
        9,1,9,3,9,296,8,9,1,9,1,9,1,9,1,10,3,10,302,8,10,1,10,1,10,3,10,
        306,8,10,1,10,5,10,309,8,10,10,10,12,10,312,9,10,1,10,1,10,1,10,
        3,10,317,8,10,1,10,1,10,1,11,1,11,1,11,5,11,324,8,11,10,11,12,11,
        327,9,11,1,12,1,12,1,12,1,12,3,12,333,8,12,1,13,1,13,1,13,3,13,338,
        8,13,1,13,1,13,1,14,1,14,1,14,4,14,345,8,14,11,14,12,14,346,1,14,
        3,14,350,8,14,1,14,1,14,4,14,354,8,14,11,14,12,14,355,1,14,3,14,
        359,8,14,1,14,1,14,1,14,5,14,364,8,14,10,14,12,14,367,9,14,1,14,
        3,14,370,8,14,1,14,1,14,5,14,374,8,14,10,14,12,14,377,9,14,1,14,
        3,14,380,8,14,1,14,1,14,5,14,384,8,14,10,14,12,14,387,9,14,1,14,
        3,14,390,8,14,1,14,1,14,4,14,394,8,14,11,14,12,14,395,1,14,3,14,
        399,8,14,1,14,5,14,402,8,14,10,14,12,14,405,9,14,1,14,1,14,1,15,
        1,15,3,15,411,8,15,1,15,1,15,1,15,5,15,416,8,15,10,15,12,15,419,
        9,15,1,16,1,16,1,16,4,16,424,8,16,11,16,12,16,425,1,16,3,16,429,
        8,16,1,16,1,16,4,16,433,8,16,11,16,12,16,434,1,16,3,16,438,8,16,
        1,16,1,16,1,16,5,16,443,8,16,10,16,12,16,446,9,16,1,16,3,16,449,
        8,16,1,16,1,16,5,16,453,8,16,10,16,12,16,456,9,16,1,16,3,16,459,
        8,16,1,16,1,16,5,16,463,8,16,10,16,12,16,466,9,16,1,16,3,16,469,
        8,16,1,16,1,16,4,16,473,8,16,11,16,12,16,474,1,16,3,16,478,8,16,
        1,16,1,16,1,16,5,16,483,8,16,10,16,12,16,486,9,16,1,16,1,16,1,17,
        1,17,1,17,5,17,493,8,17,10,17,12,17,496,9,17,1,18,1,18,1,18,5,18,
        501,8,18,10,18,12,18,504,9,18,1,19,3,19,507,8,19,1,19,1,19,1,19,
        1,19,3,19,513,8,19,1,19,1,19,1,19,1,19,1,19,1,19,5,19,521,8,19,10,
        19,12,19,524,9,19,1,19,1,19,1,19,1,19,3,19,530,8,19,1,19,1,19,1,
        19,1,19,1,19,3,19,537,8,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,
        21,1,21,1,21,1,21,1,21,3,21,551,8,21,1,22,1,22,1,22,1,23,1,23,1,
        23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,
        24,1,25,1,25,1,25,1,25,1,25,1,25,3,25,578,8,25,1,26,1,26,1,26,1,
        26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,593,8,26,1,
        27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,605,8,27,1,
        28,1,28,1,28,1,28,1,28,3,28,612,8,28,1,29,1,29,1,29,1,29,1,29,1,
        29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,626,8,29,1,30,1,30,1,30,1,
        30,1,30,1,31,1,31,1,31,1,31,3,31,637,8,31,1,32,5,32,640,8,32,10,
        32,12,32,643,9,32,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,
        34,1,34,1,34,1,34,1,34,1,34,1,34,5,34,661,8,34,10,34,12,34,664,9,
        34,1,35,1,35,1,35,1,35,3,35,670,8,35,1,35,1,35,1,35,1,35,1,35,1,
        35,1,35,1,35,1,35,1,35,1,35,5,35,683,8,35,10,35,12,35,686,9,35,1,
        36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,695,8,36,1,37,1,37,1,37,1,
        37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,710,8,37,1,
        38,1,38,1,38,1,325,2,68,70,39,0,2,4,6,8,10,12,14,16,18,20,22,24,
        26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
        70,72,74,76,0,7,2,0,1,1,56,56,3,0,39,39,41,41,43,43,3,0,38,38,40,
        40,42,42,1,0,44,45,1,0,33,35,1,0,49,50,1,0,28,30,820,0,81,1,0,0,
        0,2,148,1,0,0,0,4,151,1,0,0,0,6,191,1,0,0,0,8,198,1,0,0,0,10,200,
        1,0,0,0,12,231,1,0,0,0,14,233,1,0,0,0,16,277,1,0,0,0,18,280,1,0,
        0,0,20,301,1,0,0,0,22,320,1,0,0,0,24,332,1,0,0,0,26,334,1,0,0,0,
        28,341,1,0,0,0,30,408,1,0,0,0,32,420,1,0,0,0,34,489,1,0,0,0,36,497,
        1,0,0,0,38,536,1,0,0,0,40,538,1,0,0,0,42,544,1,0,0,0,44,552,1,0,
        0,0,46,555,1,0,0,0,48,561,1,0,0,0,50,577,1,0,0,0,52,592,1,0,0,0,
        54,604,1,0,0,0,56,611,1,0,0,0,58,625,1,0,0,0,60,627,1,0,0,0,62,636,
        1,0,0,0,64,641,1,0,0,0,66,646,1,0,0,0,68,648,1,0,0,0,70,669,1,0,
        0,0,72,694,1,0,0,0,74,709,1,0,0,0,76,711,1,0,0,0,78,80,3,40,20,0,
        79,78,1,0,0,0,80,83,1,0,0,0,81,79,1,0,0,0,81,82,1,0,0,0,82,106,1,
        0,0,0,83,81,1,0,0,0,84,105,3,2,1,0,85,93,3,18,9,0,86,88,5,1,0,0,
        87,86,1,0,0,0,88,91,1,0,0,0,89,87,1,0,0,0,89,90,1,0,0,0,90,94,1,
        0,0,0,91,89,1,0,0,0,92,94,5,56,0,0,93,89,1,0,0,0,93,92,1,0,0,0,94,
        105,1,0,0,0,95,102,3,20,10,0,96,98,5,1,0,0,97,96,1,0,0,0,98,99,1,
        0,0,0,99,97,1,0,0,0,99,100,1,0,0,0,100,103,1,0,0,0,101,103,5,56,
        0,0,102,97,1,0,0,0,102,101,1,0,0,0,103,105,1,0,0,0,104,84,1,0,0,
        0,104,85,1,0,0,0,104,95,1,0,0,0,105,108,1,0,0,0,106,104,1,0,0,0,
        106,107,1,0,0,0,107,109,1,0,0,0,108,106,1,0,0,0,109,110,5,0,0,1,
        110,1,1,0,0,0,111,118,3,4,2,0,112,114,5,1,0,0,113,112,1,0,0,0,114,
        115,1,0,0,0,115,113,1,0,0,0,115,116,1,0,0,0,116,119,1,0,0,0,117,
        119,5,56,0,0,118,113,1,0,0,0,118,117,1,0,0,0,119,149,1,0,0,0,120,
        127,3,38,19,0,121,123,5,1,0,0,122,121,1,0,0,0,123,124,1,0,0,0,124,
        122,1,0,0,0,124,125,1,0,0,0,125,128,1,0,0,0,126,128,5,56,0,0,127,
        122,1,0,0,0,127,126,1,0,0,0,128,149,1,0,0,0,129,136,3,68,34,0,130,
        132,5,1,0,0,131,130,1,0,0,0,132,133,1,0,0,0,133,131,1,0,0,0,133,
        134,1,0,0,0,134,137,1,0,0,0,135,137,5,56,0,0,136,131,1,0,0,0,136,
        135,1,0,0,0,137,149,1,0,0,0,138,145,3,58,29,0,139,141,5,1,0,0,140,
        139,1,0,0,0,141,142,1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,0,143,
        146,1,0,0,0,144,146,5,56,0,0,145,140,1,0,0,0,145,144,1,0,0,0,146,
        149,1,0,0,0,147,149,3,32,16,0,148,111,1,0,0,0,148,120,1,0,0,0,148,
        129,1,0,0,0,148,138,1,0,0,0,148,147,1,0,0,0,149,3,1,0,0,0,150,152,
        5,11,0,0,151,150,1,0,0,0,151,152,1,0,0,0,152,153,1,0,0,0,153,159,
        5,25,0,0,154,155,3,56,28,0,155,156,5,2,0,0,156,158,1,0,0,0,157,154,
        1,0,0,0,158,161,1,0,0,0,159,157,1,0,0,0,159,160,1,0,0,0,160,162,
        1,0,0,0,161,159,1,0,0,0,162,163,3,56,28,0,163,5,1,0,0,0,164,165,
        5,21,0,0,165,169,5,3,0,0,166,170,3,66,33,0,167,170,3,76,38,0,168,
        170,5,32,0,0,169,166,1,0,0,0,169,167,1,0,0,0,169,168,1,0,0,0,170,
        171,1,0,0,0,171,192,5,4,0,0,172,173,5,21,0,0,173,176,5,3,0,0,174,
        177,5,31,0,0,175,177,5,32,0,0,176,174,1,0,0,0,176,175,1,0,0,0,177,
        188,1,0,0,0,178,184,5,2,0,0,179,180,3,8,4,0,180,181,5,2,0,0,181,
        183,1,0,0,0,182,179,1,0,0,0,183,186,1,0,0,0,184,182,1,0,0,0,184,
        185,1,0,0,0,185,187,1,0,0,0,186,184,1,0,0,0,187,189,3,8,4,0,188,
        178,1,0,0,0,188,189,1,0,0,0,189,190,1,0,0,0,190,192,5,4,0,0,191,
        164,1,0,0,0,191,172,1,0,0,0,192,7,1,0,0,0,193,199,3,66,33,0,194,
        199,3,76,38,0,195,199,3,60,30,0,196,199,3,62,31,0,197,199,5,32,0,
        0,198,193,1,0,0,0,198,194,1,0,0,0,198,195,1,0,0,0,198,196,1,0,0,
        0,198,197,1,0,0,0,199,9,1,0,0,0,200,201,5,23,0,0,201,204,5,3,0,0,
        202,205,5,31,0,0,203,205,5,32,0,0,204,202,1,0,0,0,204,203,1,0,0,
        0,205,206,1,0,0,0,206,215,5,2,0,0,207,209,5,48,0,0,208,207,1,0,0,
        0,208,209,1,0,0,0,209,210,1,0,0,0,210,211,3,12,6,0,211,212,5,2,0,
        0,212,214,1,0,0,0,213,208,1,0,0,0,214,217,1,0,0,0,215,213,1,0,0,
        0,215,216,1,0,0,0,216,219,1,0,0,0,217,215,1,0,0,0,218,220,5,48,0,
        0,219,218,1,0,0,0,219,220,1,0,0,0,220,221,1,0,0,0,221,222,3,12,6,
        0,222,223,5,4,0,0,223,11,1,0,0,0,224,232,3,66,33,0,225,232,3,62,
        31,0,226,232,3,60,30,0,227,228,5,48,0,0,228,232,3,66,33,0,229,230,
        5,48,0,0,230,232,3,62,31,0,231,224,1,0,0,0,231,225,1,0,0,0,231,226,
        1,0,0,0,231,227,1,0,0,0,231,229,1,0,0,0,232,13,1,0,0,0,233,238,3,
        16,8,0,234,235,5,2,0,0,235,237,3,16,8,0,236,234,1,0,0,0,237,240,
        1,0,0,0,238,236,1,0,0,0,238,239,1,0,0,0,239,15,1,0,0,0,240,238,1,
        0,0,0,241,243,5,11,0,0,242,241,1,0,0,0,242,243,1,0,0,0,243,244,1,
        0,0,0,244,246,5,25,0,0,245,247,5,48,0,0,246,245,1,0,0,0,246,247,
        1,0,0,0,247,251,1,0,0,0,248,250,5,33,0,0,249,248,1,0,0,0,250,253,
        1,0,0,0,251,249,1,0,0,0,251,252,1,0,0,0,252,254,1,0,0,0,253,251,
        1,0,0,0,254,257,5,27,0,0,255,256,5,47,0,0,256,258,3,68,34,0,257,
        255,1,0,0,0,257,258,1,0,0,0,258,278,1,0,0,0,259,261,5,11,0,0,260,
        259,1,0,0,0,260,261,1,0,0,0,261,262,1,0,0,0,262,266,5,25,0,0,263,
        265,5,33,0,0,264,263,1,0,0,0,265,268,1,0,0,0,266,264,1,0,0,0,266,
        267,1,0,0,0,267,270,1,0,0,0,268,266,1,0,0,0,269,271,5,48,0,0,270,
        269,1,0,0,0,270,271,1,0,0,0,271,272,1,0,0,0,272,275,5,27,0,0,273,
        274,5,47,0,0,274,276,3,68,34,0,275,273,1,0,0,0,275,276,1,0,0,0,276,
        278,1,0,0,0,277,242,1,0,0,0,277,260,1,0,0,0,278,17,1,0,0,0,279,281,
        5,11,0,0,280,279,1,0,0,0,280,281,1,0,0,0,281,284,1,0,0,0,282,285,
        5,25,0,0,283,285,5,26,0,0,284,282,1,0,0,0,284,283,1,0,0,0,285,289,
        1,0,0,0,286,288,5,33,0,0,287,286,1,0,0,0,288,291,1,0,0,0,289,287,
        1,0,0,0,289,290,1,0,0,0,290,292,1,0,0,0,291,289,1,0,0,0,292,293,
        5,27,0,0,293,295,5,3,0,0,294,296,3,14,7,0,295,294,1,0,0,0,295,296,
        1,0,0,0,296,297,1,0,0,0,297,298,5,4,0,0,298,299,3,28,14,0,299,19,
        1,0,0,0,300,302,5,11,0,0,301,300,1,0,0,0,301,302,1,0,0,0,302,305,
        1,0,0,0,303,306,5,25,0,0,304,306,5,26,0,0,305,303,1,0,0,0,305,304,
        1,0,0,0,306,310,1,0,0,0,307,309,5,33,0,0,308,307,1,0,0,0,309,312,
        1,0,0,0,310,308,1,0,0,0,310,311,1,0,0,0,311,313,1,0,0,0,312,310,
        1,0,0,0,313,314,5,27,0,0,314,316,5,3,0,0,315,317,3,14,7,0,316,315,
        1,0,0,0,316,317,1,0,0,0,317,318,1,0,0,0,318,319,5,4,0,0,319,21,1,
        0,0,0,320,325,3,24,12,0,321,322,5,2,0,0,322,324,3,24,12,0,323,321,
        1,0,0,0,324,327,1,0,0,0,325,326,1,0,0,0,325,323,1,0,0,0,326,23,1,
        0,0,0,327,325,1,0,0,0,328,333,3,66,33,0,329,333,3,62,31,0,330,333,
        3,26,13,0,331,333,3,76,38,0,332,328,1,0,0,0,332,329,1,0,0,0,332,
        330,1,0,0,0,332,331,1,0,0,0,333,25,1,0,0,0,334,335,5,27,0,0,335,
        337,5,3,0,0,336,338,3,22,11,0,337,336,1,0,0,0,337,338,1,0,0,0,338,
        339,1,0,0,0,339,340,5,4,0,0,340,27,1,0,0,0,341,403,5,5,0,0,342,349,
        3,6,3,0,343,345,5,1,0,0,344,343,1,0,0,0,345,346,1,0,0,0,346,344,
        1,0,0,0,346,347,1,0,0,0,347,350,1,0,0,0,348,350,5,56,0,0,349,344,
        1,0,0,0,349,348,1,0,0,0,350,402,1,0,0,0,351,358,3,10,5,0,352,354,
        5,1,0,0,353,352,1,0,0,0,354,355,1,0,0,0,355,353,1,0,0,0,355,356,
        1,0,0,0,356,359,1,0,0,0,357,359,5,56,0,0,358,353,1,0,0,0,358,357,
        1,0,0,0,359,402,1,0,0,0,360,402,3,30,15,0,361,369,3,42,21,0,362,
        364,5,1,0,0,363,362,1,0,0,0,364,367,1,0,0,0,365,363,1,0,0,0,365,
        366,1,0,0,0,366,370,1,0,0,0,367,365,1,0,0,0,368,370,5,56,0,0,369,
        365,1,0,0,0,369,368,1,0,0,0,370,402,1,0,0,0,371,379,3,46,23,0,372,
        374,5,1,0,0,373,372,1,0,0,0,374,377,1,0,0,0,375,373,1,0,0,0,375,
        376,1,0,0,0,376,380,1,0,0,0,377,375,1,0,0,0,378,380,5,56,0,0,379,
        375,1,0,0,0,379,378,1,0,0,0,380,402,1,0,0,0,381,389,3,48,24,0,382,
        384,5,1,0,0,383,382,1,0,0,0,384,387,1,0,0,0,385,383,1,0,0,0,385,
        386,1,0,0,0,386,390,1,0,0,0,387,385,1,0,0,0,388,390,5,56,0,0,389,
        385,1,0,0,0,389,388,1,0,0,0,390,402,1,0,0,0,391,398,3,58,29,0,392,
        394,5,1,0,0,393,392,1,0,0,0,394,395,1,0,0,0,395,393,1,0,0,0,395,
        396,1,0,0,0,396,399,1,0,0,0,397,399,5,56,0,0,398,393,1,0,0,0,398,
        397,1,0,0,0,399,402,1,0,0,0,400,402,3,2,1,0,401,342,1,0,0,0,401,
        351,1,0,0,0,401,360,1,0,0,0,401,361,1,0,0,0,401,371,1,0,0,0,401,
        381,1,0,0,0,401,391,1,0,0,0,401,400,1,0,0,0,402,405,1,0,0,0,403,
        401,1,0,0,0,403,404,1,0,0,0,404,406,1,0,0,0,405,403,1,0,0,0,406,
        407,5,6,0,0,407,29,1,0,0,0,408,410,5,22,0,0,409,411,3,68,34,0,410,
        409,1,0,0,0,410,411,1,0,0,0,411,412,1,0,0,0,412,417,5,1,0,0,413,
        416,3,2,1,0,414,416,3,30,15,0,415,413,1,0,0,0,415,414,1,0,0,0,416,
        419,1,0,0,0,417,415,1,0,0,0,417,418,1,0,0,0,418,31,1,0,0,0,419,417,
        1,0,0,0,420,484,5,5,0,0,421,428,3,6,3,0,422,424,5,1,0,0,423,422,
        1,0,0,0,424,425,1,0,0,0,425,423,1,0,0,0,425,426,1,0,0,0,426,429,
        1,0,0,0,427,429,5,56,0,0,428,423,1,0,0,0,428,427,1,0,0,0,429,483,
        1,0,0,0,430,437,3,10,5,0,431,433,5,1,0,0,432,431,1,0,0,0,433,434,
        1,0,0,0,434,432,1,0,0,0,434,435,1,0,0,0,435,438,1,0,0,0,436,438,
        5,56,0,0,437,432,1,0,0,0,437,436,1,0,0,0,438,483,1,0,0,0,439,483,
        3,30,15,0,440,448,3,42,21,0,441,443,5,1,0,0,442,441,1,0,0,0,443,
        446,1,0,0,0,444,442,1,0,0,0,444,445,1,0,0,0,445,449,1,0,0,0,446,
        444,1,0,0,0,447,449,5,56,0,0,448,444,1,0,0,0,448,447,1,0,0,0,449,
        483,1,0,0,0,450,458,3,46,23,0,451,453,5,1,0,0,452,451,1,0,0,0,453,
        456,1,0,0,0,454,452,1,0,0,0,454,455,1,0,0,0,455,459,1,0,0,0,456,
        454,1,0,0,0,457,459,5,56,0,0,458,454,1,0,0,0,458,457,1,0,0,0,459,
        483,1,0,0,0,460,468,3,48,24,0,461,463,5,1,0,0,462,461,1,0,0,0,463,
        466,1,0,0,0,464,462,1,0,0,0,464,465,1,0,0,0,465,469,1,0,0,0,466,
        464,1,0,0,0,467,469,5,56,0,0,468,464,1,0,0,0,468,467,1,0,0,0,469,
        483,1,0,0,0,470,477,3,58,29,0,471,473,5,1,0,0,472,471,1,0,0,0,473,
        474,1,0,0,0,474,472,1,0,0,0,474,475,1,0,0,0,475,478,1,0,0,0,476,
        478,5,56,0,0,477,472,1,0,0,0,477,476,1,0,0,0,478,483,1,0,0,0,479,
        483,3,36,18,0,480,483,3,34,17,0,481,483,3,2,1,0,482,421,1,0,0,0,
        482,430,1,0,0,0,482,439,1,0,0,0,482,440,1,0,0,0,482,450,1,0,0,0,
        482,460,1,0,0,0,482,470,1,0,0,0,482,479,1,0,0,0,482,480,1,0,0,0,
        482,481,1,0,0,0,483,486,1,0,0,0,484,482,1,0,0,0,484,485,1,0,0,0,
        485,487,1,0,0,0,486,484,1,0,0,0,487,488,5,6,0,0,488,33,1,0,0,0,489,
        490,5,17,0,0,490,494,7,0,0,0,491,493,3,2,1,0,492,491,1,0,0,0,493,
        496,1,0,0,0,494,492,1,0,0,0,494,495,1,0,0,0,495,35,1,0,0,0,496,494,
        1,0,0,0,497,498,5,16,0,0,498,502,7,0,0,0,499,501,3,2,1,0,500,499,
        1,0,0,0,501,504,1,0,0,0,502,500,1,0,0,0,502,503,1,0,0,0,503,37,1,
        0,0,0,504,502,1,0,0,0,505,507,5,11,0,0,506,505,1,0,0,0,506,507,1,
        0,0,0,507,508,1,0,0,0,508,509,5,25,0,0,509,510,5,27,0,0,510,512,
        5,7,0,0,511,513,5,28,0,0,512,511,1,0,0,0,512,513,1,0,0,0,513,514,
        1,0,0,0,514,515,5,8,0,0,515,516,5,47,0,0,516,522,5,5,0,0,517,518,
        3,76,38,0,518,519,5,2,0,0,519,521,1,0,0,0,520,517,1,0,0,0,521,524,
        1,0,0,0,522,520,1,0,0,0,522,523,1,0,0,0,523,525,1,0,0,0,524,522,
        1,0,0,0,525,526,3,76,38,0,526,527,5,6,0,0,527,537,1,0,0,0,528,530,
        5,11,0,0,529,528,1,0,0,0,529,530,1,0,0,0,530,531,1,0,0,0,531,532,
        5,25,0,0,532,533,5,27,0,0,533,534,5,7,0,0,534,535,5,28,0,0,535,537,
        5,8,0,0,536,506,1,0,0,0,536,529,1,0,0,0,537,39,1,0,0,0,538,539,5,
        24,0,0,539,540,5,38,0,0,540,541,5,27,0,0,541,542,5,9,0,0,542,543,
        5,40,0,0,543,41,1,0,0,0,544,545,5,12,0,0,545,546,5,3,0,0,546,547,
        3,52,26,0,547,548,5,4,0,0,548,550,3,32,16,0,549,551,3,44,22,0,550,
        549,1,0,0,0,550,551,1,0,0,0,551,43,1,0,0,0,552,553,5,13,0,0,553,
        554,3,32,16,0,554,45,1,0,0,0,555,556,5,15,0,0,556,557,5,3,0,0,557,
        558,3,52,26,0,558,559,5,4,0,0,559,560,3,32,16,0,560,47,1,0,0,0,561,
        562,5,14,0,0,562,563,5,3,0,0,563,564,3,50,25,0,564,565,5,1,0,0,565,
        566,3,52,26,0,566,567,5,1,0,0,567,568,3,54,27,0,568,569,5,4,0,0,
        569,570,3,32,16,0,570,49,1,0,0,0,571,572,5,25,0,0,572,573,3,64,32,
        0,573,574,5,47,0,0,574,575,3,68,34,0,575,578,1,0,0,0,576,578,3,58,
        29,0,577,571,1,0,0,0,577,576,1,0,0,0,578,51,1,0,0,0,579,580,3,70,
        35,0,580,581,7,1,0,0,581,582,3,72,36,0,582,593,1,0,0,0,583,584,3,
        70,35,0,584,585,7,2,0,0,585,586,3,72,36,0,586,593,1,0,0,0,587,588,
        3,68,34,0,588,589,7,3,0,0,589,590,3,70,35,0,590,593,1,0,0,0,591,
        593,3,68,34,0,592,579,1,0,0,0,592,583,1,0,0,0,592,587,1,0,0,0,592,
        591,1,0,0,0,593,53,1,0,0,0,594,595,5,49,0,0,595,605,3,66,33,0,596,
        597,5,50,0,0,597,605,3,66,33,0,598,599,3,66,33,0,599,600,5,49,0,
        0,600,605,1,0,0,0,601,602,3,66,33,0,602,603,5,50,0,0,603,605,1,0,
        0,0,604,594,1,0,0,0,604,596,1,0,0,0,604,598,1,0,0,0,604,601,1,0,
        0,0,605,55,1,0,0,0,606,607,3,64,32,0,607,608,5,47,0,0,608,609,3,
        68,34,0,609,612,1,0,0,0,610,612,3,64,32,0,611,606,1,0,0,0,611,610,
        1,0,0,0,612,57,1,0,0,0,613,614,3,66,33,0,614,615,5,47,0,0,615,616,
        3,68,34,0,616,626,1,0,0,0,617,618,3,62,31,0,618,619,5,47,0,0,619,
        620,3,68,34,0,620,626,1,0,0,0,621,622,3,60,30,0,622,623,5,47,0,0,
        623,624,3,68,34,0,624,626,1,0,0,0,625,613,1,0,0,0,625,617,1,0,0,
        0,625,621,1,0,0,0,626,59,1,0,0,0,627,628,3,64,32,0,628,629,5,7,0,
        0,629,630,5,28,0,0,630,631,5,8,0,0,631,61,1,0,0,0,632,633,5,33,0,
        0,633,637,3,62,31,0,634,635,5,33,0,0,635,637,3,66,33,0,636,632,1,
        0,0,0,636,634,1,0,0,0,637,63,1,0,0,0,638,640,5,33,0,0,639,638,1,
        0,0,0,640,643,1,0,0,0,641,639,1,0,0,0,641,642,1,0,0,0,642,644,1,
        0,0,0,643,641,1,0,0,0,644,645,5,27,0,0,645,65,1,0,0,0,646,647,5,
        27,0,0,647,67,1,0,0,0,648,649,6,34,-1,0,649,650,3,70,35,0,650,662,
        1,0,0,0,651,652,10,3,0,0,652,653,5,36,0,0,653,661,3,70,35,0,654,
        655,10,2,0,0,655,656,5,37,0,0,656,661,3,70,35,0,657,658,10,1,0,0,
        658,659,7,3,0,0,659,661,3,70,35,0,660,651,1,0,0,0,660,654,1,0,0,
        0,660,657,1,0,0,0,661,664,1,0,0,0,662,660,1,0,0,0,662,663,1,0,0,
        0,663,69,1,0,0,0,664,662,1,0,0,0,665,666,6,35,-1,0,666,670,3,72,
        36,0,667,668,5,46,0,0,668,670,3,72,36,0,669,665,1,0,0,0,669,667,
        1,0,0,0,670,684,1,0,0,0,671,672,10,5,0,0,672,673,7,4,0,0,673,683,
        3,72,36,0,674,675,10,4,0,0,675,676,7,2,0,0,676,683,3,72,36,0,677,
        678,10,3,0,0,678,679,7,1,0,0,679,683,3,72,36,0,680,681,10,1,0,0,
        681,683,7,5,0,0,682,671,1,0,0,0,682,674,1,0,0,0,682,677,1,0,0,0,
        682,680,1,0,0,0,683,686,1,0,0,0,684,682,1,0,0,0,684,685,1,0,0,0,
        685,71,1,0,0,0,686,684,1,0,0,0,687,695,3,74,37,0,688,689,5,37,0,
        0,689,695,3,72,36,0,690,691,5,36,0,0,691,695,3,72,36,0,692,693,7,
        5,0,0,693,695,3,72,36,0,694,687,1,0,0,0,694,688,1,0,0,0,694,690,
        1,0,0,0,694,692,1,0,0,0,695,73,1,0,0,0,696,710,3,66,33,0,697,710,
        3,76,38,0,698,699,5,48,0,0,699,710,3,66,33,0,700,710,3,62,31,0,701,
        702,5,3,0,0,702,703,3,68,34,0,703,704,5,4,0,0,704,710,1,0,0,0,705,
        706,5,10,0,0,706,710,3,74,37,0,707,710,3,26,13,0,708,710,3,60,30,
        0,709,696,1,0,0,0,709,697,1,0,0,0,709,698,1,0,0,0,709,700,1,0,0,
        0,709,701,1,0,0,0,709,705,1,0,0,0,709,707,1,0,0,0,709,708,1,0,0,
        0,710,75,1,0,0,0,711,712,7,6,0,0,712,77,1,0,0,0,103,81,89,93,99,
        102,104,106,115,118,124,127,133,136,142,145,148,151,159,169,176,
        184,188,191,198,204,208,215,219,231,238,242,246,251,257,260,266,
        270,275,277,280,284,289,295,301,305,310,316,325,332,337,346,349,
        355,358,365,369,375,379,385,389,395,398,401,403,410,415,417,425,
        428,434,437,444,448,454,458,464,468,474,477,482,484,494,502,506,
        512,522,529,536,550,577,592,604,611,625,636,641,660,662,669,682,
        684,694,709
    ]

class MathParser ( Parser ):

    grammarFileName = "Math.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "','", "'('", "')'", "'{'", "'}'", 
                     "'['", "']'", "'.h'", "<INVALID>", "'const'", "'if'", 
                     "'else'", "'for'", "'while'", "'break'", "'continue'", 
                     "'switch'", "'case'", "'default'", "'printf'", "'return'", 
                     "'scanf'", "'#include'", "<INVALID>", "'void'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'*'", "'/'", "'%'", "'+'", "'-'", "'<'", 
                     "'<='", "'>'", "'>='", "'=='", "'!='", "'||'", "'&&'", 
                     "'!'", "'='", "'&'", "'++'", "'--'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "CAST", "CONST", "IF", "ELSE", 
                      "FOR", "WHILE", "BREAK", "CONTINUE", "SWITCH", "CASE", 
                      "DEFAULT", "PRINTF", "RETURN", "SCANF", "INCLUDE", 
                      "TYPE", "VOID", "VAR_NAME", "INT", "FLOAT", "CHAR", 
                      "SCANF_STRING", "STRING", "STR", "DIV", "MOD", "SUM", 
                      "DIF", "LT", "LEQ", "GT", "GEQ", "EQ", "NEQ", "OR_OP", 
                      "AND_OP", "NOT_OP", "ASSIGN", "ADDR", "INCR", "DECR", 
                      "SP", "NEWLINE", "WS", "UNICODE_WS", "LN", "DELIM", 
                      "COMMENT", "LCOMMENT" ]

    RULE_math = 0
    RULE_instr = 1
    RULE_declr = 2
    RULE_printf = 3
    RULE_printf_arg = 4
    RULE_scanf = 5
    RULE_scanf_arg = 6
    RULE_param_list = 7
    RULE_param_declr = 8
    RULE_func_defn = 9
    RULE_func_decl = 10
    RULE_arg_list = 11
    RULE_func_arg = 12
    RULE_func_call = 13
    RULE_func_scope = 14
    RULE_return_instr = 15
    RULE_scope = 16
    RULE_cont_instr = 17
    RULE_break_instr = 18
    RULE_array_decl = 19
    RULE_incl_stat = 20
    RULE_if_cond = 21
    RULE_else_cond = 22
    RULE_while_loop = 23
    RULE_for_loop = 24
    RULE_init = 25
    RULE_cond = 26
    RULE_incr = 27
    RULE_var_decl = 28
    RULE_assign = 29
    RULE_array_el = 30
    RULE_deref = 31
    RULE_lvar = 32
    RULE_rvar = 33
    RULE_expr = 34
    RULE_term = 35
    RULE_factor = 36
    RULE_primary = 37
    RULE_rtype = 38

    ruleNames =  [ "math", "instr", "declr", "printf", "printf_arg", "scanf", 
                   "scanf_arg", "param_list", "param_declr", "func_defn", 
                   "func_decl", "arg_list", "func_arg", "func_call", "func_scope", 
                   "return_instr", "scope", "cont_instr", "break_instr", 
                   "array_decl", "incl_stat", "if_cond", "else_cond", "while_loop", 
                   "for_loop", "init", "cond", "incr", "var_decl", "assign", 
                   "array_el", "deref", "lvar", "rvar", "expr", "term", 
                   "factor", "primary", "rtype" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    CAST=10
    CONST=11
    IF=12
    ELSE=13
    FOR=14
    WHILE=15
    BREAK=16
    CONTINUE=17
    SWITCH=18
    CASE=19
    DEFAULT=20
    PRINTF=21
    RETURN=22
    SCANF=23
    INCLUDE=24
    TYPE=25
    VOID=26
    VAR_NAME=27
    INT=28
    FLOAT=29
    CHAR=30
    SCANF_STRING=31
    STRING=32
    STR=33
    DIV=34
    MOD=35
    SUM=36
    DIF=37
    LT=38
    LEQ=39
    GT=40
    GEQ=41
    EQ=42
    NEQ=43
    OR_OP=44
    AND_OP=45
    NOT_OP=46
    ASSIGN=47
    ADDR=48
    INCR=49
    DECR=50
    SP=51
    NEWLINE=52
    WS=53
    UNICODE_WS=54
    LN=55
    DELIM=56
    COMMENT=57
    LCOMMENT=58

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class MathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(MathParser.EOF, 0)

        def incl_stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Incl_statContext)
            else:
                return self.getTypedRuleContext(MathParser.Incl_statContext,i)


        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.InstrContext)
            else:
                return self.getTypedRuleContext(MathParser.InstrContext,i)


        def func_defn(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Func_defnContext)
            else:
                return self.getTypedRuleContext(MathParser.Func_defnContext,i)


        def func_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Func_declContext)
            else:
                return self.getTypedRuleContext(MathParser.Func_declContext,i)


        def DELIM(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.DELIM)
            else:
                return self.getToken(MathParser.DELIM, i)

        def getRuleIndex(self):
            return MathParser.RULE_math

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMath" ):
                listener.enterMath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMath" ):
                listener.exitMath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMath" ):
                return visitor.visitMath(self)
            else:
                return visitor.visitChildren(self)




    def math(self):

        localctx = MathParser.MathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_math)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 81
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 78
                self.incl_stat()
                self.state = 83
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 106
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 2040910443449384) != 0:
                self.state = 104
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
                if la_ == 1:
                    self.state = 84
                    self.instr()
                    pass

                elif la_ == 2:
                    self.state = 85
                    self.func_defn()
                    self.state = 93
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [-1, 1, 3, 5, 10, 11, 25, 26, 27, 28, 29, 30, 33, 36, 37, 46, 48, 49, 50]:
                        self.state = 89
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 86
                            self.match(MathParser.T__0)
                            self.state = 91
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [56]:
                        self.state = 92
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 3:
                    self.state = 95
                    self.func_decl()
                    self.state = 102
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 97 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 96
                            self.match(MathParser.T__0)
                            self.state = 99 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [56]:
                        self.state = 101
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass


                self.state = 108
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 109
            self.match(MathParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declr(self):
            return self.getTypedRuleContext(MathParser.DeclrContext,0)


        def DELIM(self):
            return self.getToken(MathParser.DELIM, 0)

        def array_decl(self):
            return self.getTypedRuleContext(MathParser.Array_declContext,0)


        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def assign(self):
            return self.getTypedRuleContext(MathParser.AssignContext,0)


        def scope(self):
            return self.getTypedRuleContext(MathParser.ScopeContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstr" ):
                listener.enterInstr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstr" ):
                listener.exitInstr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstr" ):
                return visitor.visitInstr(self)
            else:
                return visitor.visitChildren(self)




    def instr(self):

        localctx = MathParser.InstrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_instr)
        self._la = 0 # Token type
        try:
            self.state = 148
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 111
                self.declr()
                self.state = 118
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1]:
                    self.state = 113 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 112
                        self.match(MathParser.T__0)
                        self.state = 115 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1):
                            break

                    pass
                elif token in [56]:
                    self.state = 117
                    self.match(MathParser.DELIM)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 120
                self.array_decl()
                self.state = 127
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1]:
                    self.state = 122 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 121
                        self.match(MathParser.T__0)
                        self.state = 124 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1):
                            break

                    pass
                elif token in [56]:
                    self.state = 126
                    self.match(MathParser.DELIM)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 129
                self.expr(0)
                self.state = 136
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1]:
                    self.state = 131 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 130
                        self.match(MathParser.T__0)
                        self.state = 133 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1):
                            break

                    pass
                elif token in [56]:
                    self.state = 135
                    self.match(MathParser.DELIM)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 138
                self.assign()
                self.state = 145
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1]:
                    self.state = 140 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 139
                        self.match(MathParser.T__0)
                        self.state = 142 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1):
                            break

                    pass
                elif token in [56]:
                    self.state = 144
                    self.match(MathParser.DELIM)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 147
                self.scope()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(MathParser.TYPE, 0)

        def var_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Var_declContext)
            else:
                return self.getTypedRuleContext(MathParser.Var_declContext,i)


        def CONST(self):
            return self.getToken(MathParser.CONST, 0)

        def getRuleIndex(self):
            return MathParser.RULE_declr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclr" ):
                listener.enterDeclr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclr" ):
                listener.exitDeclr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclr" ):
                return visitor.visitDeclr(self)
            else:
                return visitor.visitChildren(self)




    def declr(self):

        localctx = MathParser.DeclrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_declr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 151
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 150
                self.match(MathParser.CONST)


            self.state = 153
            self.match(MathParser.TYPE)
            self.state = 159
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 154
                    self.var_decl()
                    self.state = 155
                    self.match(MathParser.T__1) 
                self.state = 161
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

            self.state = 162
            self.var_decl()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrintfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.print_val = None # Token
            self.format_string = None # Token
            self._printf_arg = None # Printf_argContext
            self.vars_ = list() # of Printf_argContexts

        def PRINTF(self):
            return self.getToken(MathParser.PRINTF, 0)

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def rtype(self):
            return self.getTypedRuleContext(MathParser.RtypeContext,0)


        def STRING(self):
            return self.getToken(MathParser.STRING, 0)

        def SCANF_STRING(self):
            return self.getToken(MathParser.SCANF_STRING, 0)

        def printf_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Printf_argContext)
            else:
                return self.getTypedRuleContext(MathParser.Printf_argContext,i)


        def getRuleIndex(self):
            return MathParser.RULE_printf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintf" ):
                listener.enterPrintf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintf" ):
                listener.exitPrintf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrintf" ):
                return visitor.visitPrintf(self)
            else:
                return visitor.visitChildren(self)




    def printf(self):

        localctx = MathParser.PrintfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_printf)
        self._la = 0 # Token type
        try:
            self.state = 191
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 164
                self.match(MathParser.PRINTF)
                self.state = 165
                self.match(MathParser.T__2)
                self.state = 169
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [27]:
                    self.state = 166
                    self.rvar()
                    pass
                elif token in [28, 29, 30]:
                    self.state = 167
                    self.rtype()
                    pass
                elif token in [32]:
                    self.state = 168
                    localctx.print_val = self.match(MathParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 171
                self.match(MathParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 172
                self.match(MathParser.PRINTF)
                self.state = 173
                self.match(MathParser.T__2)
                self.state = 176
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [31]:
                    self.state = 174
                    localctx.format_string = self.match(MathParser.SCANF_STRING)
                    pass
                elif token in [32]:
                    self.state = 175
                    localctx.format_string = self.match(MathParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 188
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 178
                    self.match(MathParser.T__1)
                    self.state = 184
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,20,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 179
                            localctx._printf_arg = self.printf_arg()
                            localctx.vars_.append(localctx._printf_arg)
                            self.state = 180
                            self.match(MathParser.T__1) 
                        self.state = 186
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

                    self.state = 187
                    localctx._printf_arg = self.printf_arg()
                    localctx.vars_.append(localctx._printf_arg)


                self.state = 190
                self.match(MathParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Printf_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def rtype(self):
            return self.getTypedRuleContext(MathParser.RtypeContext,0)


        def array_el(self):
            return self.getTypedRuleContext(MathParser.Array_elContext,0)


        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def STRING(self):
            return self.getToken(MathParser.STRING, 0)

        def getRuleIndex(self):
            return MathParser.RULE_printf_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintf_arg" ):
                listener.enterPrintf_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintf_arg" ):
                listener.exitPrintf_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrintf_arg" ):
                return visitor.visitPrintf_arg(self)
            else:
                return visitor.visitChildren(self)




    def printf_arg(self):

        localctx = MathParser.Printf_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_printf_arg)
        try:
            self.state = 198
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 193
                self.rvar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 194
                self.rtype()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 195
                self.array_el()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 196
                self.deref()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 197
                self.match(MathParser.STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScanfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.format_string = None # Token
            self._scanf_arg = None # Scanf_argContext
            self.vars_ = list() # of Scanf_argContexts

        def SCANF(self):
            return self.getToken(MathParser.SCANF, 0)

        def scanf_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Scanf_argContext)
            else:
                return self.getTypedRuleContext(MathParser.Scanf_argContext,i)


        def SCANF_STRING(self):
            return self.getToken(MathParser.SCANF_STRING, 0)

        def STRING(self):
            return self.getToken(MathParser.STRING, 0)

        def ADDR(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.ADDR)
            else:
                return self.getToken(MathParser.ADDR, i)

        def getRuleIndex(self):
            return MathParser.RULE_scanf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScanf" ):
                listener.enterScanf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScanf" ):
                listener.exitScanf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScanf" ):
                return visitor.visitScanf(self)
            else:
                return visitor.visitChildren(self)




    def scanf(self):

        localctx = MathParser.ScanfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_scanf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 200
            self.match(MathParser.SCANF)
            self.state = 201
            self.match(MathParser.T__2)
            self.state = 204
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [31]:
                self.state = 202
                localctx.format_string = self.match(MathParser.SCANF_STRING)
                pass
            elif token in [32]:
                self.state = 203
                localctx.format_string = self.match(MathParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 206
            self.match(MathParser.T__1)
            self.state = 215
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 208
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                    if la_ == 1:
                        self.state = 207
                        self.match(MathParser.ADDR)


                    self.state = 210
                    localctx._scanf_arg = self.scanf_arg()
                    localctx.vars_.append(localctx._scanf_arg)
                    self.state = 211
                    self.match(MathParser.T__1) 
                self.state = 217
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

            self.state = 219
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 218
                self.match(MathParser.ADDR)


            self.state = 221
            localctx._scanf_arg = self.scanf_arg()
            localctx.vars_.append(localctx._scanf_arg)
            self.state = 222
            self.match(MathParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Scanf_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def array_el(self):
            return self.getTypedRuleContext(MathParser.Array_elContext,0)


        def ADDR(self):
            return self.getToken(MathParser.ADDR, 0)

        def getRuleIndex(self):
            return MathParser.RULE_scanf_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScanf_arg" ):
                listener.enterScanf_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScanf_arg" ):
                listener.exitScanf_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScanf_arg" ):
                return visitor.visitScanf_arg(self)
            else:
                return visitor.visitChildren(self)




    def scanf_arg(self):

        localctx = MathParser.Scanf_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_scanf_arg)
        try:
            self.state = 231
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 224
                self.rvar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 225
                self.deref()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 226
                self.array_el()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 227
                self.match(MathParser.ADDR)
                self.state = 228
                self.rvar()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 229
                self.match(MathParser.ADDR)
                self.state = 230
                self.deref()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._param_declr = None # Param_declrContext
            self.params = list() # of Param_declrContexts

        def param_declr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Param_declrContext)
            else:
                return self.getTypedRuleContext(MathParser.Param_declrContext,i)


        def getRuleIndex(self):
            return MathParser.RULE_param_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_list" ):
                listener.enterParam_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_list" ):
                listener.exitParam_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_list" ):
                return visitor.visitParam_list(self)
            else:
                return visitor.visitChildren(self)




    def param_list(self):

        localctx = MathParser.Param_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_param_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 233
            localctx._param_declr = self.param_declr()
            localctx.params.append(localctx._param_declr)
            self.state = 238
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2:
                self.state = 234
                self.match(MathParser.T__1)
                self.state = 235
                localctx._param_declr = self.param_declr()
                localctx.params.append(localctx._param_declr)
                self.state = 240
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_declrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.const = None # Token
            self.type_ = None # Token
            self.reference = None # Token
            self._STR = None # Token
            self.ptr = list() # of Tokens
            self.var = None # Token
            self.default = None # ExprContext

        def TYPE(self):
            return self.getToken(MathParser.TYPE, 0)

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def ASSIGN(self):
            return self.getToken(MathParser.ASSIGN, 0)

        def CONST(self):
            return self.getToken(MathParser.CONST, 0)

        def ADDR(self):
            return self.getToken(MathParser.ADDR, 0)

        def STR(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.STR)
            else:
                return self.getToken(MathParser.STR, i)

        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_param_declr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_declr" ):
                listener.enterParam_declr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_declr" ):
                listener.exitParam_declr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_declr" ):
                return visitor.visitParam_declr(self)
            else:
                return visitor.visitChildren(self)




    def param_declr(self):

        localctx = MathParser.Param_declrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_param_declr)
        self._la = 0 # Token type
        try:
            self.state = 277
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 242
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 241
                    localctx.const = self.match(MathParser.CONST)


                self.state = 244
                localctx.type_ = self.match(MathParser.TYPE)
                self.state = 246
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==48:
                    self.state = 245
                    localctx.reference = self.match(MathParser.ADDR)


                self.state = 251
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==33:
                    self.state = 248
                    localctx._STR = self.match(MathParser.STR)
                    localctx.ptr.append(localctx._STR)
                    self.state = 253
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 254
                localctx.var = self.match(MathParser.VAR_NAME)
                self.state = 257
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47:
                    self.state = 255
                    self.match(MathParser.ASSIGN)
                    self.state = 256
                    localctx.default = self.expr(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 260
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 259
                    localctx.const = self.match(MathParser.CONST)


                self.state = 262
                localctx.type_ = self.match(MathParser.TYPE)
                self.state = 266
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==33:
                    self.state = 263
                    localctx._STR = self.match(MathParser.STR)
                    localctx.ptr.append(localctx._STR)
                    self.state = 268
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==48:
                    self.state = 269
                    localctx.reference = self.match(MathParser.ADDR)


                self.state = 272
                localctx.var = self.match(MathParser.VAR_NAME)
                self.state = 275
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47:
                    self.state = 273
                    self.match(MathParser.ASSIGN)
                    self.state = 274
                    localctx.default = self.expr(0)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_defnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.const = None # Token
            self.type_ = None # Token
            self._STR = None # Token
            self.ptr = list() # of Tokens
            self.name = None # Token
            self.params = None # Param_listContext

        def func_scope(self):
            return self.getTypedRuleContext(MathParser.Func_scopeContext,0)


        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def TYPE(self):
            return self.getToken(MathParser.TYPE, 0)

        def VOID(self):
            return self.getToken(MathParser.VOID, 0)

        def CONST(self):
            return self.getToken(MathParser.CONST, 0)

        def STR(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.STR)
            else:
                return self.getToken(MathParser.STR, i)

        def param_list(self):
            return self.getTypedRuleContext(MathParser.Param_listContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_func_defn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_defn" ):
                listener.enterFunc_defn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_defn" ):
                listener.exitFunc_defn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_defn" ):
                return visitor.visitFunc_defn(self)
            else:
                return visitor.visitChildren(self)




    def func_defn(self):

        localctx = MathParser.Func_defnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_func_defn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 280
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 279
                localctx.const = self.match(MathParser.CONST)


            self.state = 284
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25]:
                self.state = 282
                localctx.type_ = self.match(MathParser.TYPE)
                pass
            elif token in [26]:
                self.state = 283
                localctx.type_ = self.match(MathParser.VOID)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==33:
                self.state = 286
                localctx._STR = self.match(MathParser.STR)
                localctx.ptr.append(localctx._STR)
                self.state = 291
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 292
            localctx.name = self.match(MathParser.VAR_NAME)
            self.state = 293
            self.match(MathParser.T__2)
            self.state = 295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11 or _la==25:
                self.state = 294
                localctx.params = self.param_list()


            self.state = 297
            self.match(MathParser.T__3)
            self.state = 298
            self.func_scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.const = None # Token
            self.type_ = None # Token
            self._STR = None # Token
            self.ptr = list() # of Tokens
            self.name = None # Token
            self.params = None # Param_listContext

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def TYPE(self):
            return self.getToken(MathParser.TYPE, 0)

        def VOID(self):
            return self.getToken(MathParser.VOID, 0)

        def CONST(self):
            return self.getToken(MathParser.CONST, 0)

        def STR(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.STR)
            else:
                return self.getToken(MathParser.STR, i)

        def param_list(self):
            return self.getTypedRuleContext(MathParser.Param_listContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_func_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_decl" ):
                listener.enterFunc_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_decl" ):
                listener.exitFunc_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_decl" ):
                return visitor.visitFunc_decl(self)
            else:
                return visitor.visitChildren(self)




    def func_decl(self):

        localctx = MathParser.Func_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_func_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 300
                localctx.const = self.match(MathParser.CONST)


            self.state = 305
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25]:
                self.state = 303
                localctx.type_ = self.match(MathParser.TYPE)
                pass
            elif token in [26]:
                self.state = 304
                localctx.type_ = self.match(MathParser.VOID)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==33:
                self.state = 307
                localctx._STR = self.match(MathParser.STR)
                localctx.ptr.append(localctx._STR)
                self.state = 312
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 313
            localctx.name = self.match(MathParser.VAR_NAME)
            self.state = 314
            self.match(MathParser.T__2)
            self.state = 316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11 or _la==25:
                self.state = 315
                localctx.params = self.param_list()


            self.state = 318
            self.match(MathParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arg_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._func_arg = None # Func_argContext
            self.args = list() # of Func_argContexts

        def func_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Func_argContext)
            else:
                return self.getTypedRuleContext(MathParser.Func_argContext,i)


        def getRuleIndex(self):
            return MathParser.RULE_arg_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArg_list" ):
                listener.enterArg_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArg_list" ):
                listener.exitArg_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArg_list" ):
                return visitor.visitArg_list(self)
            else:
                return visitor.visitChildren(self)




    def arg_list(self):

        localctx = MathParser.Arg_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_arg_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 320
            localctx._func_arg = self.func_arg()
            localctx.args.append(localctx._func_arg)
            self.state = 325
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 321
                    self.match(MathParser.T__1)
                    self.state = 322
                    localctx._func_arg = self.func_arg()
                    localctx.args.append(localctx._func_arg) 
                self.state = 327
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def func_call(self):
            return self.getTypedRuleContext(MathParser.Func_callContext,0)


        def rtype(self):
            return self.getTypedRuleContext(MathParser.RtypeContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_func_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_arg" ):
                listener.enterFunc_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_arg" ):
                listener.exitFunc_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_arg" ):
                return visitor.visitFunc_arg(self)
            else:
                return visitor.visitChildren(self)




    def func_arg(self):

        localctx = MathParser.Func_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_func_arg)
        try:
            self.state = 332
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 328
                self.rvar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 329
                self.deref()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 330
                self.func_call()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 331
                self.rtype()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self.args = None # Arg_listContext

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def arg_list(self):
            return self.getTypedRuleContext(MathParser.Arg_listContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_call" ):
                listener.enterFunc_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_call" ):
                listener.exitFunc_call(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_call" ):
                return visitor.visitFunc_call(self)
            else:
                return visitor.visitChildren(self)




    def func_call(self):

        localctx = MathParser.Func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_func_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 334
            localctx.name = self.match(MathParser.VAR_NAME)
            self.state = 335
            self.match(MathParser.T__2)
            self.state = 337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 10603200512) != 0:
                self.state = 336
                localctx.args = self.arg_list()


            self.state = 339
            self.match(MathParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_scopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def printf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.PrintfContext)
            else:
                return self.getTypedRuleContext(MathParser.PrintfContext,i)


        def scanf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.ScanfContext)
            else:
                return self.getTypedRuleContext(MathParser.ScanfContext,i)


        def return_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Return_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Return_instrContext,i)


        def if_cond(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.If_condContext)
            else:
                return self.getTypedRuleContext(MathParser.If_condContext,i)


        def while_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.While_loopContext)
            else:
                return self.getTypedRuleContext(MathParser.While_loopContext,i)


        def for_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.For_loopContext)
            else:
                return self.getTypedRuleContext(MathParser.For_loopContext,i)


        def assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.AssignContext)
            else:
                return self.getTypedRuleContext(MathParser.AssignContext,i)


        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.InstrContext)
            else:
                return self.getTypedRuleContext(MathParser.InstrContext,i)


        def DELIM(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.DELIM)
            else:
                return self.getToken(MathParser.DELIM, i)

        def getRuleIndex(self):
            return MathParser.RULE_func_scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_scope" ):
                listener.enterFunc_scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_scope" ):
                listener.exitFunc_scope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_scope" ):
                return visitor.visitFunc_scope(self)
            else:
                return visitor.visitChildren(self)




    def func_scope(self):

        localctx = MathParser.Func_scopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_func_scope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            self.match(MathParser.T__4)
            self.state = 403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 2040910391073832) != 0:
                self.state = 401
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
                if la_ == 1:
                    self.state = 342
                    self.printf()
                    self.state = 349
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 344 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 343
                            self.match(MathParser.T__0)
                            self.state = 346 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [56]:
                        self.state = 348
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 2:
                    self.state = 351
                    self.scanf()
                    self.state = 358
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 353 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 352
                            self.match(MathParser.T__0)
                            self.state = 355 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [56]:
                        self.state = 357
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 3:
                    self.state = 360
                    self.return_instr()
                    pass

                elif la_ == 4:
                    self.state = 361
                    self.if_cond()
                    self.state = 369
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 10, 11, 12, 14, 15, 21, 22, 23, 25, 27, 28, 29, 30, 33, 36, 37, 46, 48, 49, 50]:
                        self.state = 365
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 362
                            self.match(MathParser.T__0)
                            self.state = 367
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [56]:
                        self.state = 368
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 5:
                    self.state = 371
                    self.while_loop()
                    self.state = 379
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 10, 11, 12, 14, 15, 21, 22, 23, 25, 27, 28, 29, 30, 33, 36, 37, 46, 48, 49, 50]:
                        self.state = 375
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 372
                            self.match(MathParser.T__0)
                            self.state = 377
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [56]:
                        self.state = 378
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 6:
                    self.state = 381
                    self.for_loop()
                    self.state = 389
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 10, 11, 12, 14, 15, 21, 22, 23, 25, 27, 28, 29, 30, 33, 36, 37, 46, 48, 49, 50]:
                        self.state = 385
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 382
                            self.match(MathParser.T__0)
                            self.state = 387
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [56]:
                        self.state = 388
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 7:
                    self.state = 391
                    self.assign()
                    self.state = 398
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 393 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 392
                            self.match(MathParser.T__0)
                            self.state = 395 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [56]:
                        self.state = 397
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 8:
                    self.state = 400
                    self.instr()
                    pass


                self.state = 405
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 406
            self.match(MathParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ret_val = None # ExprContext

        def RETURN(self):
            return self.getToken(MathParser.RETURN, 0)

        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.InstrContext)
            else:
                return self.getTypedRuleContext(MathParser.InstrContext,i)


        def return_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Return_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Return_instrContext,i)


        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_return_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_instr" ):
                listener.enterReturn_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_instr" ):
                listener.exitReturn_instr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_instr" ):
                return visitor.visitReturn_instr(self)
            else:
                return visitor.visitChildren(self)




    def return_instr(self):

        localctx = MathParser.Return_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_return_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self.match(MathParser.RETURN)
            self.state = 410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 2040910342784008) != 0:
                self.state = 409
                localctx.ret_val = self.expr(0)


            self.state = 412
            self.match(MathParser.T__0)
            self.state = 417
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 415
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [3, 5, 10, 11, 25, 27, 28, 29, 30, 33, 36, 37, 46, 48, 49, 50]:
                        self.state = 413
                        self.instr()
                        pass
                    elif token in [22]:
                        self.state = 414
                        self.return_instr()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 419
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def printf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.PrintfContext)
            else:
                return self.getTypedRuleContext(MathParser.PrintfContext,i)


        def scanf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.ScanfContext)
            else:
                return self.getTypedRuleContext(MathParser.ScanfContext,i)


        def return_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Return_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Return_instrContext,i)


        def if_cond(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.If_condContext)
            else:
                return self.getTypedRuleContext(MathParser.If_condContext,i)


        def while_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.While_loopContext)
            else:
                return self.getTypedRuleContext(MathParser.While_loopContext,i)


        def for_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.For_loopContext)
            else:
                return self.getTypedRuleContext(MathParser.For_loopContext,i)


        def assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.AssignContext)
            else:
                return self.getTypedRuleContext(MathParser.AssignContext,i)


        def break_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Break_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Break_instrContext,i)


        def cont_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Cont_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Cont_instrContext,i)


        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.InstrContext)
            else:
                return self.getTypedRuleContext(MathParser.InstrContext,i)


        def DELIM(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.DELIM)
            else:
                return self.getToken(MathParser.DELIM, i)

        def getRuleIndex(self):
            return MathParser.RULE_scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScope" ):
                listener.enterScope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScope" ):
                listener.exitScope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScope" ):
                return visitor.visitScope(self)
            else:
                return visitor.visitChildren(self)




    def scope(self):

        localctx = MathParser.ScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_scope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 420
            self.match(MathParser.T__4)
            self.state = 484
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 2040910391270440) != 0:
                self.state = 482
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
                if la_ == 1:
                    self.state = 421
                    self.printf()
                    self.state = 428
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 423 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 422
                            self.match(MathParser.T__0)
                            self.state = 425 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [56]:
                        self.state = 427
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 2:
                    self.state = 430
                    self.scanf()
                    self.state = 437
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 432 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 431
                            self.match(MathParser.T__0)
                            self.state = 434 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [56]:
                        self.state = 436
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 3:
                    self.state = 439
                    self.return_instr()
                    pass

                elif la_ == 4:
                    self.state = 440
                    self.if_cond()
                    self.state = 448
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 10, 11, 12, 14, 15, 16, 17, 21, 22, 23, 25, 27, 28, 29, 30, 33, 36, 37, 46, 48, 49, 50]:
                        self.state = 444
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 441
                            self.match(MathParser.T__0)
                            self.state = 446
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [56]:
                        self.state = 447
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 5:
                    self.state = 450
                    self.while_loop()
                    self.state = 458
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 10, 11, 12, 14, 15, 16, 17, 21, 22, 23, 25, 27, 28, 29, 30, 33, 36, 37, 46, 48, 49, 50]:
                        self.state = 454
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 451
                            self.match(MathParser.T__0)
                            self.state = 456
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [56]:
                        self.state = 457
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 6:
                    self.state = 460
                    self.for_loop()
                    self.state = 468
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 10, 11, 12, 14, 15, 16, 17, 21, 22, 23, 25, 27, 28, 29, 30, 33, 36, 37, 46, 48, 49, 50]:
                        self.state = 464
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 461
                            self.match(MathParser.T__0)
                            self.state = 466
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [56]:
                        self.state = 467
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 7:
                    self.state = 470
                    self.assign()
                    self.state = 477
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 472 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 471
                            self.match(MathParser.T__0)
                            self.state = 474 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [56]:
                        self.state = 476
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 8:
                    self.state = 479
                    self.break_instr()
                    pass

                elif la_ == 9:
                    self.state = 480
                    self.cont_instr()
                    pass

                elif la_ == 10:
                    self.state = 481
                    self.instr()
                    pass


                self.state = 486
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 487
            self.match(MathParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cont_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(MathParser.CONTINUE, 0)

        def DELIM(self):
            return self.getToken(MathParser.DELIM, 0)

        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.InstrContext)
            else:
                return self.getTypedRuleContext(MathParser.InstrContext,i)


        def getRuleIndex(self):
            return MathParser.RULE_cont_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCont_instr" ):
                listener.enterCont_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCont_instr" ):
                listener.exitCont_instr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCont_instr" ):
                return visitor.visitCont_instr(self)
            else:
                return visitor.visitChildren(self)




    def cont_instr(self):

        localctx = MathParser.Cont_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_cont_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 489
            self.match(MathParser.CONTINUE)
            self.state = 490
            _la = self._input.LA(1)
            if not(_la==1 or _la==56):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 494
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 491
                    self.instr() 
                self.state = 496
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Break_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(MathParser.BREAK, 0)

        def DELIM(self):
            return self.getToken(MathParser.DELIM, 0)

        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.InstrContext)
            else:
                return self.getTypedRuleContext(MathParser.InstrContext,i)


        def getRuleIndex(self):
            return MathParser.RULE_break_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_instr" ):
                listener.enterBreak_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_instr" ):
                listener.exitBreak_instr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreak_instr" ):
                return visitor.visitBreak_instr(self)
            else:
                return visitor.visitChildren(self)




    def break_instr(self):

        localctx = MathParser.Break_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_break_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497
            self.match(MathParser.BREAK)
            self.state = 498
            _la = self._input.LA(1)
            if not(_la==1 or _la==56):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 502
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 499
                    self.instr() 
                self.state = 504
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.const = None # Token
            self.type_ = None # Token
            self.name = None # Token
            self.size = None # Token
            self._rtype = None # RtypeContext
            self.values = list() # of RtypeContexts

        def ASSIGN(self):
            return self.getToken(MathParser.ASSIGN, 0)

        def TYPE(self):
            return self.getToken(MathParser.TYPE, 0)

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def rtype(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.RtypeContext)
            else:
                return self.getTypedRuleContext(MathParser.RtypeContext,i)


        def CONST(self):
            return self.getToken(MathParser.CONST, 0)

        def INT(self):
            return self.getToken(MathParser.INT, 0)

        def getRuleIndex(self):
            return MathParser.RULE_array_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_decl" ):
                listener.enterArray_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_decl" ):
                listener.exitArray_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_decl" ):
                return visitor.visitArray_decl(self)
            else:
                return visitor.visitChildren(self)




    def array_decl(self):

        localctx = MathParser.Array_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_array_decl)
        self._la = 0 # Token type
        try:
            self.state = 536
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 506
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 505
                    localctx.const = self.match(MathParser.CONST)


                self.state = 508
                localctx.type_ = self.match(MathParser.TYPE)
                self.state = 509
                localctx.name = self.match(MathParser.VAR_NAME)
                self.state = 510
                self.match(MathParser.T__6)
                self.state = 512
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==28:
                    self.state = 511
                    localctx.size = self.match(MathParser.INT)


                self.state = 514
                self.match(MathParser.T__7)
                self.state = 515
                self.match(MathParser.ASSIGN)
                self.state = 516
                self.match(MathParser.T__4)
                self.state = 522
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 517
                        localctx._rtype = self.rtype()
                        localctx.values.append(localctx._rtype)
                        self.state = 518
                        self.match(MathParser.T__1) 
                    self.state = 524
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

                self.state = 525
                localctx._rtype = self.rtype()
                localctx.values.append(localctx._rtype)
                self.state = 526
                self.match(MathParser.T__5)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 529
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 528
                    localctx.const = self.match(MathParser.CONST)


                self.state = 531
                localctx.type_ = self.match(MathParser.TYPE)
                self.state = 532
                localctx.name = self.match(MathParser.VAR_NAME)
                self.state = 533
                self.match(MathParser.T__6)
                self.state = 534
                localctx.size = self.match(MathParser.INT)
                self.state = 535
                self.match(MathParser.T__7)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Incl_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.library = None # Token

        def INCLUDE(self):
            return self.getToken(MathParser.INCLUDE, 0)

        def LT(self):
            return self.getToken(MathParser.LT, 0)

        def GT(self):
            return self.getToken(MathParser.GT, 0)

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def getRuleIndex(self):
            return MathParser.RULE_incl_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncl_stat" ):
                listener.enterIncl_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncl_stat" ):
                listener.exitIncl_stat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncl_stat" ):
                return visitor.visitIncl_stat(self)
            else:
                return visitor.visitChildren(self)




    def incl_stat(self):

        localctx = MathParser.Incl_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_incl_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            self.match(MathParser.INCLUDE)
            self.state = 539
            self.match(MathParser.LT)
            self.state = 540
            localctx.library = self.match(MathParser.VAR_NAME)
            self.state = 541
            self.match(MathParser.T__8)
            self.state = 542
            self.match(MathParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_condContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # CondContext

        def IF(self):
            return self.getToken(MathParser.IF, 0)

        def scope(self):
            return self.getTypedRuleContext(MathParser.ScopeContext,0)


        def cond(self):
            return self.getTypedRuleContext(MathParser.CondContext,0)


        def else_cond(self):
            return self.getTypedRuleContext(MathParser.Else_condContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_if_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_cond" ):
                listener.enterIf_cond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_cond" ):
                listener.exitIf_cond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_cond" ):
                return visitor.visitIf_cond(self)
            else:
                return visitor.visitChildren(self)




    def if_cond(self):

        localctx = MathParser.If_condContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_if_cond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 544
            self.match(MathParser.IF)
            self.state = 545
            self.match(MathParser.T__2)
            self.state = 546
            localctx.condition = self.cond()
            self.state = 547
            self.match(MathParser.T__3)
            self.state = 548
            self.scope()
            self.state = 550
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 549
                self.else_cond()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_condContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(MathParser.ELSE, 0)

        def scope(self):
            return self.getTypedRuleContext(MathParser.ScopeContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_else_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_cond" ):
                listener.enterElse_cond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_cond" ):
                listener.exitElse_cond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_cond" ):
                return visitor.visitElse_cond(self)
            else:
                return visitor.visitChildren(self)




    def else_cond(self):

        localctx = MathParser.Else_condContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_else_cond)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 552
            self.match(MathParser.ELSE)
            self.state = 553
            self.scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # CondContext

        def WHILE(self):
            return self.getToken(MathParser.WHILE, 0)

        def scope(self):
            return self.getTypedRuleContext(MathParser.ScopeContext,0)


        def cond(self):
            return self.getTypedRuleContext(MathParser.CondContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_while_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_loop" ):
                listener.enterWhile_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_loop" ):
                listener.exitWhile_loop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_loop" ):
                return visitor.visitWhile_loop(self)
            else:
                return visitor.visitChildren(self)




    def while_loop(self):

        localctx = MathParser.While_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_while_loop)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 555
            self.match(MathParser.WHILE)
            self.state = 556
            self.match(MathParser.T__2)
            self.state = 557
            localctx.condition = self.cond()
            self.state = 558
            self.match(MathParser.T__3)
            self.state = 559
            self.scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.initialization = None # InitContext
            self.condition = None # CondContext
            self.increment = None # IncrContext

        def FOR(self):
            return self.getToken(MathParser.FOR, 0)

        def scope(self):
            return self.getTypedRuleContext(MathParser.ScopeContext,0)


        def init(self):
            return self.getTypedRuleContext(MathParser.InitContext,0)


        def cond(self):
            return self.getTypedRuleContext(MathParser.CondContext,0)


        def incr(self):
            return self.getTypedRuleContext(MathParser.IncrContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_for_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_loop" ):
                listener.enterFor_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_loop" ):
                listener.exitFor_loop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_loop" ):
                return visitor.visitFor_loop(self)
            else:
                return visitor.visitChildren(self)




    def for_loop(self):

        localctx = MathParser.For_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_for_loop)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 561
            self.match(MathParser.FOR)
            self.state = 562
            self.match(MathParser.T__2)
            self.state = 563
            localctx.initialization = self.init()
            self.state = 564
            self.match(MathParser.T__0)
            self.state = 565
            localctx.condition = self.cond()
            self.state = 566
            self.match(MathParser.T__0)
            self.state = 567
            localctx.increment = self.incr()
            self.state = 568
            self.match(MathParser.T__3)
            self.state = 569
            self.scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(MathParser.TYPE, 0)

        def lvar(self):
            return self.getTypedRuleContext(MathParser.LvarContext,0)


        def ASSIGN(self):
            return self.getToken(MathParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def assign(self):
            return self.getTypedRuleContext(MathParser.AssignContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_init

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInit" ):
                listener.enterInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInit" ):
                listener.exitInit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInit" ):
                return visitor.visitInit(self)
            else:
                return visitor.visitChildren(self)




    def init(self):

        localctx = MathParser.InitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_init)
        try:
            self.state = 577
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25]:
                self.enterOuterAlt(localctx, 1)
                self.state = 571
                self.match(MathParser.TYPE)
                self.state = 572
                self.lvar()
                self.state = 573
                self.match(MathParser.ASSIGN)
                self.state = 574
                self.expr(0)
                pass
            elif token in [27, 33]:
                self.enterOuterAlt(localctx, 2)
                self.state = 576
                self.assign()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self):
            return self.getTypedRuleContext(MathParser.TermContext,0)


        def factor(self):
            return self.getTypedRuleContext(MathParser.FactorContext,0)


        def GEQ(self):
            return self.getToken(MathParser.GEQ, 0)

        def LEQ(self):
            return self.getToken(MathParser.LEQ, 0)

        def NEQ(self):
            return self.getToken(MathParser.NEQ, 0)

        def GT(self):
            return self.getToken(MathParser.GT, 0)

        def LT(self):
            return self.getToken(MathParser.LT, 0)

        def EQ(self):
            return self.getToken(MathParser.EQ, 0)

        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def AND_OP(self):
            return self.getToken(MathParser.AND_OP, 0)

        def OR_OP(self):
            return self.getToken(MathParser.OR_OP, 0)

        def getRuleIndex(self):
            return MathParser.RULE_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCond" ):
                listener.enterCond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCond" ):
                listener.exitCond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCond" ):
                return visitor.visitCond(self)
            else:
                return visitor.visitChildren(self)




    def cond(self):

        localctx = MathParser.CondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_cond)
        self._la = 0 # Token type
        try:
            self.state = 592
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 579
                self.term(0)
                self.state = 580
                _la = self._input.LA(1)
                if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 11544872091648) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 581
                self.factor()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 583
                self.term(0)
                self.state = 584
                _la = self._input.LA(1)
                if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 5772436045824) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 585
                self.factor()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 587
                self.expr(0)
                self.state = 588
                _la = self._input.LA(1)
                if not(_la==44 or _la==45):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 589
                self.term(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 591
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCR(self):
            return self.getToken(MathParser.INCR, 0)

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def DECR(self):
            return self.getToken(MathParser.DECR, 0)

        def getRuleIndex(self):
            return MathParser.RULE_incr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncr" ):
                listener.enterIncr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncr" ):
                listener.exitIncr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncr" ):
                return visitor.visitIncr(self)
            else:
                return visitor.visitChildren(self)




    def incr(self):

        localctx = MathParser.IncrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_incr)
        try:
            self.state = 604
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 594
                self.match(MathParser.INCR)
                self.state = 595
                self.rvar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 596
                self.match(MathParser.DECR)
                self.state = 597
                self.rvar()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 598
                self.rvar()
                self.state = 599
                self.match(MathParser.INCR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 601
                self.rvar()
                self.state = 602
                self.match(MathParser.DECR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lvar(self):
            return self.getTypedRuleContext(MathParser.LvarContext,0)


        def ASSIGN(self):
            return self.getToken(MathParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_var_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_decl" ):
                listener.enterVar_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_decl" ):
                listener.exitVar_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVar_decl" ):
                return visitor.visitVar_decl(self)
            else:
                return visitor.visitChildren(self)




    def var_decl(self):

        localctx = MathParser.Var_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_var_decl)
        try:
            self.state = 611
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 606
                self.lvar()
                self.state = 607
                self.match(MathParser.ASSIGN)
                self.state = 608
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 610
                self.lvar()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def ASSIGN(self):
            return self.getToken(MathParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def array_el(self):
            return self.getTypedRuleContext(MathParser.Array_elContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign" ):
                listener.enterAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign" ):
                listener.exitAssign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssign" ):
                return visitor.visitAssign(self)
            else:
                return visitor.visitChildren(self)




    def assign(self):

        localctx = MathParser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_assign)
        try:
            self.state = 625
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 613
                self.rvar()
                self.state = 614
                self.match(MathParser.ASSIGN)
                self.state = 615
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 617
                self.deref()
                self.state = 618
                self.match(MathParser.ASSIGN)
                self.state = 619
                self.expr(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 621
                self.array_el()
                self.state = 622
                self.match(MathParser.ASSIGN)
                self.state = 623
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_elContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lvar(self):
            return self.getTypedRuleContext(MathParser.LvarContext,0)


        def INT(self):
            return self.getToken(MathParser.INT, 0)

        def getRuleIndex(self):
            return MathParser.RULE_array_el

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_el" ):
                listener.enterArray_el(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_el" ):
                listener.exitArray_el(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_el" ):
                return visitor.visitArray_el(self)
            else:
                return visitor.visitChildren(self)




    def array_el(self):

        localctx = MathParser.Array_elContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_array_el)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 627
            self.lvar()
            self.state = 628
            self.match(MathParser.T__6)
            self.state = 629
            self.match(MathParser.INT)
            self.state = 630
            self.match(MathParser.T__7)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DerefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STR(self):
            return self.getToken(MathParser.STR, 0)

        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_deref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeref" ):
                listener.enterDeref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeref" ):
                listener.exitDeref(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeref" ):
                return visitor.visitDeref(self)
            else:
                return visitor.visitChildren(self)




    def deref(self):

        localctx = MathParser.DerefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_deref)
        try:
            self.state = 636
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 632
                self.match(MathParser.STR)
                self.state = 633
                self.deref()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 634
                self.match(MathParser.STR)
                self.state = 635
                self.rvar()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LvarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._STR = None # Token
            self.ptr = list() # of Tokens
            self.name = None # Token

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def STR(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.STR)
            else:
                return self.getToken(MathParser.STR, i)

        def getRuleIndex(self):
            return MathParser.RULE_lvar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLvar" ):
                listener.enterLvar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLvar" ):
                listener.exitLvar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLvar" ):
                return visitor.visitLvar(self)
            else:
                return visitor.visitChildren(self)




    def lvar(self):

        localctx = MathParser.LvarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_lvar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==33:
                self.state = 638
                localctx._STR = self.match(MathParser.STR)
                localctx.ptr.append(localctx._STR)
                self.state = 643
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 644
            localctx.name = self.match(MathParser.VAR_NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RvarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def getRuleIndex(self):
            return MathParser.RULE_rvar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRvar" ):
                listener.enterRvar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRvar" ):
                listener.exitRvar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRvar" ):
                return visitor.visitRvar(self)
            else:
                return visitor.visitChildren(self)




    def rvar(self):

        localctx = MathParser.RvarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_rvar)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646
            self.match(MathParser.VAR_NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self):
            return self.getTypedRuleContext(MathParser.TermContext,0)


        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def SUM(self):
            return self.getToken(MathParser.SUM, 0)

        def DIF(self):
            return self.getToken(MathParser.DIF, 0)

        def AND_OP(self):
            return self.getToken(MathParser.AND_OP, 0)

        def OR_OP(self):
            return self.getToken(MathParser.OR_OP, 0)

        def getRuleIndex(self):
            return MathParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MathParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 68
        self.enterRecursionRule(localctx, 68, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 649
            self.term(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 662
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 660
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                    if la_ == 1:
                        localctx = MathParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 651
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 652
                        self.match(MathParser.SUM)
                        self.state = 653
                        self.term(0)
                        pass

                    elif la_ == 2:
                        localctx = MathParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 654
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 655
                        self.match(MathParser.DIF)
                        self.state = 656
                        self.term(0)
                        pass

                    elif la_ == 3:
                        localctx = MathParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 657
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 658
                        _la = self._input.LA(1)
                        if not(_la==44 or _la==45):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 659
                        self.term(0)
                        pass

             
                self.state = 664
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(MathParser.FactorContext,0)


        def NOT_OP(self):
            return self.getToken(MathParser.NOT_OP, 0)

        def term(self):
            return self.getTypedRuleContext(MathParser.TermContext,0)


        def STR(self):
            return self.getToken(MathParser.STR, 0)

        def DIV(self):
            return self.getToken(MathParser.DIV, 0)

        def MOD(self):
            return self.getToken(MathParser.MOD, 0)

        def GT(self):
            return self.getToken(MathParser.GT, 0)

        def LT(self):
            return self.getToken(MathParser.LT, 0)

        def EQ(self):
            return self.getToken(MathParser.EQ, 0)

        def GEQ(self):
            return self.getToken(MathParser.GEQ, 0)

        def LEQ(self):
            return self.getToken(MathParser.LEQ, 0)

        def NEQ(self):
            return self.getToken(MathParser.NEQ, 0)

        def INCR(self):
            return self.getToken(MathParser.INCR, 0)

        def DECR(self):
            return self.getToken(MathParser.DECR, 0)

        def getRuleIndex(self):
            return MathParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerm" ):
                return visitor.visitTerm(self)
            else:
                return visitor.visitChildren(self)



    def term(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MathParser.TermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 70
        self.enterRecursionRule(localctx, 70, self.RULE_term, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 10, 27, 28, 29, 30, 33, 36, 37, 48, 49, 50]:
                self.state = 666
                self.factor()
                pass
            elif token in [46]:
                self.state = 667
                self.match(MathParser.NOT_OP)
                self.state = 668
                self.factor()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 684
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,100,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 682
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
                    if la_ == 1:
                        localctx = MathParser.TermContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_term)
                        self.state = 671
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 672
                        _la = self._input.LA(1)
                        if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 60129542144) != 0):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 673
                        self.factor()
                        pass

                    elif la_ == 2:
                        localctx = MathParser.TermContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_term)
                        self.state = 674
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 675
                        _la = self._input.LA(1)
                        if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 5772436045824) != 0):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 676
                        self.factor()
                        pass

                    elif la_ == 3:
                        localctx = MathParser.TermContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_term)
                        self.state = 677
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 678
                        _la = self._input.LA(1)
                        if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 11544872091648) != 0):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 679
                        self.factor()
                        pass

                    elif la_ == 4:
                        localctx = MathParser.TermContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_term)
                        self.state = 680
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 681
                        _la = self._input.LA(1)
                        if not(_la==49 or _la==50):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

             
                self.state = 686
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary(self):
            return self.getTypedRuleContext(MathParser.PrimaryContext,0)


        def DIF(self):
            return self.getToken(MathParser.DIF, 0)

        def factor(self):
            return self.getTypedRuleContext(MathParser.FactorContext,0)


        def SUM(self):
            return self.getToken(MathParser.SUM, 0)

        def INCR(self):
            return self.getToken(MathParser.INCR, 0)

        def DECR(self):
            return self.getToken(MathParser.DECR, 0)

        def getRuleIndex(self):
            return MathParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFactor" ):
                return visitor.visitFactor(self)
            else:
                return visitor.visitChildren(self)




    def factor(self):

        localctx = MathParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_factor)
        self._la = 0 # Token type
        try:
            self.state = 694
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 10, 27, 28, 29, 30, 33, 48]:
                self.enterOuterAlt(localctx, 1)
                self.state = 687
                self.primary()
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 2)
                self.state = 688
                self.match(MathParser.DIF)
                self.state = 689
                self.factor()
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 3)
                self.state = 690
                self.match(MathParser.SUM)
                self.state = 691
                self.factor()
                pass
            elif token in [49, 50]:
                self.enterOuterAlt(localctx, 4)
                self.state = 692
                _la = self._input.LA(1)
                if not(_la==49 or _la==50):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 693
                self.factor()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def rtype(self):
            return self.getTypedRuleContext(MathParser.RtypeContext,0)


        def ADDR(self):
            return self.getToken(MathParser.ADDR, 0)

        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def CAST(self):
            return self.getToken(MathParser.CAST, 0)

        def primary(self):
            return self.getTypedRuleContext(MathParser.PrimaryContext,0)


        def func_call(self):
            return self.getTypedRuleContext(MathParser.Func_callContext,0)


        def array_el(self):
            return self.getTypedRuleContext(MathParser.Array_elContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimary" ):
                return visitor.visitPrimary(self)
            else:
                return visitor.visitChildren(self)




    def primary(self):

        localctx = MathParser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_primary)
        try:
            self.state = 709
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 696
                self.rvar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 697
                self.rtype()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 698
                self.match(MathParser.ADDR)
                self.state = 699
                self.rvar()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 700
                self.deref()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 701
                self.match(MathParser.T__2)
                self.state = 702
                self.expr(0)
                self.state = 703
                self.match(MathParser.T__3)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 705
                self.match(MathParser.CAST)
                self.state = 706
                self.primary()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 707
                self.func_call()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 708
                self.array_el()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RtypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(MathParser.INT, 0)

        def FLOAT(self):
            return self.getToken(MathParser.FLOAT, 0)

        def CHAR(self):
            return self.getToken(MathParser.CHAR, 0)

        def getRuleIndex(self):
            return MathParser.RULE_rtype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRtype" ):
                listener.enterRtype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRtype" ):
                listener.exitRtype(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRtype" ):
                return visitor.visitRtype(self)
            else:
                return visitor.visitChildren(self)




    def rtype(self):

        localctx = MathParser.RtypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_rtype)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 711
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 1879048192) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[34] = self.expr_sempred
        self._predicates[35] = self.term_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def term_sempred(self, localctx:TermContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 1)
         




