# Generated from Math.g4 by ANTLR 4.11.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,59,920,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,1,0,5,0,92,8,0,
        10,0,12,0,95,9,0,1,0,5,0,98,8,0,10,0,12,0,101,9,0,1,0,1,0,1,0,1,
        0,5,0,107,8,0,10,0,12,0,110,9,0,1,0,3,0,113,8,0,1,0,1,0,4,0,117,
        8,0,11,0,12,0,118,1,0,3,0,122,8,0,5,0,124,8,0,10,0,12,0,127,9,0,
        1,0,1,0,1,1,1,1,4,1,133,8,1,11,1,12,1,134,1,1,3,1,138,8,1,1,1,1,
        1,4,1,142,8,1,11,1,12,1,143,1,1,3,1,147,8,1,1,1,1,1,4,1,151,8,1,
        11,1,12,1,152,1,1,3,1,156,8,1,1,1,1,1,4,1,160,8,1,11,1,12,1,161,
        1,1,3,1,165,8,1,1,1,3,1,168,8,1,1,2,3,2,171,8,2,1,2,1,2,1,2,1,2,
        5,2,177,8,2,10,2,12,2,180,9,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,3,3,189,
        8,3,1,3,1,3,1,3,1,3,1,3,3,3,196,8,3,1,3,1,3,1,3,1,3,5,3,202,8,3,
        10,3,12,3,205,9,3,1,3,3,3,208,8,3,1,3,3,3,211,8,3,1,4,1,4,1,4,1,
        4,1,4,1,4,1,4,3,4,220,8,4,1,5,1,5,3,5,224,8,5,1,6,1,6,1,6,1,6,3,
        6,230,8,6,1,6,1,6,3,6,234,8,6,1,6,1,6,1,6,5,6,239,8,6,10,6,12,6,
        242,9,6,1,6,3,6,245,8,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        3,7,257,8,7,1,8,1,8,1,8,5,8,262,8,8,10,8,12,8,265,9,8,1,9,3,9,268,
        8,9,1,9,1,9,3,9,272,8,9,1,9,5,9,275,8,9,10,9,12,9,278,9,9,1,9,1,
        9,1,9,3,9,283,8,9,1,9,3,9,286,8,9,1,9,1,9,5,9,290,8,9,10,9,12,9,
        293,9,9,1,9,3,9,296,8,9,1,9,1,9,1,9,3,9,301,8,9,3,9,303,8,9,1,10,
        3,10,306,8,10,1,10,1,10,3,10,310,8,10,1,10,5,10,313,8,10,10,10,12,
        10,316,9,10,1,10,1,10,1,10,3,10,321,8,10,1,10,1,10,1,10,1,11,3,11,
        327,8,11,1,11,1,11,3,11,331,8,11,1,11,5,11,334,8,11,10,11,12,11,
        337,9,11,1,11,1,11,1,11,3,11,342,8,11,1,11,1,11,1,12,1,12,1,12,5,
        12,349,8,12,10,12,12,12,352,9,12,1,13,1,13,1,13,1,13,1,13,3,13,359,
        8,13,1,14,1,14,1,14,3,14,364,8,14,1,14,1,14,1,15,1,15,1,15,4,15,
        371,8,15,11,15,12,15,372,1,15,3,15,376,8,15,1,15,1,15,4,15,380,8,
        15,11,15,12,15,381,1,15,3,15,385,8,15,1,15,1,15,1,15,5,15,390,8,
        15,10,15,12,15,393,9,15,1,15,3,15,396,8,15,1,15,1,15,5,15,400,8,
        15,10,15,12,15,403,9,15,1,15,3,15,406,8,15,1,15,1,15,5,15,410,8,
        15,10,15,12,15,413,9,15,1,15,3,15,416,8,15,1,15,1,15,4,15,420,8,
        15,11,15,12,15,421,1,15,3,15,425,8,15,1,15,1,15,1,15,4,15,430,8,
        15,11,15,12,15,431,1,15,3,15,435,8,15,1,15,1,15,5,15,439,8,15,10,
        15,12,15,442,9,15,1,15,3,15,445,8,15,1,15,5,15,448,8,15,10,15,12,
        15,451,9,15,1,15,1,15,1,16,1,16,3,16,457,8,16,1,16,1,16,1,16,5,16,
        462,8,16,10,16,12,16,465,9,16,1,17,1,17,1,17,4,17,470,8,17,11,17,
        12,17,471,1,17,3,17,475,8,17,1,17,1,17,4,17,479,8,17,11,17,12,17,
        480,1,17,3,17,484,8,17,1,17,1,17,1,17,5,17,489,8,17,10,17,12,17,
        492,9,17,1,17,3,17,495,8,17,1,17,1,17,5,17,499,8,17,10,17,12,17,
        502,9,17,1,17,3,17,505,8,17,1,17,1,17,5,17,509,8,17,10,17,12,17,
        512,9,17,1,17,3,17,515,8,17,1,17,1,17,4,17,519,8,17,11,17,12,17,
        520,1,17,3,17,524,8,17,1,17,1,17,1,17,1,17,1,17,4,17,531,8,17,11,
        17,12,17,532,1,17,3,17,536,8,17,1,17,1,17,5,17,540,8,17,10,17,12,
        17,543,9,17,1,17,3,17,546,8,17,1,17,5,17,549,8,17,10,17,12,17,552,
        9,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,5,18,562,8,18,10,18,
        12,18,565,9,18,1,18,3,18,568,8,18,1,18,1,18,1,19,1,19,1,19,1,19,
        1,19,1,20,1,20,1,20,1,20,1,21,1,21,4,21,583,8,21,11,21,12,21,584,
        1,21,3,21,588,8,21,1,21,1,21,4,21,592,8,21,11,21,12,21,593,1,21,
        3,21,597,8,21,1,21,1,21,1,21,5,21,602,8,21,10,21,12,21,605,9,21,
        1,21,3,21,608,8,21,1,21,1,21,5,21,612,8,21,10,21,12,21,615,9,21,
        1,21,3,21,618,8,21,1,21,1,21,5,21,622,8,21,10,21,12,21,625,9,21,
        1,21,3,21,628,8,21,1,21,1,21,4,21,632,8,21,11,21,12,21,633,1,21,
        3,21,637,8,21,1,21,1,21,1,21,1,21,1,21,4,21,644,8,21,11,21,12,21,
        645,1,21,3,21,649,8,21,1,21,1,21,5,21,653,8,21,10,21,12,21,656,9,
        21,1,21,3,21,659,8,21,1,21,5,21,662,8,21,10,21,12,21,665,9,21,1,
        22,1,22,1,22,5,22,670,8,22,10,22,12,22,673,9,22,1,23,1,23,1,23,5,
        23,678,8,23,10,23,12,23,681,9,23,1,24,3,24,684,8,24,1,24,1,24,5,
        24,688,8,24,10,24,12,24,691,9,24,1,24,1,24,1,24,3,24,696,8,24,1,
        24,1,24,1,24,1,24,1,24,1,24,5,24,704,8,24,10,24,12,24,707,9,24,1,
        24,1,24,1,24,1,24,3,24,713,8,24,1,24,1,24,5,24,717,8,24,10,24,12,
        24,720,9,24,1,24,1,24,1,24,1,24,3,24,726,8,24,1,25,1,25,1,25,1,25,
        1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,3,26,740,8,26,1,27,1,27,
        1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,
        1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,3,30,767,8,30,
        1,31,1,31,3,31,771,8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
        1,32,1,32,3,32,783,8,32,1,33,1,33,1,33,1,33,1,33,3,33,790,8,33,1,
        34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,804,
        8,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
        1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,826,8,35,1,36,1,36,
        1,36,1,36,3,36,832,8,36,1,37,5,37,835,8,37,10,37,12,37,838,9,37,
        1,37,1,37,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,3,39,856,8,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
        1,40,1,40,1,40,1,40,1,40,5,40,870,8,40,10,40,12,40,873,9,40,1,41,
        1,41,1,41,1,41,3,41,879,8,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
        1,41,5,41,889,8,41,10,41,12,41,892,9,41,1,42,1,42,1,42,1,42,1,42,
        1,42,1,42,3,42,901,8,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
        1,43,1,43,1,43,1,43,1,43,3,43,916,8,43,1,44,1,44,1,44,1,350,2,80,
        82,45,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
        42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
        86,88,0,8,2,0,1,1,57,57,1,0,45,46,3,0,40,40,42,42,44,44,3,0,39,39,
        41,41,43,43,1,0,34,36,1,0,39,44,1,0,50,51,1,0,29,31,1075,0,99,1,
        0,0,0,2,167,1,0,0,0,4,170,1,0,0,0,6,210,1,0,0,0,8,219,1,0,0,0,10,
        223,1,0,0,0,12,225,1,0,0,0,14,256,1,0,0,0,16,258,1,0,0,0,18,302,
        1,0,0,0,20,305,1,0,0,0,22,326,1,0,0,0,24,345,1,0,0,0,26,358,1,0,
        0,0,28,360,1,0,0,0,30,367,1,0,0,0,32,454,1,0,0,0,34,466,1,0,0,0,
        36,555,1,0,0,0,38,571,1,0,0,0,40,576,1,0,0,0,42,663,1,0,0,0,44,666,
        1,0,0,0,46,674,1,0,0,0,48,725,1,0,0,0,50,727,1,0,0,0,52,733,1,0,
        0,0,54,741,1,0,0,0,56,744,1,0,0,0,58,750,1,0,0,0,60,766,1,0,0,0,
        62,770,1,0,0,0,64,782,1,0,0,0,66,789,1,0,0,0,68,803,1,0,0,0,70,825,
        1,0,0,0,72,831,1,0,0,0,74,836,1,0,0,0,76,841,1,0,0,0,78,855,1,0,
        0,0,80,857,1,0,0,0,82,878,1,0,0,0,84,900,1,0,0,0,86,915,1,0,0,0,
        88,917,1,0,0,0,90,92,3,10,5,0,91,90,1,0,0,0,92,95,1,0,0,0,93,91,
        1,0,0,0,93,94,1,0,0,0,94,96,1,0,0,0,95,93,1,0,0,0,96,98,3,50,25,
        0,97,93,1,0,0,0,98,101,1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,0,100,
        125,1,0,0,0,101,99,1,0,0,0,102,124,3,10,5,0,103,124,3,2,1,0,104,
        112,3,20,10,0,105,107,5,1,0,0,106,105,1,0,0,0,107,110,1,0,0,0,108,
        106,1,0,0,0,108,109,1,0,0,0,109,113,1,0,0,0,110,108,1,0,0,0,111,
        113,5,57,0,0,112,108,1,0,0,0,112,111,1,0,0,0,113,124,1,0,0,0,114,
        121,3,22,11,0,115,117,5,1,0,0,116,115,1,0,0,0,117,118,1,0,0,0,118,
        116,1,0,0,0,118,119,1,0,0,0,119,122,1,0,0,0,120,122,5,57,0,0,121,
        116,1,0,0,0,121,120,1,0,0,0,122,124,1,0,0,0,123,102,1,0,0,0,123,
        103,1,0,0,0,123,104,1,0,0,0,123,114,1,0,0,0,124,127,1,0,0,0,125,
        123,1,0,0,0,125,126,1,0,0,0,126,128,1,0,0,0,127,125,1,0,0,0,128,
        129,5,0,0,1,129,1,1,0,0,0,130,137,3,4,2,0,131,133,5,1,0,0,132,131,
        1,0,0,0,133,134,1,0,0,0,134,132,1,0,0,0,134,135,1,0,0,0,135,138,
        1,0,0,0,136,138,5,57,0,0,137,132,1,0,0,0,137,136,1,0,0,0,138,168,
        1,0,0,0,139,146,3,48,24,0,140,142,5,1,0,0,141,140,1,0,0,0,142,143,
        1,0,0,0,143,141,1,0,0,0,143,144,1,0,0,0,144,147,1,0,0,0,145,147,
        5,57,0,0,146,141,1,0,0,0,146,145,1,0,0,0,147,168,1,0,0,0,148,155,
        3,80,40,0,149,151,5,1,0,0,150,149,1,0,0,0,151,152,1,0,0,0,152,150,
        1,0,0,0,152,153,1,0,0,0,153,156,1,0,0,0,154,156,5,57,0,0,155,150,
        1,0,0,0,155,154,1,0,0,0,156,168,1,0,0,0,157,164,3,68,34,0,158,160,
        5,1,0,0,159,158,1,0,0,0,160,161,1,0,0,0,161,159,1,0,0,0,161,162,
        1,0,0,0,162,165,1,0,0,0,163,165,5,57,0,0,164,159,1,0,0,0,164,163,
        1,0,0,0,165,168,1,0,0,0,166,168,3,34,17,0,167,130,1,0,0,0,167,139,
        1,0,0,0,167,148,1,0,0,0,167,157,1,0,0,0,167,166,1,0,0,0,168,3,1,
        0,0,0,169,171,5,12,0,0,170,169,1,0,0,0,170,171,1,0,0,0,171,172,1,
        0,0,0,172,178,5,26,0,0,173,174,3,66,33,0,174,175,5,2,0,0,175,177,
        1,0,0,0,176,173,1,0,0,0,177,180,1,0,0,0,178,176,1,0,0,0,178,179,
        1,0,0,0,179,181,1,0,0,0,180,178,1,0,0,0,181,182,3,66,33,0,182,5,
        1,0,0,0,183,184,5,22,0,0,184,188,5,3,0,0,185,189,3,76,38,0,186,189,
        3,88,44,0,187,189,5,33,0,0,188,185,1,0,0,0,188,186,1,0,0,0,188,187,
        1,0,0,0,189,190,1,0,0,0,190,211,5,4,0,0,191,192,5,22,0,0,192,195,
        5,3,0,0,193,196,5,32,0,0,194,196,5,33,0,0,195,193,1,0,0,0,195,194,
        1,0,0,0,196,207,1,0,0,0,197,203,5,2,0,0,198,199,3,8,4,0,199,200,
        5,2,0,0,200,202,1,0,0,0,201,198,1,0,0,0,202,205,1,0,0,0,203,201,
        1,0,0,0,203,204,1,0,0,0,204,206,1,0,0,0,205,203,1,0,0,0,206,208,
        3,8,4,0,207,197,1,0,0,0,207,208,1,0,0,0,208,209,1,0,0,0,209,211,
        5,4,0,0,210,183,1,0,0,0,210,191,1,0,0,0,211,7,1,0,0,0,212,220,3,
        76,38,0,213,220,3,88,44,0,214,220,3,70,35,0,215,220,3,72,36,0,216,
        220,3,78,39,0,217,220,3,80,40,0,218,220,5,33,0,0,219,212,1,0,0,0,
        219,213,1,0,0,0,219,214,1,0,0,0,219,215,1,0,0,0,219,216,1,0,0,0,
        219,217,1,0,0,0,219,218,1,0,0,0,220,9,1,0,0,0,221,224,5,58,0,0,222,
        224,5,59,0,0,223,221,1,0,0,0,223,222,1,0,0,0,224,11,1,0,0,0,225,
        226,5,24,0,0,226,229,5,3,0,0,227,230,5,32,0,0,228,230,5,33,0,0,229,
        227,1,0,0,0,229,228,1,0,0,0,230,231,1,0,0,0,231,240,5,2,0,0,232,
        234,5,49,0,0,233,232,1,0,0,0,233,234,1,0,0,0,234,235,1,0,0,0,235,
        236,3,14,7,0,236,237,5,2,0,0,237,239,1,0,0,0,238,233,1,0,0,0,239,
        242,1,0,0,0,240,238,1,0,0,0,240,241,1,0,0,0,241,244,1,0,0,0,242,
        240,1,0,0,0,243,245,5,49,0,0,244,243,1,0,0,0,244,245,1,0,0,0,245,
        246,1,0,0,0,246,247,3,14,7,0,247,248,5,4,0,0,248,13,1,0,0,0,249,
        257,3,76,38,0,250,257,3,72,36,0,251,257,3,70,35,0,252,253,5,49,0,
        0,253,257,3,76,38,0,254,255,5,49,0,0,255,257,3,72,36,0,256,249,1,
        0,0,0,256,250,1,0,0,0,256,251,1,0,0,0,256,252,1,0,0,0,256,254,1,
        0,0,0,257,15,1,0,0,0,258,263,3,18,9,0,259,260,5,2,0,0,260,262,3,
        18,9,0,261,259,1,0,0,0,262,265,1,0,0,0,263,261,1,0,0,0,263,264,1,
        0,0,0,264,17,1,0,0,0,265,263,1,0,0,0,266,268,5,12,0,0,267,266,1,
        0,0,0,267,268,1,0,0,0,268,269,1,0,0,0,269,271,5,26,0,0,270,272,5,
        49,0,0,271,270,1,0,0,0,271,272,1,0,0,0,272,276,1,0,0,0,273,275,5,
        34,0,0,274,273,1,0,0,0,275,278,1,0,0,0,276,274,1,0,0,0,276,277,1,
        0,0,0,277,279,1,0,0,0,278,276,1,0,0,0,279,282,5,28,0,0,280,281,5,
        48,0,0,281,283,3,80,40,0,282,280,1,0,0,0,282,283,1,0,0,0,283,303,
        1,0,0,0,284,286,5,12,0,0,285,284,1,0,0,0,285,286,1,0,0,0,286,287,
        1,0,0,0,287,291,5,26,0,0,288,290,5,34,0,0,289,288,1,0,0,0,290,293,
        1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,292,295,1,0,0,0,293,291,
        1,0,0,0,294,296,5,49,0,0,295,294,1,0,0,0,295,296,1,0,0,0,296,297,
        1,0,0,0,297,300,5,28,0,0,298,299,5,48,0,0,299,301,3,80,40,0,300,
        298,1,0,0,0,300,301,1,0,0,0,301,303,1,0,0,0,302,267,1,0,0,0,302,
        285,1,0,0,0,303,19,1,0,0,0,304,306,5,12,0,0,305,304,1,0,0,0,305,
        306,1,0,0,0,306,309,1,0,0,0,307,310,5,26,0,0,308,310,5,27,0,0,309,
        307,1,0,0,0,309,308,1,0,0,0,310,314,1,0,0,0,311,313,5,34,0,0,312,
        311,1,0,0,0,313,316,1,0,0,0,314,312,1,0,0,0,314,315,1,0,0,0,315,
        317,1,0,0,0,316,314,1,0,0,0,317,318,5,28,0,0,318,320,5,3,0,0,319,
        321,3,16,8,0,320,319,1,0,0,0,320,321,1,0,0,0,321,322,1,0,0,0,322,
        323,5,4,0,0,323,324,3,30,15,0,324,21,1,0,0,0,325,327,5,12,0,0,326,
        325,1,0,0,0,326,327,1,0,0,0,327,330,1,0,0,0,328,331,5,26,0,0,329,
        331,5,27,0,0,330,328,1,0,0,0,330,329,1,0,0,0,331,335,1,0,0,0,332,
        334,5,34,0,0,333,332,1,0,0,0,334,337,1,0,0,0,335,333,1,0,0,0,335,
        336,1,0,0,0,336,338,1,0,0,0,337,335,1,0,0,0,338,339,5,28,0,0,339,
        341,5,3,0,0,340,342,3,16,8,0,341,340,1,0,0,0,341,342,1,0,0,0,342,
        343,1,0,0,0,343,344,5,4,0,0,344,23,1,0,0,0,345,350,3,26,13,0,346,
        347,5,2,0,0,347,349,3,26,13,0,348,346,1,0,0,0,349,352,1,0,0,0,350,
        351,1,0,0,0,350,348,1,0,0,0,351,25,1,0,0,0,352,350,1,0,0,0,353,359,
        3,76,38,0,354,359,3,72,36,0,355,359,3,28,14,0,356,359,3,88,44,0,
        357,359,3,80,40,0,358,353,1,0,0,0,358,354,1,0,0,0,358,355,1,0,0,
        0,358,356,1,0,0,0,358,357,1,0,0,0,359,27,1,0,0,0,360,361,5,28,0,
        0,361,363,5,3,0,0,362,364,3,24,12,0,363,362,1,0,0,0,363,364,1,0,
        0,0,364,365,1,0,0,0,365,366,5,4,0,0,366,29,1,0,0,0,367,449,5,5,0,
        0,368,375,3,6,3,0,369,371,5,1,0,0,370,369,1,0,0,0,371,372,1,0,0,
        0,372,370,1,0,0,0,372,373,1,0,0,0,373,376,1,0,0,0,374,376,5,57,0,
        0,375,370,1,0,0,0,375,374,1,0,0,0,376,448,1,0,0,0,377,384,3,12,6,
        0,378,380,5,1,0,0,379,378,1,0,0,0,380,381,1,0,0,0,381,379,1,0,0,
        0,381,382,1,0,0,0,382,385,1,0,0,0,383,385,5,57,0,0,384,379,1,0,0,
        0,384,383,1,0,0,0,385,448,1,0,0,0,386,448,3,32,16,0,387,395,3,52,
        26,0,388,390,5,1,0,0,389,388,1,0,0,0,390,393,1,0,0,0,391,389,1,0,
        0,0,391,392,1,0,0,0,392,396,1,0,0,0,393,391,1,0,0,0,394,396,5,57,
        0,0,395,391,1,0,0,0,395,394,1,0,0,0,396,448,1,0,0,0,397,405,3,56,
        28,0,398,400,5,1,0,0,399,398,1,0,0,0,400,403,1,0,0,0,401,399,1,0,
        0,0,401,402,1,0,0,0,402,406,1,0,0,0,403,401,1,0,0,0,404,406,5,57,
        0,0,405,401,1,0,0,0,405,404,1,0,0,0,406,448,1,0,0,0,407,415,3,58,
        29,0,408,410,5,1,0,0,409,408,1,0,0,0,410,413,1,0,0,0,411,409,1,0,
        0,0,411,412,1,0,0,0,412,416,1,0,0,0,413,411,1,0,0,0,414,416,5,57,
        0,0,415,411,1,0,0,0,415,414,1,0,0,0,416,448,1,0,0,0,417,424,3,68,
        34,0,418,420,5,1,0,0,419,418,1,0,0,0,420,421,1,0,0,0,421,419,1,0,
        0,0,421,422,1,0,0,0,422,425,1,0,0,0,423,425,5,57,0,0,424,419,1,0,
        0,0,424,423,1,0,0,0,425,448,1,0,0,0,426,448,3,2,1,0,427,434,3,78,
        39,0,428,430,5,1,0,0,429,428,1,0,0,0,430,431,1,0,0,0,431,429,1,0,
        0,0,431,432,1,0,0,0,432,435,1,0,0,0,433,435,5,57,0,0,434,429,1,0,
        0,0,434,433,1,0,0,0,435,448,1,0,0,0,436,444,3,36,18,0,437,439,5,
        1,0,0,438,437,1,0,0,0,439,442,1,0,0,0,440,438,1,0,0,0,440,441,1,
        0,0,0,441,445,1,0,0,0,442,440,1,0,0,0,443,445,5,57,0,0,444,440,1,
        0,0,0,444,443,1,0,0,0,445,448,1,0,0,0,446,448,3,10,5,0,447,368,1,
        0,0,0,447,377,1,0,0,0,447,386,1,0,0,0,447,387,1,0,0,0,447,397,1,
        0,0,0,447,407,1,0,0,0,447,417,1,0,0,0,447,426,1,0,0,0,447,427,1,
        0,0,0,447,436,1,0,0,0,447,446,1,0,0,0,448,451,1,0,0,0,449,447,1,
        0,0,0,449,450,1,0,0,0,450,452,1,0,0,0,451,449,1,0,0,0,452,453,5,
        6,0,0,453,31,1,0,0,0,454,456,5,23,0,0,455,457,3,80,40,0,456,455,
        1,0,0,0,456,457,1,0,0,0,457,458,1,0,0,0,458,463,5,1,0,0,459,462,
        3,2,1,0,460,462,3,32,16,0,461,459,1,0,0,0,461,460,1,0,0,0,462,465,
        1,0,0,0,463,461,1,0,0,0,463,464,1,0,0,0,464,33,1,0,0,0,465,463,1,
        0,0,0,466,550,5,5,0,0,467,474,3,6,3,0,468,470,5,1,0,0,469,468,1,
        0,0,0,470,471,1,0,0,0,471,469,1,0,0,0,471,472,1,0,0,0,472,475,1,
        0,0,0,473,475,5,57,0,0,474,469,1,0,0,0,474,473,1,0,0,0,475,549,1,
        0,0,0,476,483,3,12,6,0,477,479,5,1,0,0,478,477,1,0,0,0,479,480,1,
        0,0,0,480,478,1,0,0,0,480,481,1,0,0,0,481,484,1,0,0,0,482,484,5,
        57,0,0,483,478,1,0,0,0,483,482,1,0,0,0,484,549,1,0,0,0,485,549,3,
        32,16,0,486,494,3,52,26,0,487,489,5,1,0,0,488,487,1,0,0,0,489,492,
        1,0,0,0,490,488,1,0,0,0,490,491,1,0,0,0,491,495,1,0,0,0,492,490,
        1,0,0,0,493,495,5,57,0,0,494,490,1,0,0,0,494,493,1,0,0,0,495,549,
        1,0,0,0,496,504,3,56,28,0,497,499,5,1,0,0,498,497,1,0,0,0,499,502,
        1,0,0,0,500,498,1,0,0,0,500,501,1,0,0,0,501,505,1,0,0,0,502,500,
        1,0,0,0,503,505,5,57,0,0,504,500,1,0,0,0,504,503,1,0,0,0,505,549,
        1,0,0,0,506,514,3,58,29,0,507,509,5,1,0,0,508,507,1,0,0,0,509,512,
        1,0,0,0,510,508,1,0,0,0,510,511,1,0,0,0,511,515,1,0,0,0,512,510,
        1,0,0,0,513,515,5,57,0,0,514,510,1,0,0,0,514,513,1,0,0,0,515,549,
        1,0,0,0,516,523,3,68,34,0,517,519,5,1,0,0,518,517,1,0,0,0,519,520,
        1,0,0,0,520,518,1,0,0,0,520,521,1,0,0,0,521,524,1,0,0,0,522,524,
        5,57,0,0,523,518,1,0,0,0,523,522,1,0,0,0,524,549,1,0,0,0,525,549,
        3,46,23,0,526,549,3,44,22,0,527,549,3,2,1,0,528,535,3,78,39,0,529,
        531,5,1,0,0,530,529,1,0,0,0,531,532,1,0,0,0,532,530,1,0,0,0,532,
        533,1,0,0,0,533,536,1,0,0,0,534,536,5,57,0,0,535,530,1,0,0,0,535,
        534,1,0,0,0,536,549,1,0,0,0,537,545,3,36,18,0,538,540,5,1,0,0,539,
        538,1,0,0,0,540,543,1,0,0,0,541,539,1,0,0,0,541,542,1,0,0,0,542,
        546,1,0,0,0,543,541,1,0,0,0,544,546,5,57,0,0,545,541,1,0,0,0,545,
        544,1,0,0,0,546,549,1,0,0,0,547,549,3,10,5,0,548,467,1,0,0,0,548,
        476,1,0,0,0,548,485,1,0,0,0,548,486,1,0,0,0,548,496,1,0,0,0,548,
        506,1,0,0,0,548,516,1,0,0,0,548,525,1,0,0,0,548,526,1,0,0,0,548,
        527,1,0,0,0,548,528,1,0,0,0,548,537,1,0,0,0,548,547,1,0,0,0,549,
        552,1,0,0,0,550,548,1,0,0,0,550,551,1,0,0,0,551,553,1,0,0,0,552,
        550,1,0,0,0,553,554,5,6,0,0,554,35,1,0,0,0,555,556,5,19,0,0,556,
        557,5,3,0,0,557,558,3,80,40,0,558,559,5,4,0,0,559,563,5,5,0,0,560,
        562,3,38,19,0,561,560,1,0,0,0,562,565,1,0,0,0,563,561,1,0,0,0,563,
        564,1,0,0,0,564,567,1,0,0,0,565,563,1,0,0,0,566,568,3,40,20,0,567,
        566,1,0,0,0,567,568,1,0,0,0,568,569,1,0,0,0,569,570,5,6,0,0,570,
        37,1,0,0,0,571,572,5,20,0,0,572,573,3,80,40,0,573,574,5,7,0,0,574,
        575,3,42,21,0,575,39,1,0,0,0,576,577,5,21,0,0,577,578,5,7,0,0,578,
        579,3,42,21,0,579,41,1,0,0,0,580,587,3,6,3,0,581,583,5,1,0,0,582,
        581,1,0,0,0,583,584,1,0,0,0,584,582,1,0,0,0,584,585,1,0,0,0,585,
        588,1,0,0,0,586,588,5,57,0,0,587,582,1,0,0,0,587,586,1,0,0,0,588,
        662,1,0,0,0,589,596,3,12,6,0,590,592,5,1,0,0,591,590,1,0,0,0,592,
        593,1,0,0,0,593,591,1,0,0,0,593,594,1,0,0,0,594,597,1,0,0,0,595,
        597,5,57,0,0,596,591,1,0,0,0,596,595,1,0,0,0,597,662,1,0,0,0,598,
        662,3,32,16,0,599,607,3,52,26,0,600,602,5,1,0,0,601,600,1,0,0,0,
        602,605,1,0,0,0,603,601,1,0,0,0,603,604,1,0,0,0,604,608,1,0,0,0,
        605,603,1,0,0,0,606,608,5,57,0,0,607,603,1,0,0,0,607,606,1,0,0,0,
        608,662,1,0,0,0,609,617,3,56,28,0,610,612,5,1,0,0,611,610,1,0,0,
        0,612,615,1,0,0,0,613,611,1,0,0,0,613,614,1,0,0,0,614,618,1,0,0,
        0,615,613,1,0,0,0,616,618,5,57,0,0,617,613,1,0,0,0,617,616,1,0,0,
        0,618,662,1,0,0,0,619,627,3,58,29,0,620,622,5,1,0,0,621,620,1,0,
        0,0,622,625,1,0,0,0,623,621,1,0,0,0,623,624,1,0,0,0,624,628,1,0,
        0,0,625,623,1,0,0,0,626,628,5,57,0,0,627,623,1,0,0,0,627,626,1,0,
        0,0,628,662,1,0,0,0,629,636,3,68,34,0,630,632,5,1,0,0,631,630,1,
        0,0,0,632,633,1,0,0,0,633,631,1,0,0,0,633,634,1,0,0,0,634,637,1,
        0,0,0,635,637,5,57,0,0,636,631,1,0,0,0,636,635,1,0,0,0,637,662,1,
        0,0,0,638,662,3,46,23,0,639,662,3,44,22,0,640,662,3,2,1,0,641,648,
        3,78,39,0,642,644,5,1,0,0,643,642,1,0,0,0,644,645,1,0,0,0,645,643,
        1,0,0,0,645,646,1,0,0,0,646,649,1,0,0,0,647,649,5,57,0,0,648,643,
        1,0,0,0,648,647,1,0,0,0,649,662,1,0,0,0,650,658,3,36,18,0,651,653,
        5,1,0,0,652,651,1,0,0,0,653,656,1,0,0,0,654,652,1,0,0,0,654,655,
        1,0,0,0,655,659,1,0,0,0,656,654,1,0,0,0,657,659,5,57,0,0,658,654,
        1,0,0,0,658,657,1,0,0,0,659,662,1,0,0,0,660,662,3,10,5,0,661,580,
        1,0,0,0,661,589,1,0,0,0,661,598,1,0,0,0,661,599,1,0,0,0,661,609,
        1,0,0,0,661,619,1,0,0,0,661,629,1,0,0,0,661,638,1,0,0,0,661,639,
        1,0,0,0,661,640,1,0,0,0,661,641,1,0,0,0,661,650,1,0,0,0,661,660,
        1,0,0,0,662,665,1,0,0,0,663,661,1,0,0,0,663,664,1,0,0,0,664,43,1,
        0,0,0,665,663,1,0,0,0,666,667,5,18,0,0,667,671,7,0,0,0,668,670,3,
        2,1,0,669,668,1,0,0,0,670,673,1,0,0,0,671,669,1,0,0,0,671,672,1,
        0,0,0,672,45,1,0,0,0,673,671,1,0,0,0,674,675,5,17,0,0,675,679,7,
        0,0,0,676,678,3,2,1,0,677,676,1,0,0,0,678,681,1,0,0,0,679,677,1,
        0,0,0,679,680,1,0,0,0,680,47,1,0,0,0,681,679,1,0,0,0,682,684,5,12,
        0,0,683,682,1,0,0,0,683,684,1,0,0,0,684,685,1,0,0,0,685,689,5,26,
        0,0,686,688,5,34,0,0,687,686,1,0,0,0,688,691,1,0,0,0,689,687,1,0,
        0,0,689,690,1,0,0,0,690,692,1,0,0,0,691,689,1,0,0,0,692,693,5,28,
        0,0,693,695,5,8,0,0,694,696,5,29,0,0,695,694,1,0,0,0,695,696,1,0,
        0,0,696,697,1,0,0,0,697,698,5,9,0,0,698,699,5,48,0,0,699,705,5,5,
        0,0,700,701,3,88,44,0,701,702,5,2,0,0,702,704,1,0,0,0,703,700,1,
        0,0,0,704,707,1,0,0,0,705,703,1,0,0,0,705,706,1,0,0,0,706,708,1,
        0,0,0,707,705,1,0,0,0,708,709,3,88,44,0,709,710,5,6,0,0,710,726,
        1,0,0,0,711,713,5,12,0,0,712,711,1,0,0,0,712,713,1,0,0,0,713,714,
        1,0,0,0,714,718,5,26,0,0,715,717,5,34,0,0,716,715,1,0,0,0,717,720,
        1,0,0,0,718,716,1,0,0,0,718,719,1,0,0,0,719,721,1,0,0,0,720,718,
        1,0,0,0,721,722,5,28,0,0,722,723,5,8,0,0,723,724,5,29,0,0,724,726,
        5,9,0,0,725,683,1,0,0,0,725,712,1,0,0,0,726,49,1,0,0,0,727,728,5,
        25,0,0,728,729,5,39,0,0,729,730,5,28,0,0,730,731,5,10,0,0,731,732,
        5,41,0,0,732,51,1,0,0,0,733,734,5,13,0,0,734,735,5,3,0,0,735,736,
        3,62,31,0,736,737,5,4,0,0,737,739,3,34,17,0,738,740,3,54,27,0,739,
        738,1,0,0,0,739,740,1,0,0,0,740,53,1,0,0,0,741,742,5,14,0,0,742,
        743,3,34,17,0,743,55,1,0,0,0,744,745,5,16,0,0,745,746,5,3,0,0,746,
        747,3,62,31,0,747,748,5,4,0,0,748,749,3,34,17,0,749,57,1,0,0,0,750,
        751,5,15,0,0,751,752,5,3,0,0,752,753,3,60,30,0,753,754,5,1,0,0,754,
        755,3,62,31,0,755,756,5,1,0,0,756,757,3,64,32,0,757,758,5,4,0,0,
        758,759,3,34,17,0,759,59,1,0,0,0,760,761,5,26,0,0,761,762,3,74,37,
        0,762,763,5,48,0,0,763,764,3,80,40,0,764,767,1,0,0,0,765,767,3,68,
        34,0,766,760,1,0,0,0,766,765,1,0,0,0,767,61,1,0,0,0,768,771,3,78,
        39,0,769,771,3,80,40,0,770,768,1,0,0,0,770,769,1,0,0,0,771,63,1,
        0,0,0,772,773,5,50,0,0,773,783,3,76,38,0,774,775,5,51,0,0,775,783,
        3,76,38,0,776,777,3,76,38,0,777,778,5,50,0,0,778,783,1,0,0,0,779,
        780,3,76,38,0,780,781,5,51,0,0,781,783,1,0,0,0,782,772,1,0,0,0,782,
        774,1,0,0,0,782,776,1,0,0,0,782,779,1,0,0,0,783,65,1,0,0,0,784,785,
        3,74,37,0,785,786,5,48,0,0,786,787,3,80,40,0,787,790,1,0,0,0,788,
        790,3,74,37,0,789,784,1,0,0,0,789,788,1,0,0,0,790,67,1,0,0,0,791,
        792,3,76,38,0,792,793,5,48,0,0,793,794,3,80,40,0,794,804,1,0,0,0,
        795,796,3,72,36,0,796,797,5,48,0,0,797,798,3,80,40,0,798,804,1,0,
        0,0,799,800,3,70,35,0,800,801,5,48,0,0,801,802,3,80,40,0,802,804,
        1,0,0,0,803,791,1,0,0,0,803,795,1,0,0,0,803,799,1,0,0,0,804,69,1,
        0,0,0,805,806,3,74,37,0,806,807,5,8,0,0,807,808,5,29,0,0,808,809,
        5,9,0,0,809,826,1,0,0,0,810,811,3,74,37,0,811,812,5,8,0,0,812,813,
        3,80,40,0,813,814,5,9,0,0,814,826,1,0,0,0,815,816,3,72,36,0,816,
        817,5,8,0,0,817,818,5,29,0,0,818,819,5,9,0,0,819,826,1,0,0,0,820,
        821,3,72,36,0,821,822,5,8,0,0,822,823,3,80,40,0,823,824,5,9,0,0,
        824,826,1,0,0,0,825,805,1,0,0,0,825,810,1,0,0,0,825,815,1,0,0,0,
        825,820,1,0,0,0,826,71,1,0,0,0,827,828,5,34,0,0,828,832,3,72,36,
        0,829,830,5,34,0,0,830,832,3,76,38,0,831,827,1,0,0,0,831,829,1,0,
        0,0,832,73,1,0,0,0,833,835,5,34,0,0,834,833,1,0,0,0,835,838,1,0,
        0,0,836,834,1,0,0,0,836,837,1,0,0,0,837,839,1,0,0,0,838,836,1,0,
        0,0,839,840,5,28,0,0,840,75,1,0,0,0,841,842,5,28,0,0,842,77,1,0,
        0,0,843,844,3,80,40,0,844,845,7,1,0,0,845,846,3,80,40,0,846,856,
        1,0,0,0,847,848,3,80,40,0,848,849,7,2,0,0,849,850,3,80,40,0,850,
        856,1,0,0,0,851,852,3,80,40,0,852,853,7,3,0,0,853,854,3,80,40,0,
        854,856,1,0,0,0,855,843,1,0,0,0,855,847,1,0,0,0,855,851,1,0,0,0,
        856,79,1,0,0,0,857,858,6,40,-1,0,858,859,3,82,41,0,859,871,1,0,0,
        0,860,861,10,3,0,0,861,862,5,37,0,0,862,870,3,82,41,0,863,864,10,
        2,0,0,864,865,5,38,0,0,865,870,3,82,41,0,866,867,10,1,0,0,867,868,
        7,1,0,0,868,870,3,82,41,0,869,860,1,0,0,0,869,863,1,0,0,0,869,866,
        1,0,0,0,870,873,1,0,0,0,871,869,1,0,0,0,871,872,1,0,0,0,872,81,1,
        0,0,0,873,871,1,0,0,0,874,875,6,41,-1,0,875,879,3,84,42,0,876,877,
        5,47,0,0,877,879,3,84,42,0,878,874,1,0,0,0,878,876,1,0,0,0,879,890,
        1,0,0,0,880,881,10,4,0,0,881,882,7,4,0,0,882,889,3,84,42,0,883,884,
        10,3,0,0,884,885,7,5,0,0,885,889,3,84,42,0,886,887,10,1,0,0,887,
        889,7,6,0,0,888,880,1,0,0,0,888,883,1,0,0,0,888,886,1,0,0,0,889,
        892,1,0,0,0,890,888,1,0,0,0,890,891,1,0,0,0,891,83,1,0,0,0,892,890,
        1,0,0,0,893,901,3,86,43,0,894,895,5,38,0,0,895,901,3,84,42,0,896,
        897,5,37,0,0,897,901,3,84,42,0,898,899,7,6,0,0,899,901,3,84,42,0,
        900,893,1,0,0,0,900,894,1,0,0,0,900,896,1,0,0,0,900,898,1,0,0,0,
        901,85,1,0,0,0,902,916,3,76,38,0,903,916,3,88,44,0,904,905,5,49,
        0,0,905,916,3,76,38,0,906,916,3,72,36,0,907,908,5,3,0,0,908,909,
        3,80,40,0,909,910,5,4,0,0,910,916,1,0,0,0,911,912,5,11,0,0,912,916,
        3,86,43,0,913,916,3,28,14,0,914,916,3,70,35,0,915,902,1,0,0,0,915,
        903,1,0,0,0,915,904,1,0,0,0,915,906,1,0,0,0,915,907,1,0,0,0,915,
        911,1,0,0,0,915,913,1,0,0,0,915,914,1,0,0,0,916,87,1,0,0,0,917,918,
        7,7,0,0,918,89,1,0,0,0,137,93,99,108,112,118,121,123,125,134,137,
        143,146,152,155,161,164,167,170,178,188,195,203,207,210,219,223,
        229,233,240,244,256,263,267,271,276,282,285,291,295,300,302,305,
        309,314,320,326,330,335,341,350,358,363,372,375,381,384,391,395,
        401,405,411,415,421,424,431,434,440,444,447,449,456,461,463,471,
        474,480,483,490,494,500,504,510,514,520,523,532,535,541,545,548,
        550,563,567,584,587,593,596,603,607,613,617,623,627,633,636,645,
        648,654,658,661,663,671,679,683,689,695,705,712,718,725,739,766,
        770,782,789,803,825,831,836,855,869,871,878,888,890,900,915
    ]

class MathParser ( Parser ):

    grammarFileName = "Math.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "','", "'('", "')'", "'{'", "'}'", 
                     "':'", "'['", "']'", "'.h'", "<INVALID>", "'const'", 
                     "'if'", "'else'", "'for'", "'while'", "'break'", "'continue'", 
                     "'switch'", "'case'", "'default'", "'printf'", "'return'", 
                     "'scanf'", "'#include'", "<INVALID>", "'void'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'*'", "'/'", "'%'", "'+'", "'-'", "'<'", 
                     "'<='", "'>'", "'>='", "'=='", "'!='", "'||'", "'&&'", 
                     "'!'", "'='", "'&'", "'++'", "'--'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "CAST", "CONST", 
                      "IF", "ELSE", "FOR", "WHILE", "BREAK", "CONTINUE", 
                      "SWITCH", "CASE", "DEFAULT", "PRINTF", "RETURN", "SCANF", 
                      "INCLUDE", "TYPE", "VOID", "VAR_NAME", "INT", "FLOAT", 
                      "CHAR", "SCANF_STRING", "STRING", "STR", "DIV", "MOD", 
                      "SUM", "DIF", "LT", "LEQ", "GT", "GEQ", "EQ", "NEQ", 
                      "OR_OP", "AND_OP", "NOT_OP", "ASSIGN", "ADDR", "INCR", 
                      "DECR", "SP", "NEWLINE", "WS", "UNICODE_WS", "LN", 
                      "DELIM", "COMMENT", "LCOMMENT" ]

    RULE_math = 0
    RULE_instr = 1
    RULE_declr = 2
    RULE_printf = 3
    RULE_printf_arg = 4
    RULE_comment = 5
    RULE_scanf = 6
    RULE_scanf_arg = 7
    RULE_param_list = 8
    RULE_param_declr = 9
    RULE_func_defn = 10
    RULE_func_decl = 11
    RULE_arg_list = 12
    RULE_func_arg = 13
    RULE_func_call = 14
    RULE_func_scope = 15
    RULE_return_instr = 16
    RULE_scope = 17
    RULE_switch_instr = 18
    RULE_case_instr = 19
    RULE_default_instr = 20
    RULE_switch_scope = 21
    RULE_cont_instr = 22
    RULE_break_instr = 23
    RULE_array_decl = 24
    RULE_incl_stat = 25
    RULE_if_cond = 26
    RULE_else_cond = 27
    RULE_while_loop = 28
    RULE_for_loop = 29
    RULE_init = 30
    RULE_cond = 31
    RULE_incr = 32
    RULE_var_decl = 33
    RULE_assign = 34
    RULE_array_el = 35
    RULE_deref = 36
    RULE_lvar = 37
    RULE_rvar = 38
    RULE_comp = 39
    RULE_expr = 40
    RULE_term = 41
    RULE_factor = 42
    RULE_primary = 43
    RULE_rtype = 44

    ruleNames =  [ "math", "instr", "declr", "printf", "printf_arg", "comment", 
                   "scanf", "scanf_arg", "param_list", "param_declr", "func_defn", 
                   "func_decl", "arg_list", "func_arg", "func_call", "func_scope", 
                   "return_instr", "scope", "switch_instr", "case_instr", 
                   "default_instr", "switch_scope", "cont_instr", "break_instr", 
                   "array_decl", "incl_stat", "if_cond", "else_cond", "while_loop", 
                   "for_loop", "init", "cond", "incr", "var_decl", "assign", 
                   "array_el", "deref", "lvar", "rvar", "comp", "expr", 
                   "term", "factor", "primary", "rtype" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    CAST=11
    CONST=12
    IF=13
    ELSE=14
    FOR=15
    WHILE=16
    BREAK=17
    CONTINUE=18
    SWITCH=19
    CASE=20
    DEFAULT=21
    PRINTF=22
    RETURN=23
    SCANF=24
    INCLUDE=25
    TYPE=26
    VOID=27
    VAR_NAME=28
    INT=29
    FLOAT=30
    CHAR=31
    SCANF_STRING=32
    STRING=33
    STR=34
    DIV=35
    MOD=36
    SUM=37
    DIF=38
    LT=39
    LEQ=40
    GT=41
    GEQ=42
    EQ=43
    NEQ=44
    OR_OP=45
    AND_OP=46
    NOT_OP=47
    ASSIGN=48
    ADDR=49
    INCR=50
    DECR=51
    SP=52
    NEWLINE=53
    WS=54
    UNICODE_WS=55
    LN=56
    DELIM=57
    COMMENT=58
    LCOMMENT=59

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class MathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(MathParser.EOF, 0)

        def incl_stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Incl_statContext)
            else:
                return self.getTypedRuleContext(MathParser.Incl_statContext,i)


        def comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.CommentContext)
            else:
                return self.getTypedRuleContext(MathParser.CommentContext,i)


        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.InstrContext)
            else:
                return self.getTypedRuleContext(MathParser.InstrContext,i)


        def func_defn(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Func_defnContext)
            else:
                return self.getTypedRuleContext(MathParser.Func_defnContext,i)


        def func_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Func_declContext)
            else:
                return self.getTypedRuleContext(MathParser.Func_declContext,i)


        def DELIM(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.DELIM)
            else:
                return self.getToken(MathParser.DELIM, i)

        def getRuleIndex(self):
            return MathParser.RULE_math

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMath" ):
                listener.enterMath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMath" ):
                listener.exitMath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMath" ):
                return visitor.visitMath(self)
            else:
                return visitor.visitChildren(self)




    def math(self):

        localctx = MathParser.MathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_math)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 99
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 93
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==58 or _la==59:
                        self.state = 90
                        self.comment()
                        self.state = 95
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 96
                    self.incl_stat() 
                self.state = 101
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

            self.state = 125
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 868772949342033960) != 0:
                self.state = 123
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
                if la_ == 1:
                    self.state = 102
                    self.comment()
                    pass

                elif la_ == 2:
                    self.state = 103
                    self.instr()
                    pass

                elif la_ == 3:
                    self.state = 104
                    self.func_defn()
                    self.state = 112
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [-1, 1, 3, 5, 11, 12, 26, 27, 28, 29, 30, 31, 34, 37, 38, 47, 49, 50, 51, 58, 59]:
                        self.state = 108
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 105
                            self.match(MathParser.T__0)
                            self.state = 110
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [57]:
                        self.state = 111
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 4:
                    self.state = 114
                    self.func_decl()
                    self.state = 121
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 116 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 115
                            self.match(MathParser.T__0)
                            self.state = 118 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [57]:
                        self.state = 120
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass


                self.state = 127
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 128
            self.match(MathParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declr(self):
            return self.getTypedRuleContext(MathParser.DeclrContext,0)


        def DELIM(self):
            return self.getToken(MathParser.DELIM, 0)

        def array_decl(self):
            return self.getTypedRuleContext(MathParser.Array_declContext,0)


        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def assign(self):
            return self.getTypedRuleContext(MathParser.AssignContext,0)


        def scope(self):
            return self.getTypedRuleContext(MathParser.ScopeContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstr" ):
                listener.enterInstr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstr" ):
                listener.exitInstr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstr" ):
                return visitor.visitInstr(self)
            else:
                return visitor.visitChildren(self)




    def instr(self):

        localctx = MathParser.InstrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_instr)
        self._la = 0 # Token type
        try:
            self.state = 167
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 130
                self.declr()
                self.state = 137
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1]:
                    self.state = 132 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 131
                        self.match(MathParser.T__0)
                        self.state = 134 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1):
                            break

                    pass
                elif token in [57]:
                    self.state = 136
                    self.match(MathParser.DELIM)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 139
                self.array_decl()
                self.state = 146
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1]:
                    self.state = 141 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 140
                        self.match(MathParser.T__0)
                        self.state = 143 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1):
                            break

                    pass
                elif token in [57]:
                    self.state = 145
                    self.match(MathParser.DELIM)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 148
                self.expr(0)
                self.state = 155
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1]:
                    self.state = 150 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 149
                        self.match(MathParser.T__0)
                        self.state = 152 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1):
                            break

                    pass
                elif token in [57]:
                    self.state = 154
                    self.match(MathParser.DELIM)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 157
                self.assign()
                self.state = 164
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1]:
                    self.state = 159 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 158
                        self.match(MathParser.T__0)
                        self.state = 161 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1):
                            break

                    pass
                elif token in [57]:
                    self.state = 163
                    self.match(MathParser.DELIM)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 166
                self.scope()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(MathParser.TYPE, 0)

        def var_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Var_declContext)
            else:
                return self.getTypedRuleContext(MathParser.Var_declContext,i)


        def CONST(self):
            return self.getToken(MathParser.CONST, 0)

        def getRuleIndex(self):
            return MathParser.RULE_declr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclr" ):
                listener.enterDeclr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclr" ):
                listener.exitDeclr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclr" ):
                return visitor.visitDeclr(self)
            else:
                return visitor.visitChildren(self)




    def declr(self):

        localctx = MathParser.DeclrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_declr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 170
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 169
                self.match(MathParser.CONST)


            self.state = 172
            self.match(MathParser.TYPE)
            self.state = 178
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 173
                    self.var_decl()
                    self.state = 174
                    self.match(MathParser.T__1) 
                self.state = 180
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

            self.state = 181
            self.var_decl()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrintfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.print_val = None # Token
            self.format_string = None # Token
            self._printf_arg = None # Printf_argContext
            self.vars_ = list() # of Printf_argContexts

        def PRINTF(self):
            return self.getToken(MathParser.PRINTF, 0)

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def rtype(self):
            return self.getTypedRuleContext(MathParser.RtypeContext,0)


        def STRING(self):
            return self.getToken(MathParser.STRING, 0)

        def SCANF_STRING(self):
            return self.getToken(MathParser.SCANF_STRING, 0)

        def printf_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Printf_argContext)
            else:
                return self.getTypedRuleContext(MathParser.Printf_argContext,i)


        def getRuleIndex(self):
            return MathParser.RULE_printf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintf" ):
                listener.enterPrintf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintf" ):
                listener.exitPrintf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrintf" ):
                return visitor.visitPrintf(self)
            else:
                return visitor.visitChildren(self)




    def printf(self):

        localctx = MathParser.PrintfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_printf)
        self._la = 0 # Token type
        try:
            self.state = 210
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 183
                self.match(MathParser.PRINTF)
                self.state = 184
                self.match(MathParser.T__2)
                self.state = 188
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [28]:
                    self.state = 185
                    self.rvar()
                    pass
                elif token in [29, 30, 31]:
                    self.state = 186
                    self.rtype()
                    pass
                elif token in [33]:
                    self.state = 187
                    localctx.print_val = self.match(MathParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 190
                self.match(MathParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 191
                self.match(MathParser.PRINTF)
                self.state = 192
                self.match(MathParser.T__2)
                self.state = 195
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [32]:
                    self.state = 193
                    localctx.format_string = self.match(MathParser.SCANF_STRING)
                    pass
                elif token in [33]:
                    self.state = 194
                    localctx.format_string = self.match(MathParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 197
                    self.match(MathParser.T__1)
                    self.state = 203
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 198
                            localctx._printf_arg = self.printf_arg()
                            localctx.vars_.append(localctx._printf_arg)
                            self.state = 199
                            self.match(MathParser.T__1) 
                        self.state = 205
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

                    self.state = 206
                    localctx._printf_arg = self.printf_arg()
                    localctx.vars_.append(localctx._printf_arg)


                self.state = 209
                self.match(MathParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Printf_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def rtype(self):
            return self.getTypedRuleContext(MathParser.RtypeContext,0)


        def array_el(self):
            return self.getTypedRuleContext(MathParser.Array_elContext,0)


        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def comp(self):
            return self.getTypedRuleContext(MathParser.CompContext,0)


        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def STRING(self):
            return self.getToken(MathParser.STRING, 0)

        def getRuleIndex(self):
            return MathParser.RULE_printf_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintf_arg" ):
                listener.enterPrintf_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintf_arg" ):
                listener.exitPrintf_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrintf_arg" ):
                return visitor.visitPrintf_arg(self)
            else:
                return visitor.visitChildren(self)




    def printf_arg(self):

        localctx = MathParser.Printf_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_printf_arg)
        try:
            self.state = 219
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 212
                self.rvar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 213
                self.rtype()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 214
                self.array_el()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 215
                self.deref()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 216
                self.comp()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 217
                self.expr(0)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 218
                self.match(MathParser.STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.com = None # Token

        def COMMENT(self):
            return self.getToken(MathParser.COMMENT, 0)

        def LCOMMENT(self):
            return self.getToken(MathParser.LCOMMENT, 0)

        def getRuleIndex(self):
            return MathParser.RULE_comment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComment" ):
                listener.enterComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComment" ):
                listener.exitComment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComment" ):
                return visitor.visitComment(self)
            else:
                return visitor.visitChildren(self)




    def comment(self):

        localctx = MathParser.CommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_comment)
        try:
            self.state = 223
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [58]:
                self.enterOuterAlt(localctx, 1)
                self.state = 221
                localctx.com = self.match(MathParser.COMMENT)
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 2)
                self.state = 222
                localctx.com = self.match(MathParser.LCOMMENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScanfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.format_string = None # Token
            self._scanf_arg = None # Scanf_argContext
            self.vars_ = list() # of Scanf_argContexts

        def SCANF(self):
            return self.getToken(MathParser.SCANF, 0)

        def scanf_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Scanf_argContext)
            else:
                return self.getTypedRuleContext(MathParser.Scanf_argContext,i)


        def SCANF_STRING(self):
            return self.getToken(MathParser.SCANF_STRING, 0)

        def STRING(self):
            return self.getToken(MathParser.STRING, 0)

        def ADDR(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.ADDR)
            else:
                return self.getToken(MathParser.ADDR, i)

        def getRuleIndex(self):
            return MathParser.RULE_scanf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScanf" ):
                listener.enterScanf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScanf" ):
                listener.exitScanf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScanf" ):
                return visitor.visitScanf(self)
            else:
                return visitor.visitChildren(self)




    def scanf(self):

        localctx = MathParser.ScanfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_scanf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 225
            self.match(MathParser.SCANF)
            self.state = 226
            self.match(MathParser.T__2)
            self.state = 229
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [32]:
                self.state = 227
                localctx.format_string = self.match(MathParser.SCANF_STRING)
                pass
            elif token in [33]:
                self.state = 228
                localctx.format_string = self.match(MathParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 231
            self.match(MathParser.T__1)
            self.state = 240
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 233
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                    if la_ == 1:
                        self.state = 232
                        self.match(MathParser.ADDR)


                    self.state = 235
                    localctx._scanf_arg = self.scanf_arg()
                    localctx.vars_.append(localctx._scanf_arg)
                    self.state = 236
                    self.match(MathParser.T__1) 
                self.state = 242
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

            self.state = 244
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.state = 243
                self.match(MathParser.ADDR)


            self.state = 246
            localctx._scanf_arg = self.scanf_arg()
            localctx.vars_.append(localctx._scanf_arg)
            self.state = 247
            self.match(MathParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Scanf_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def array_el(self):
            return self.getTypedRuleContext(MathParser.Array_elContext,0)


        def ADDR(self):
            return self.getToken(MathParser.ADDR, 0)

        def getRuleIndex(self):
            return MathParser.RULE_scanf_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScanf_arg" ):
                listener.enterScanf_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScanf_arg" ):
                listener.exitScanf_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScanf_arg" ):
                return visitor.visitScanf_arg(self)
            else:
                return visitor.visitChildren(self)




    def scanf_arg(self):

        localctx = MathParser.Scanf_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_scanf_arg)
        try:
            self.state = 256
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 249
                self.rvar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 250
                self.deref()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 251
                self.array_el()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 252
                self.match(MathParser.ADDR)
                self.state = 253
                self.rvar()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 254
                self.match(MathParser.ADDR)
                self.state = 255
                self.deref()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._param_declr = None # Param_declrContext
            self.params = list() # of Param_declrContexts

        def param_declr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Param_declrContext)
            else:
                return self.getTypedRuleContext(MathParser.Param_declrContext,i)


        def getRuleIndex(self):
            return MathParser.RULE_param_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_list" ):
                listener.enterParam_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_list" ):
                listener.exitParam_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_list" ):
                return visitor.visitParam_list(self)
            else:
                return visitor.visitChildren(self)




    def param_list(self):

        localctx = MathParser.Param_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_param_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 258
            localctx._param_declr = self.param_declr()
            localctx.params.append(localctx._param_declr)
            self.state = 263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2:
                self.state = 259
                self.match(MathParser.T__1)
                self.state = 260
                localctx._param_declr = self.param_declr()
                localctx.params.append(localctx._param_declr)
                self.state = 265
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_declrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.const = None # Token
            self.type_ = None # Token
            self.reference = None # Token
            self._STR = None # Token
            self.ptr = list() # of Tokens
            self.var = None # Token
            self.default = None # ExprContext

        def TYPE(self):
            return self.getToken(MathParser.TYPE, 0)

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def ASSIGN(self):
            return self.getToken(MathParser.ASSIGN, 0)

        def CONST(self):
            return self.getToken(MathParser.CONST, 0)

        def ADDR(self):
            return self.getToken(MathParser.ADDR, 0)

        def STR(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.STR)
            else:
                return self.getToken(MathParser.STR, i)

        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_param_declr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_declr" ):
                listener.enterParam_declr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_declr" ):
                listener.exitParam_declr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_declr" ):
                return visitor.visitParam_declr(self)
            else:
                return visitor.visitChildren(self)




    def param_declr(self):

        localctx = MathParser.Param_declrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_param_declr)
        self._la = 0 # Token type
        try:
            self.state = 302
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 267
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 266
                    localctx.const = self.match(MathParser.CONST)


                self.state = 269
                localctx.type_ = self.match(MathParser.TYPE)
                self.state = 271
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 270
                    localctx.reference = self.match(MathParser.ADDR)


                self.state = 276
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==34:
                    self.state = 273
                    localctx._STR = self.match(MathParser.STR)
                    localctx.ptr.append(localctx._STR)
                    self.state = 278
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 279
                localctx.var = self.match(MathParser.VAR_NAME)
                self.state = 282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==48:
                    self.state = 280
                    self.match(MathParser.ASSIGN)
                    self.state = 281
                    localctx.default = self.expr(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 285
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 284
                    localctx.const = self.match(MathParser.CONST)


                self.state = 287
                localctx.type_ = self.match(MathParser.TYPE)
                self.state = 291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==34:
                    self.state = 288
                    localctx._STR = self.match(MathParser.STR)
                    localctx.ptr.append(localctx._STR)
                    self.state = 293
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 294
                    localctx.reference = self.match(MathParser.ADDR)


                self.state = 297
                localctx.var = self.match(MathParser.VAR_NAME)
                self.state = 300
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==48:
                    self.state = 298
                    self.match(MathParser.ASSIGN)
                    self.state = 299
                    localctx.default = self.expr(0)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_defnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.const = None # Token
            self.type_ = None # Token
            self._STR = None # Token
            self.ptr = list() # of Tokens
            self.name = None # Token
            self.params = None # Param_listContext

        def func_scope(self):
            return self.getTypedRuleContext(MathParser.Func_scopeContext,0)


        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def TYPE(self):
            return self.getToken(MathParser.TYPE, 0)

        def VOID(self):
            return self.getToken(MathParser.VOID, 0)

        def CONST(self):
            return self.getToken(MathParser.CONST, 0)

        def STR(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.STR)
            else:
                return self.getToken(MathParser.STR, i)

        def param_list(self):
            return self.getTypedRuleContext(MathParser.Param_listContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_func_defn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_defn" ):
                listener.enterFunc_defn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_defn" ):
                listener.exitFunc_defn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_defn" ):
                return visitor.visitFunc_defn(self)
            else:
                return visitor.visitChildren(self)




    def func_defn(self):

        localctx = MathParser.Func_defnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_func_defn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 304
                localctx.const = self.match(MathParser.CONST)


            self.state = 309
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26]:
                self.state = 307
                localctx.type_ = self.match(MathParser.TYPE)
                pass
            elif token in [27]:
                self.state = 308
                localctx.type_ = self.match(MathParser.VOID)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==34:
                self.state = 311
                localctx._STR = self.match(MathParser.STR)
                localctx.ptr.append(localctx._STR)
                self.state = 316
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 317
            localctx.name = self.match(MathParser.VAR_NAME)
            self.state = 318
            self.match(MathParser.T__2)
            self.state = 320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12 or _la==26:
                self.state = 319
                localctx.params = self.param_list()


            self.state = 322
            self.match(MathParser.T__3)
            self.state = 323
            self.func_scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.const = None # Token
            self.type_ = None # Token
            self._STR = None # Token
            self.ptr = list() # of Tokens
            self.name = None # Token
            self.params = None # Param_listContext

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def TYPE(self):
            return self.getToken(MathParser.TYPE, 0)

        def VOID(self):
            return self.getToken(MathParser.VOID, 0)

        def CONST(self):
            return self.getToken(MathParser.CONST, 0)

        def STR(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.STR)
            else:
                return self.getToken(MathParser.STR, i)

        def param_list(self):
            return self.getTypedRuleContext(MathParser.Param_listContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_func_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_decl" ):
                listener.enterFunc_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_decl" ):
                listener.exitFunc_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_decl" ):
                return visitor.visitFunc_decl(self)
            else:
                return visitor.visitChildren(self)




    def func_decl(self):

        localctx = MathParser.Func_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_func_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 325
                localctx.const = self.match(MathParser.CONST)


            self.state = 330
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26]:
                self.state = 328
                localctx.type_ = self.match(MathParser.TYPE)
                pass
            elif token in [27]:
                self.state = 329
                localctx.type_ = self.match(MathParser.VOID)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==34:
                self.state = 332
                localctx._STR = self.match(MathParser.STR)
                localctx.ptr.append(localctx._STR)
                self.state = 337
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 338
            localctx.name = self.match(MathParser.VAR_NAME)
            self.state = 339
            self.match(MathParser.T__2)
            self.state = 341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12 or _la==26:
                self.state = 340
                localctx.params = self.param_list()


            self.state = 343
            self.match(MathParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arg_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._func_arg = None # Func_argContext
            self.args = list() # of Func_argContexts

        def func_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Func_argContext)
            else:
                return self.getTypedRuleContext(MathParser.Func_argContext,i)


        def getRuleIndex(self):
            return MathParser.RULE_arg_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArg_list" ):
                listener.enterArg_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArg_list" ):
                listener.exitArg_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArg_list" ):
                return visitor.visitArg_list(self)
            else:
                return visitor.visitChildren(self)




    def arg_list(self):

        localctx = MathParser.Arg_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_arg_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            localctx._func_arg = self.func_arg()
            localctx.args.append(localctx._func_arg)
            self.state = 350
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 346
                    self.match(MathParser.T__1)
                    self.state = 347
                    localctx._func_arg = self.func_arg()
                    localctx.args.append(localctx._func_arg) 
                self.state = 352
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def func_call(self):
            return self.getTypedRuleContext(MathParser.Func_callContext,0)


        def rtype(self):
            return self.getTypedRuleContext(MathParser.RtypeContext,0)


        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_func_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_arg" ):
                listener.enterFunc_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_arg" ):
                listener.exitFunc_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_arg" ):
                return visitor.visitFunc_arg(self)
            else:
                return visitor.visitChildren(self)




    def func_arg(self):

        localctx = MathParser.Func_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_func_arg)
        try:
            self.state = 358
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 353
                self.rvar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 354
                self.deref()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 355
                self.func_call()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 356
                self.rtype()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 357
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self.args = None # Arg_listContext

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def arg_list(self):
            return self.getTypedRuleContext(MathParser.Arg_listContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_call" ):
                listener.enterFunc_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_call" ):
                listener.exitFunc_call(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_call" ):
                return visitor.visitFunc_call(self)
            else:
                return visitor.visitChildren(self)




    def func_call(self):

        localctx = MathParser.Func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_func_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            localctx.name = self.match(MathParser.VAR_NAME)
            self.state = 361
            self.match(MathParser.T__2)
            self.state = 363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 4081820685568008) != 0:
                self.state = 362
                localctx.args = self.arg_list()


            self.state = 365
            self.match(MathParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_scopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def printf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.PrintfContext)
            else:
                return self.getTypedRuleContext(MathParser.PrintfContext,i)


        def scanf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.ScanfContext)
            else:
                return self.getTypedRuleContext(MathParser.ScanfContext,i)


        def return_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Return_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Return_instrContext,i)


        def if_cond(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.If_condContext)
            else:
                return self.getTypedRuleContext(MathParser.If_condContext,i)


        def while_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.While_loopContext)
            else:
                return self.getTypedRuleContext(MathParser.While_loopContext,i)


        def for_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.For_loopContext)
            else:
                return self.getTypedRuleContext(MathParser.For_loopContext,i)


        def assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.AssignContext)
            else:
                return self.getTypedRuleContext(MathParser.AssignContext,i)


        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.InstrContext)
            else:
                return self.getTypedRuleContext(MathParser.InstrContext,i)


        def comp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.CompContext)
            else:
                return self.getTypedRuleContext(MathParser.CompContext,i)


        def switch_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Switch_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Switch_instrContext,i)


        def comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.CommentContext)
            else:
                return self.getTypedRuleContext(MathParser.CommentContext,i)


        def DELIM(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.DELIM)
            else:
                return self.getToken(MathParser.DELIM, i)

        def getRuleIndex(self):
            return MathParser.RULE_func_scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_scope" ):
                listener.enterFunc_scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_scope" ):
                listener.exitFunc_scope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_scope" ):
                return visitor.visitFunc_scope(self)
            else:
                return visitor.visitChildren(self)




    def func_scope(self):

        localctx = MathParser.Func_scopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_func_scope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 367
            self.match(MathParser.T__4)
            self.state = 449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 868772949237807144) != 0:
                self.state = 447
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                if la_ == 1:
                    self.state = 368
                    self.printf()
                    self.state = 375
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 370 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 369
                            self.match(MathParser.T__0)
                            self.state = 372 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [57]:
                        self.state = 374
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 2:
                    self.state = 377
                    self.scanf()
                    self.state = 384
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 379 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 378
                            self.match(MathParser.T__0)
                            self.state = 381 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [57]:
                        self.state = 383
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 3:
                    self.state = 386
                    self.return_instr()
                    pass

                elif la_ == 4:
                    self.state = 387
                    self.if_cond()
                    self.state = 395
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 11, 12, 13, 15, 16, 19, 22, 23, 24, 26, 28, 29, 30, 31, 34, 37, 38, 47, 49, 50, 51, 58, 59]:
                        self.state = 391
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 388
                            self.match(MathParser.T__0)
                            self.state = 393
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [57]:
                        self.state = 394
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 5:
                    self.state = 397
                    self.while_loop()
                    self.state = 405
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 11, 12, 13, 15, 16, 19, 22, 23, 24, 26, 28, 29, 30, 31, 34, 37, 38, 47, 49, 50, 51, 58, 59]:
                        self.state = 401
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 398
                            self.match(MathParser.T__0)
                            self.state = 403
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [57]:
                        self.state = 404
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 6:
                    self.state = 407
                    self.for_loop()
                    self.state = 415
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 11, 12, 13, 15, 16, 19, 22, 23, 24, 26, 28, 29, 30, 31, 34, 37, 38, 47, 49, 50, 51, 58, 59]:
                        self.state = 411
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 408
                            self.match(MathParser.T__0)
                            self.state = 413
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [57]:
                        self.state = 414
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 7:
                    self.state = 417
                    self.assign()
                    self.state = 424
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 419 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 418
                            self.match(MathParser.T__0)
                            self.state = 421 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [57]:
                        self.state = 423
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 8:
                    self.state = 426
                    self.instr()
                    pass

                elif la_ == 9:
                    self.state = 427
                    self.comp()
                    self.state = 434
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 429 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 428
                            self.match(MathParser.T__0)
                            self.state = 431 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [57]:
                        self.state = 433
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 10:
                    self.state = 436
                    self.switch_instr()
                    self.state = 444
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 11, 12, 13, 15, 16, 19, 22, 23, 24, 26, 28, 29, 30, 31, 34, 37, 38, 47, 49, 50, 51, 58, 59]:
                        self.state = 440
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 437
                            self.match(MathParser.T__0)
                            self.state = 442
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [57]:
                        self.state = 443
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 11:
                    self.state = 446
                    self.comment()
                    pass


                self.state = 451
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 452
            self.match(MathParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ret_val = None # ExprContext

        def RETURN(self):
            return self.getToken(MathParser.RETURN, 0)

        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.InstrContext)
            else:
                return self.getTypedRuleContext(MathParser.InstrContext,i)


        def return_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Return_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Return_instrContext,i)


        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_return_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_instr" ):
                listener.enterReturn_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_instr" ):
                listener.exitReturn_instr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_instr" ):
                return visitor.visitReturn_instr(self)
            else:
                return visitor.visitChildren(self)




    def return_instr(self):

        localctx = MathParser.Return_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_return_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 454
            self.match(MathParser.RETURN)
            self.state = 456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 4081820685568008) != 0:
                self.state = 455
                localctx.ret_val = self.expr(0)


            self.state = 458
            self.match(MathParser.T__0)
            self.state = 463
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,72,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 461
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [3, 5, 11, 12, 26, 28, 29, 30, 31, 34, 37, 38, 47, 49, 50, 51]:
                        self.state = 459
                        self.instr()
                        pass
                    elif token in [23]:
                        self.state = 460
                        self.return_instr()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 465
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def printf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.PrintfContext)
            else:
                return self.getTypedRuleContext(MathParser.PrintfContext,i)


        def scanf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.ScanfContext)
            else:
                return self.getTypedRuleContext(MathParser.ScanfContext,i)


        def return_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Return_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Return_instrContext,i)


        def if_cond(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.If_condContext)
            else:
                return self.getTypedRuleContext(MathParser.If_condContext,i)


        def while_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.While_loopContext)
            else:
                return self.getTypedRuleContext(MathParser.While_loopContext,i)


        def for_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.For_loopContext)
            else:
                return self.getTypedRuleContext(MathParser.For_loopContext,i)


        def assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.AssignContext)
            else:
                return self.getTypedRuleContext(MathParser.AssignContext,i)


        def break_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Break_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Break_instrContext,i)


        def cont_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Cont_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Cont_instrContext,i)


        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.InstrContext)
            else:
                return self.getTypedRuleContext(MathParser.InstrContext,i)


        def comp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.CompContext)
            else:
                return self.getTypedRuleContext(MathParser.CompContext,i)


        def switch_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Switch_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Switch_instrContext,i)


        def comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.CommentContext)
            else:
                return self.getTypedRuleContext(MathParser.CommentContext,i)


        def DELIM(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.DELIM)
            else:
                return self.getToken(MathParser.DELIM, i)

        def getRuleIndex(self):
            return MathParser.RULE_scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScope" ):
                listener.enterScope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScope" ):
                listener.exitScope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScope" ):
                return visitor.visitScope(self)
            else:
                return visitor.visitChildren(self)




    def scope(self):

        localctx = MathParser.ScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_scope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            self.match(MathParser.T__4)
            self.state = 550
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 868772949238200360) != 0:
                self.state = 548
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
                if la_ == 1:
                    self.state = 467
                    self.printf()
                    self.state = 474
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 469 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 468
                            self.match(MathParser.T__0)
                            self.state = 471 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [57]:
                        self.state = 473
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 2:
                    self.state = 476
                    self.scanf()
                    self.state = 483
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 478 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 477
                            self.match(MathParser.T__0)
                            self.state = 480 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [57]:
                        self.state = 482
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 3:
                    self.state = 485
                    self.return_instr()
                    pass

                elif la_ == 4:
                    self.state = 486
                    self.if_cond()
                    self.state = 494
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 11, 12, 13, 15, 16, 17, 18, 19, 22, 23, 24, 26, 28, 29, 30, 31, 34, 37, 38, 47, 49, 50, 51, 58, 59]:
                        self.state = 490
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 487
                            self.match(MathParser.T__0)
                            self.state = 492
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [57]:
                        self.state = 493
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 5:
                    self.state = 496
                    self.while_loop()
                    self.state = 504
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 11, 12, 13, 15, 16, 17, 18, 19, 22, 23, 24, 26, 28, 29, 30, 31, 34, 37, 38, 47, 49, 50, 51, 58, 59]:
                        self.state = 500
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 497
                            self.match(MathParser.T__0)
                            self.state = 502
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [57]:
                        self.state = 503
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 6:
                    self.state = 506
                    self.for_loop()
                    self.state = 514
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 11, 12, 13, 15, 16, 17, 18, 19, 22, 23, 24, 26, 28, 29, 30, 31, 34, 37, 38, 47, 49, 50, 51, 58, 59]:
                        self.state = 510
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 507
                            self.match(MathParser.T__0)
                            self.state = 512
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [57]:
                        self.state = 513
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 7:
                    self.state = 516
                    self.assign()
                    self.state = 523
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 518 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 517
                            self.match(MathParser.T__0)
                            self.state = 520 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [57]:
                        self.state = 522
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 8:
                    self.state = 525
                    self.break_instr()
                    pass

                elif la_ == 9:
                    self.state = 526
                    self.cont_instr()
                    pass

                elif la_ == 10:
                    self.state = 527
                    self.instr()
                    pass

                elif la_ == 11:
                    self.state = 528
                    self.comp()
                    self.state = 535
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 530 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 529
                            self.match(MathParser.T__0)
                            self.state = 532 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [57]:
                        self.state = 534
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 12:
                    self.state = 537
                    self.switch_instr()
                    self.state = 545
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 11, 12, 13, 15, 16, 17, 18, 19, 22, 23, 24, 26, 28, 29, 30, 31, 34, 37, 38, 47, 49, 50, 51, 58, 59]:
                        self.state = 541
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 538
                            self.match(MathParser.T__0)
                            self.state = 543
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [57]:
                        self.state = 544
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 13:
                    self.state = 547
                    self.comment()
                    pass


                self.state = 552
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 553
            self.match(MathParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.switch_cond = None # ExprContext
            self._case_instr = None # Case_instrContext
            self.case_list = list() # of Case_instrContexts
            self.default = None # Default_instrContext

        def SWITCH(self):
            return self.getToken(MathParser.SWITCH, 0)

        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def case_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Case_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Case_instrContext,i)


        def default_instr(self):
            return self.getTypedRuleContext(MathParser.Default_instrContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_switch_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_instr" ):
                listener.enterSwitch_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_instr" ):
                listener.exitSwitch_instr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitch_instr" ):
                return visitor.visitSwitch_instr(self)
            else:
                return visitor.visitChildren(self)




    def switch_instr(self):

        localctx = MathParser.Switch_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_switch_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 555
            self.match(MathParser.SWITCH)
            self.state = 556
            self.match(MathParser.T__2)
            self.state = 557
            localctx.switch_cond = self.expr(0)
            self.state = 558
            self.match(MathParser.T__3)
            self.state = 559
            self.match(MathParser.T__4)
            self.state = 563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==20:
                self.state = 560
                localctx._case_instr = self.case_instr()
                localctx.case_list.append(localctx._case_instr)
                self.state = 565
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21:
                self.state = 566
                localctx.default = self.default_instr()


            self.state = 569
            self.match(MathParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.case_cond = None # ExprContext

        def CASE(self):
            return self.getToken(MathParser.CASE, 0)

        def switch_scope(self):
            return self.getTypedRuleContext(MathParser.Switch_scopeContext,0)


        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_case_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_instr" ):
                listener.enterCase_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_instr" ):
                listener.exitCase_instr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_instr" ):
                return visitor.visitCase_instr(self)
            else:
                return visitor.visitChildren(self)




    def case_instr(self):

        localctx = MathParser.Case_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_case_instr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 571
            self.match(MathParser.CASE)
            self.state = 572
            localctx.case_cond = self.expr(0)
            self.state = 573
            self.match(MathParser.T__6)
            self.state = 574
            self.switch_scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(MathParser.DEFAULT, 0)

        def switch_scope(self):
            return self.getTypedRuleContext(MathParser.Switch_scopeContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_default_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_instr" ):
                listener.enterDefault_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_instr" ):
                listener.exitDefault_instr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefault_instr" ):
                return visitor.visitDefault_instr(self)
            else:
                return visitor.visitChildren(self)




    def default_instr(self):

        localctx = MathParser.Default_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_default_instr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            self.match(MathParser.DEFAULT)
            self.state = 577
            self.match(MathParser.T__6)
            self.state = 578
            self.switch_scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_scopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def printf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.PrintfContext)
            else:
                return self.getTypedRuleContext(MathParser.PrintfContext,i)


        def scanf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.ScanfContext)
            else:
                return self.getTypedRuleContext(MathParser.ScanfContext,i)


        def return_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Return_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Return_instrContext,i)


        def if_cond(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.If_condContext)
            else:
                return self.getTypedRuleContext(MathParser.If_condContext,i)


        def while_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.While_loopContext)
            else:
                return self.getTypedRuleContext(MathParser.While_loopContext,i)


        def for_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.For_loopContext)
            else:
                return self.getTypedRuleContext(MathParser.For_loopContext,i)


        def assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.AssignContext)
            else:
                return self.getTypedRuleContext(MathParser.AssignContext,i)


        def break_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Break_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Break_instrContext,i)


        def cont_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Cont_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Cont_instrContext,i)


        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.InstrContext)
            else:
                return self.getTypedRuleContext(MathParser.InstrContext,i)


        def comp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.CompContext)
            else:
                return self.getTypedRuleContext(MathParser.CompContext,i)


        def switch_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.Switch_instrContext)
            else:
                return self.getTypedRuleContext(MathParser.Switch_instrContext,i)


        def comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.CommentContext)
            else:
                return self.getTypedRuleContext(MathParser.CommentContext,i)


        def DELIM(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.DELIM)
            else:
                return self.getToken(MathParser.DELIM, i)

        def getRuleIndex(self):
            return MathParser.RULE_switch_scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_scope" ):
                listener.enterSwitch_scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_scope" ):
                listener.exitSwitch_scope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitch_scope" ):
                return visitor.visitSwitch_scope(self)
            else:
                return visitor.visitChildren(self)




    def switch_scope(self):

        localctx = MathParser.Switch_scopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_switch_scope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 868772949238200360) != 0:
                self.state = 661
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                if la_ == 1:
                    self.state = 580
                    self.printf()
                    self.state = 587
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 582 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 581
                            self.match(MathParser.T__0)
                            self.state = 584 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [57]:
                        self.state = 586
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 2:
                    self.state = 589
                    self.scanf()
                    self.state = 596
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 591 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 590
                            self.match(MathParser.T__0)
                            self.state = 593 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [57]:
                        self.state = 595
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 3:
                    self.state = 598
                    self.return_instr()
                    pass

                elif la_ == 4:
                    self.state = 599
                    self.if_cond()
                    self.state = 607
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 34, 37, 38, 47, 49, 50, 51, 58, 59]:
                        self.state = 603
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 600
                            self.match(MathParser.T__0)
                            self.state = 605
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [57]:
                        self.state = 606
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 5:
                    self.state = 609
                    self.while_loop()
                    self.state = 617
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 34, 37, 38, 47, 49, 50, 51, 58, 59]:
                        self.state = 613
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 610
                            self.match(MathParser.T__0)
                            self.state = 615
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [57]:
                        self.state = 616
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 6:
                    self.state = 619
                    self.for_loop()
                    self.state = 627
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 34, 37, 38, 47, 49, 50, 51, 58, 59]:
                        self.state = 623
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 620
                            self.match(MathParser.T__0)
                            self.state = 625
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [57]:
                        self.state = 626
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 7:
                    self.state = 629
                    self.assign()
                    self.state = 636
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 631 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 630
                            self.match(MathParser.T__0)
                            self.state = 633 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [57]:
                        self.state = 635
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 8:
                    self.state = 638
                    self.break_instr()
                    pass

                elif la_ == 9:
                    self.state = 639
                    self.cont_instr()
                    pass

                elif la_ == 10:
                    self.state = 640
                    self.instr()
                    pass

                elif la_ == 11:
                    self.state = 641
                    self.comp()
                    self.state = 648
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 643 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 642
                            self.match(MathParser.T__0)
                            self.state = 645 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [57]:
                        self.state = 647
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 12:
                    self.state = 650
                    self.switch_instr()
                    self.state = 658
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 5, 6, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 34, 37, 38, 47, 49, 50, 51, 58, 59]:
                        self.state = 654
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 651
                            self.match(MathParser.T__0)
                            self.state = 656
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [57]:
                        self.state = 657
                        self.match(MathParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 13:
                    self.state = 660
                    self.comment()
                    pass


                self.state = 665
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cont_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(MathParser.CONTINUE, 0)

        def DELIM(self):
            return self.getToken(MathParser.DELIM, 0)

        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.InstrContext)
            else:
                return self.getTypedRuleContext(MathParser.InstrContext,i)


        def getRuleIndex(self):
            return MathParser.RULE_cont_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCont_instr" ):
                listener.enterCont_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCont_instr" ):
                listener.exitCont_instr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCont_instr" ):
                return visitor.visitCont_instr(self)
            else:
                return visitor.visitChildren(self)




    def cont_instr(self):

        localctx = MathParser.Cont_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_cont_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 666
            self.match(MathParser.CONTINUE)
            self.state = 667
            _la = self._input.LA(1)
            if not(_la==1 or _la==57):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 671
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,111,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 668
                    self.instr() 
                self.state = 673
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Break_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(MathParser.BREAK, 0)

        def DELIM(self):
            return self.getToken(MathParser.DELIM, 0)

        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.InstrContext)
            else:
                return self.getTypedRuleContext(MathParser.InstrContext,i)


        def getRuleIndex(self):
            return MathParser.RULE_break_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_instr" ):
                listener.enterBreak_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_instr" ):
                listener.exitBreak_instr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreak_instr" ):
                return visitor.visitBreak_instr(self)
            else:
                return visitor.visitChildren(self)




    def break_instr(self):

        localctx = MathParser.Break_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_break_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 674
            self.match(MathParser.BREAK)
            self.state = 675
            _la = self._input.LA(1)
            if not(_la==1 or _la==57):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 679
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,112,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 676
                    self.instr() 
                self.state = 681
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.const = None # Token
            self.type_ = None # Token
            self._STR = None # Token
            self.ptr = list() # of Tokens
            self.name = None # Token
            self.size = None # Token
            self._rtype = None # RtypeContext
            self.values = list() # of RtypeContexts

        def ASSIGN(self):
            return self.getToken(MathParser.ASSIGN, 0)

        def TYPE(self):
            return self.getToken(MathParser.TYPE, 0)

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def rtype(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.RtypeContext)
            else:
                return self.getTypedRuleContext(MathParser.RtypeContext,i)


        def CONST(self):
            return self.getToken(MathParser.CONST, 0)

        def STR(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.STR)
            else:
                return self.getToken(MathParser.STR, i)

        def INT(self):
            return self.getToken(MathParser.INT, 0)

        def getRuleIndex(self):
            return MathParser.RULE_array_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_decl" ):
                listener.enterArray_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_decl" ):
                listener.exitArray_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_decl" ):
                return visitor.visitArray_decl(self)
            else:
                return visitor.visitChildren(self)




    def array_decl(self):

        localctx = MathParser.Array_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_array_decl)
        self._la = 0 # Token type
        try:
            self.state = 725
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 683
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 682
                    localctx.const = self.match(MathParser.CONST)


                self.state = 685
                localctx.type_ = self.match(MathParser.TYPE)
                self.state = 689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==34:
                    self.state = 686
                    localctx._STR = self.match(MathParser.STR)
                    localctx.ptr.append(localctx._STR)
                    self.state = 691
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 692
                localctx.name = self.match(MathParser.VAR_NAME)
                self.state = 693
                self.match(MathParser.T__7)
                self.state = 695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==29:
                    self.state = 694
                    localctx.size = self.match(MathParser.INT)


                self.state = 697
                self.match(MathParser.T__8)
                self.state = 698
                self.match(MathParser.ASSIGN)
                self.state = 699
                self.match(MathParser.T__4)
                self.state = 705
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 700
                        localctx._rtype = self.rtype()
                        localctx.values.append(localctx._rtype)
                        self.state = 701
                        self.match(MathParser.T__1) 
                    self.state = 707
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

                self.state = 708
                localctx._rtype = self.rtype()
                localctx.values.append(localctx._rtype)
                self.state = 709
                self.match(MathParser.T__5)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 711
                    localctx.const = self.match(MathParser.CONST)


                self.state = 714
                localctx.type_ = self.match(MathParser.TYPE)
                self.state = 718
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==34:
                    self.state = 715
                    localctx._STR = self.match(MathParser.STR)
                    localctx.ptr.append(localctx._STR)
                    self.state = 720
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 721
                localctx.name = self.match(MathParser.VAR_NAME)
                self.state = 722
                self.match(MathParser.T__7)
                self.state = 723
                localctx.size = self.match(MathParser.INT)
                self.state = 724
                self.match(MathParser.T__8)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Incl_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.library = None # Token

        def INCLUDE(self):
            return self.getToken(MathParser.INCLUDE, 0)

        def LT(self):
            return self.getToken(MathParser.LT, 0)

        def GT(self):
            return self.getToken(MathParser.GT, 0)

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def getRuleIndex(self):
            return MathParser.RULE_incl_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncl_stat" ):
                listener.enterIncl_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncl_stat" ):
                listener.exitIncl_stat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncl_stat" ):
                return visitor.visitIncl_stat(self)
            else:
                return visitor.visitChildren(self)




    def incl_stat(self):

        localctx = MathParser.Incl_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_incl_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 727
            self.match(MathParser.INCLUDE)
            self.state = 728
            self.match(MathParser.LT)
            self.state = 729
            localctx.library = self.match(MathParser.VAR_NAME)
            self.state = 730
            self.match(MathParser.T__9)
            self.state = 731
            self.match(MathParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_condContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # CondContext

        def IF(self):
            return self.getToken(MathParser.IF, 0)

        def scope(self):
            return self.getTypedRuleContext(MathParser.ScopeContext,0)


        def cond(self):
            return self.getTypedRuleContext(MathParser.CondContext,0)


        def else_cond(self):
            return self.getTypedRuleContext(MathParser.Else_condContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_if_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_cond" ):
                listener.enterIf_cond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_cond" ):
                listener.exitIf_cond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_cond" ):
                return visitor.visitIf_cond(self)
            else:
                return visitor.visitChildren(self)




    def if_cond(self):

        localctx = MathParser.If_condContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_if_cond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            self.match(MathParser.IF)
            self.state = 734
            self.match(MathParser.T__2)
            self.state = 735
            localctx.condition = self.cond()
            self.state = 736
            self.match(MathParser.T__3)
            self.state = 737
            self.scope()
            self.state = 739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 738
                self.else_cond()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_condContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(MathParser.ELSE, 0)

        def scope(self):
            return self.getTypedRuleContext(MathParser.ScopeContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_else_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_cond" ):
                listener.enterElse_cond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_cond" ):
                listener.exitElse_cond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_cond" ):
                return visitor.visitElse_cond(self)
            else:
                return visitor.visitChildren(self)




    def else_cond(self):

        localctx = MathParser.Else_condContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_else_cond)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 741
            self.match(MathParser.ELSE)
            self.state = 742
            self.scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # CondContext

        def WHILE(self):
            return self.getToken(MathParser.WHILE, 0)

        def scope(self):
            return self.getTypedRuleContext(MathParser.ScopeContext,0)


        def cond(self):
            return self.getTypedRuleContext(MathParser.CondContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_while_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_loop" ):
                listener.enterWhile_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_loop" ):
                listener.exitWhile_loop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_loop" ):
                return visitor.visitWhile_loop(self)
            else:
                return visitor.visitChildren(self)




    def while_loop(self):

        localctx = MathParser.While_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_while_loop)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 744
            self.match(MathParser.WHILE)
            self.state = 745
            self.match(MathParser.T__2)
            self.state = 746
            localctx.condition = self.cond()
            self.state = 747
            self.match(MathParser.T__3)
            self.state = 748
            self.scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.initialization = None # InitContext
            self.condition = None # CondContext
            self.increment = None # IncrContext

        def FOR(self):
            return self.getToken(MathParser.FOR, 0)

        def scope(self):
            return self.getTypedRuleContext(MathParser.ScopeContext,0)


        def init(self):
            return self.getTypedRuleContext(MathParser.InitContext,0)


        def cond(self):
            return self.getTypedRuleContext(MathParser.CondContext,0)


        def incr(self):
            return self.getTypedRuleContext(MathParser.IncrContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_for_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_loop" ):
                listener.enterFor_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_loop" ):
                listener.exitFor_loop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_loop" ):
                return visitor.visitFor_loop(self)
            else:
                return visitor.visitChildren(self)




    def for_loop(self):

        localctx = MathParser.For_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_for_loop)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 750
            self.match(MathParser.FOR)
            self.state = 751
            self.match(MathParser.T__2)
            self.state = 752
            localctx.initialization = self.init()
            self.state = 753
            self.match(MathParser.T__0)
            self.state = 754
            localctx.condition = self.cond()
            self.state = 755
            self.match(MathParser.T__0)
            self.state = 756
            localctx.increment = self.incr()
            self.state = 757
            self.match(MathParser.T__3)
            self.state = 758
            self.scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(MathParser.TYPE, 0)

        def lvar(self):
            return self.getTypedRuleContext(MathParser.LvarContext,0)


        def ASSIGN(self):
            return self.getToken(MathParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def assign(self):
            return self.getTypedRuleContext(MathParser.AssignContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_init

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInit" ):
                listener.enterInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInit" ):
                listener.exitInit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInit" ):
                return visitor.visitInit(self)
            else:
                return visitor.visitChildren(self)




    def init(self):

        localctx = MathParser.InitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_init)
        try:
            self.state = 766
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26]:
                self.enterOuterAlt(localctx, 1)
                self.state = 760
                self.match(MathParser.TYPE)
                self.state = 761
                self.lvar()
                self.state = 762
                self.match(MathParser.ASSIGN)
                self.state = 763
                self.expr(0)
                pass
            elif token in [28, 34]:
                self.enterOuterAlt(localctx, 2)
                self.state = 765
                self.assign()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp(self):
            return self.getTypedRuleContext(MathParser.CompContext,0)


        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCond" ):
                listener.enterCond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCond" ):
                listener.exitCond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCond" ):
                return visitor.visitCond(self)
            else:
                return visitor.visitChildren(self)




    def cond(self):

        localctx = MathParser.CondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_cond)
        try:
            self.state = 770
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 768
                self.comp()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 769
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCR(self):
            return self.getToken(MathParser.INCR, 0)

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def DECR(self):
            return self.getToken(MathParser.DECR, 0)

        def getRuleIndex(self):
            return MathParser.RULE_incr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncr" ):
                listener.enterIncr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncr" ):
                listener.exitIncr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncr" ):
                return visitor.visitIncr(self)
            else:
                return visitor.visitChildren(self)




    def incr(self):

        localctx = MathParser.IncrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_incr)
        try:
            self.state = 782
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 772
                self.match(MathParser.INCR)
                self.state = 773
                self.rvar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 774
                self.match(MathParser.DECR)
                self.state = 775
                self.rvar()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 776
                self.rvar()
                self.state = 777
                self.match(MathParser.INCR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 779
                self.rvar()
                self.state = 780
                self.match(MathParser.DECR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lvar(self):
            return self.getTypedRuleContext(MathParser.LvarContext,0)


        def ASSIGN(self):
            return self.getToken(MathParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_var_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_decl" ):
                listener.enterVar_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_decl" ):
                listener.exitVar_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVar_decl" ):
                return visitor.visitVar_decl(self)
            else:
                return visitor.visitChildren(self)




    def var_decl(self):

        localctx = MathParser.Var_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_var_decl)
        try:
            self.state = 789
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 784
                self.lvar()
                self.state = 785
                self.match(MathParser.ASSIGN)
                self.state = 786
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 788
                self.lvar()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def ASSIGN(self):
            return self.getToken(MathParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def array_el(self):
            return self.getTypedRuleContext(MathParser.Array_elContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign" ):
                listener.enterAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign" ):
                listener.exitAssign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssign" ):
                return visitor.visitAssign(self)
            else:
                return visitor.visitChildren(self)




    def assign(self):

        localctx = MathParser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_assign)
        try:
            self.state = 803
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 791
                self.rvar()
                self.state = 792
                self.match(MathParser.ASSIGN)
                self.state = 793
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 795
                self.deref()
                self.state = 796
                self.match(MathParser.ASSIGN)
                self.state = 797
                self.expr(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 799
                self.array_el()
                self.state = 800
                self.match(MathParser.ASSIGN)
                self.state = 801
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_elContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.index = None # Token

        def lvar(self):
            return self.getTypedRuleContext(MathParser.LvarContext,0)


        def INT(self):
            return self.getToken(MathParser.INT, 0)

        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_array_el

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_el" ):
                listener.enterArray_el(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_el" ):
                listener.exitArray_el(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_el" ):
                return visitor.visitArray_el(self)
            else:
                return visitor.visitChildren(self)




    def array_el(self):

        localctx = MathParser.Array_elContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_array_el)
        try:
            self.state = 825
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 805
                self.lvar()
                self.state = 806
                self.match(MathParser.T__7)
                self.state = 807
                localctx.index = self.match(MathParser.INT)
                self.state = 808
                self.match(MathParser.T__8)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 810
                self.lvar()
                self.state = 811
                self.match(MathParser.T__7)
                self.state = 812
                self.expr(0)
                self.state = 813
                self.match(MathParser.T__8)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 815
                self.deref()
                self.state = 816
                self.match(MathParser.T__7)
                self.state = 817
                localctx.index = self.match(MathParser.INT)
                self.state = 818
                self.match(MathParser.T__8)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 820
                self.deref()
                self.state = 821
                self.match(MathParser.T__7)
                self.state = 822
                self.expr(0)
                self.state = 823
                self.match(MathParser.T__8)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DerefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STR(self):
            return self.getToken(MathParser.STR, 0)

        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_deref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeref" ):
                listener.enterDeref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeref" ):
                listener.exitDeref(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeref" ):
                return visitor.visitDeref(self)
            else:
                return visitor.visitChildren(self)




    def deref(self):

        localctx = MathParser.DerefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_deref)
        try:
            self.state = 831
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 827
                self.match(MathParser.STR)
                self.state = 828
                self.deref()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 829
                self.match(MathParser.STR)
                self.state = 830
                self.rvar()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LvarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._STR = None # Token
            self.ptr = list() # of Tokens
            self.name = None # Token

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def STR(self, i:int=None):
            if i is None:
                return self.getTokens(MathParser.STR)
            else:
                return self.getToken(MathParser.STR, i)

        def getRuleIndex(self):
            return MathParser.RULE_lvar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLvar" ):
                listener.enterLvar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLvar" ):
                listener.exitLvar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLvar" ):
                return visitor.visitLvar(self)
            else:
                return visitor.visitChildren(self)




    def lvar(self):

        localctx = MathParser.LvarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_lvar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 836
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==34:
                self.state = 833
                localctx._STR = self.match(MathParser.STR)
                localctx.ptr.append(localctx._STR)
                self.state = 838
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 839
            localctx.name = self.match(MathParser.VAR_NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RvarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR_NAME(self):
            return self.getToken(MathParser.VAR_NAME, 0)

        def getRuleIndex(self):
            return MathParser.RULE_rvar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRvar" ):
                listener.enterRvar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRvar" ):
                listener.exitRvar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRvar" ):
                return visitor.visitRvar(self)
            else:
                return visitor.visitChildren(self)




    def rvar(self):

        localctx = MathParser.RvarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_rvar)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 841
            self.match(MathParser.VAR_NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MathParser.ExprContext)
            else:
                return self.getTypedRuleContext(MathParser.ExprContext,i)


        def AND_OP(self):
            return self.getToken(MathParser.AND_OP, 0)

        def OR_OP(self):
            return self.getToken(MathParser.OR_OP, 0)

        def GEQ(self):
            return self.getToken(MathParser.GEQ, 0)

        def LEQ(self):
            return self.getToken(MathParser.LEQ, 0)

        def NEQ(self):
            return self.getToken(MathParser.NEQ, 0)

        def GT(self):
            return self.getToken(MathParser.GT, 0)

        def LT(self):
            return self.getToken(MathParser.LT, 0)

        def EQ(self):
            return self.getToken(MathParser.EQ, 0)

        def getRuleIndex(self):
            return MathParser.RULE_comp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp" ):
                listener.enterComp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp" ):
                listener.exitComp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp" ):
                return visitor.visitComp(self)
            else:
                return visitor.visitChildren(self)




    def comp(self):

        localctx = MathParser.CompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_comp)
        self._la = 0 # Token type
        try:
            self.state = 855
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 843
                self.expr(0)
                self.state = 844
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==45 or _la==46):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 845
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 847
                self.expr(0)
                self.state = 848
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 23089744183296) != 0):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 849
                self.expr(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 851
                self.expr(0)
                self.state = 852
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 11544872091648) != 0):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 853
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self):
            return self.getTypedRuleContext(MathParser.TermContext,0)


        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def SUM(self):
            return self.getToken(MathParser.SUM, 0)

        def DIF(self):
            return self.getToken(MathParser.DIF, 0)

        def AND_OP(self):
            return self.getToken(MathParser.AND_OP, 0)

        def OR_OP(self):
            return self.getToken(MathParser.OR_OP, 0)

        def getRuleIndex(self):
            return MathParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MathParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 80
        self.enterRecursionRule(localctx, 80, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 858
            self.term(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 871
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,131,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 869
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                    if la_ == 1:
                        localctx = MathParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 860
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 861
                        self.match(MathParser.SUM)
                        self.state = 862
                        self.term(0)
                        pass

                    elif la_ == 2:
                        localctx = MathParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 863
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 864
                        self.match(MathParser.DIF)
                        self.state = 865
                        self.term(0)
                        pass

                    elif la_ == 3:
                        localctx = MathParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 866
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 867
                        _la = self._input.LA(1)
                        if not(_la==45 or _la==46):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 868
                        self.term(0)
                        pass

             
                self.state = 873
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,131,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(MathParser.FactorContext,0)


        def NOT_OP(self):
            return self.getToken(MathParser.NOT_OP, 0)

        def term(self):
            return self.getTypedRuleContext(MathParser.TermContext,0)


        def STR(self):
            return self.getToken(MathParser.STR, 0)

        def DIV(self):
            return self.getToken(MathParser.DIV, 0)

        def MOD(self):
            return self.getToken(MathParser.MOD, 0)

        def GT(self):
            return self.getToken(MathParser.GT, 0)

        def LT(self):
            return self.getToken(MathParser.LT, 0)

        def GEQ(self):
            return self.getToken(MathParser.GEQ, 0)

        def LEQ(self):
            return self.getToken(MathParser.LEQ, 0)

        def EQ(self):
            return self.getToken(MathParser.EQ, 0)

        def NEQ(self):
            return self.getToken(MathParser.NEQ, 0)

        def INCR(self):
            return self.getToken(MathParser.INCR, 0)

        def DECR(self):
            return self.getToken(MathParser.DECR, 0)

        def getRuleIndex(self):
            return MathParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerm" ):
                return visitor.visitTerm(self)
            else:
                return visitor.visitChildren(self)



    def term(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MathParser.TermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 82
        self.enterRecursionRule(localctx, 82, self.RULE_term, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 11, 28, 29, 30, 31, 34, 37, 38, 49, 50, 51]:
                self.state = 875
                self.factor()
                pass
            elif token in [47]:
                self.state = 876
                self.match(MathParser.NOT_OP)
                self.state = 877
                self.factor()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 890
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,134,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 888
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
                    if la_ == 1:
                        localctx = MathParser.TermContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_term)
                        self.state = 880
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 881
                        _la = self._input.LA(1)
                        if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 120259084288) != 0):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 882
                        self.factor()
                        pass

                    elif la_ == 2:
                        localctx = MathParser.TermContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_term)
                        self.state = 883
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 884
                        _la = self._input.LA(1)
                        if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 34634616274944) != 0):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 885
                        self.factor()
                        pass

                    elif la_ == 3:
                        localctx = MathParser.TermContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_term)
                        self.state = 886
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 887
                        _la = self._input.LA(1)
                        if not(_la==50 or _la==51):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

             
                self.state = 892
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,134,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary(self):
            return self.getTypedRuleContext(MathParser.PrimaryContext,0)


        def DIF(self):
            return self.getToken(MathParser.DIF, 0)

        def factor(self):
            return self.getTypedRuleContext(MathParser.FactorContext,0)


        def SUM(self):
            return self.getToken(MathParser.SUM, 0)

        def INCR(self):
            return self.getToken(MathParser.INCR, 0)

        def DECR(self):
            return self.getToken(MathParser.DECR, 0)

        def getRuleIndex(self):
            return MathParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFactor" ):
                return visitor.visitFactor(self)
            else:
                return visitor.visitChildren(self)




    def factor(self):

        localctx = MathParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_factor)
        self._la = 0 # Token type
        try:
            self.state = 900
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 11, 28, 29, 30, 31, 34, 49]:
                self.enterOuterAlt(localctx, 1)
                self.state = 893
                self.primary()
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 2)
                self.state = 894
                self.match(MathParser.DIF)
                self.state = 895
                self.factor()
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 3)
                self.state = 896
                self.match(MathParser.SUM)
                self.state = 897
                self.factor()
                pass
            elif token in [50, 51]:
                self.enterOuterAlt(localctx, 4)
                self.state = 898
                _la = self._input.LA(1)
                if not(_la==50 or _la==51):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 899
                self.factor()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rvar(self):
            return self.getTypedRuleContext(MathParser.RvarContext,0)


        def rtype(self):
            return self.getTypedRuleContext(MathParser.RtypeContext,0)


        def ADDR(self):
            return self.getToken(MathParser.ADDR, 0)

        def deref(self):
            return self.getTypedRuleContext(MathParser.DerefContext,0)


        def expr(self):
            return self.getTypedRuleContext(MathParser.ExprContext,0)


        def CAST(self):
            return self.getToken(MathParser.CAST, 0)

        def primary(self):
            return self.getTypedRuleContext(MathParser.PrimaryContext,0)


        def func_call(self):
            return self.getTypedRuleContext(MathParser.Func_callContext,0)


        def array_el(self):
            return self.getTypedRuleContext(MathParser.Array_elContext,0)


        def getRuleIndex(self):
            return MathParser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimary" ):
                return visitor.visitPrimary(self)
            else:
                return visitor.visitChildren(self)




    def primary(self):

        localctx = MathParser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_primary)
        try:
            self.state = 915
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 902
                self.rvar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 903
                self.rtype()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 904
                self.match(MathParser.ADDR)
                self.state = 905
                self.rvar()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 906
                self.deref()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 907
                self.match(MathParser.T__2)
                self.state = 908
                self.expr(0)
                self.state = 909
                self.match(MathParser.T__3)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 911
                self.match(MathParser.CAST)
                self.state = 912
                self.primary()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 913
                self.func_call()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 914
                self.array_el()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RtypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(MathParser.INT, 0)

        def FLOAT(self):
            return self.getToken(MathParser.FLOAT, 0)

        def CHAR(self):
            return self.getToken(MathParser.CHAR, 0)

        def getRuleIndex(self):
            return MathParser.RULE_rtype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRtype" ):
                listener.enterRtype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRtype" ):
                listener.exitRtype(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRtype" ):
                return visitor.visitRtype(self)
            else:
                return visitor.visitChildren(self)




    def rtype(self):

        localctx = MathParser.RtypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_rtype)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 917
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 3758096384) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[40] = self.expr_sempred
        self._predicates[41] = self.term_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def term_sempred(self, localctx:TermContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 1)
         




