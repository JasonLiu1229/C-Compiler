@x = global i32 5
@y = global float 3.140000104904175

declare i32 @printf(ptr noundef, ...)

@.str1 = private unnamed_addr constant [4 x i8] c"%f\0A\00" align 1
@.str2 = private unnamed_addr constant [4 x i8] c"%d\0A\00" align 1
@.str3 = private unnamed_addr constant [4 x i8] c"%d\0A\00" align 1

@ptr1 = global i32* @x , align 8

define dso_local i32 @main () {
	%1 = alloca float, align 4
	store float 3.140000104904175, ptr %1, align 4
	%2 = load float, ptr %1, align 4
	%3 = fpext float %2 to double
	%4 = call i32 (ptr, ...) @printf(ptr noundef @.str1, double noundef %3)
	%5= alloca i32, align 4
	store i32 2, ptr %5, align 4
	%6= load i32, ptr %5, align 4
	%7= call i32 (ptr, ...) @printf(ptr noundef @.str2, i32 noundef %6)
	%8= alloca i32, align 4
	store i32 5, ptr %8, align 4
	%9= load i32, ptr %8, align 4
	%10= call i32 (ptr, ...) @printf(ptr noundef @.str3, i32 noundef %9)
	ret i32 0
}

% Output should contain, as usual, declarations of global variables , all the used functions and
% variables needed by them (.str in our case)
% In the main function, the code for three consecutive printf calls is written.